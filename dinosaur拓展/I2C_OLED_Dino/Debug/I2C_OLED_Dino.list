
I2C_OLED_Dino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000533c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  08005448  08005448  00006448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d10  08005d10  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d10  08005d10  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d10  08005d10  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005d18  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  2000005c  08005d74  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08005d74  00007744  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008602  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec6  00000000  00000000  0000f687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00011550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c3  00000000  00000000  00011e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bed  00000000  00000000  00012503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d285  00000000  00000000  0002a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008326f  00000000  00000000  00037375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba5e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a0  00000000  00000000  000ba628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000bcdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005430 	.word	0x08005430

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005430 	.word	0x08005430

0800014c <introMessage>:

/**
 * @brief Draw the introduction screen
 * @note Referenced from github@harshmittal2210/dino_game.ino
 */
void introMessage() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  OLED_NewFrame();
 8000152:	f000 fd17 	bl	8000b84 <OLED_NewFrame>
  OLED_PrintString((128 - 80) / 2, 8, "小恐龙游戏", &font16x16, OLED_COLOR_NORMAL);
 8000156:	2300      	movs	r3, #0
 8000158:	9300      	str	r3, [sp, #0]
 800015a:	4b0c      	ldr	r3, [pc, #48]	@ (800018c <introMessage+0x40>)
 800015c:	4a0c      	ldr	r2, [pc, #48]	@ (8000190 <introMessage+0x44>)
 800015e:	2108      	movs	r1, #8
 8000160:	2018      	movs	r0, #24
 8000162:	f001 f897 	bl	8001294 <OLED_PrintString>
  OLED_DrawImage(DINO_INIT_X, DINO_INIT_Y, &dino_jumpsImg, OLED_COLOR_NORMAL);
 8000166:	2300      	movs	r3, #0
 8000168:	4a0a      	ldr	r2, [pc, #40]	@ (8000194 <introMessage+0x48>)
 800016a:	2127      	movs	r1, #39	@ 0x27
 800016c:	200a      	movs	r0, #10
 800016e:	f001 f81b 	bl	80011a8 <OLED_DrawImage>
  OLED_PrintString((128 - 32) / 2, 43, "开始", &font16x16, OLED_COLOR_NORMAL);
 8000172:	2300      	movs	r3, #0
 8000174:	9300      	str	r3, [sp, #0]
 8000176:	4b05      	ldr	r3, [pc, #20]	@ (800018c <introMessage+0x40>)
 8000178:	4a07      	ldr	r2, [pc, #28]	@ (8000198 <introMessage+0x4c>)
 800017a:	212b      	movs	r1, #43	@ 0x2b
 800017c:	2030      	movs	r0, #48	@ 0x30
 800017e:	f001 f889 	bl	8001294 <OLED_PrintString>
  OLED_ShowFrame();
 8000182:	f000 fd0b 	bl	8000b9c <OLED_ShowFrame>
}
 8000186:	bf00      	nop
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	08005ca0 	.word	0x08005ca0
 8000190:	08005448 	.word	0x08005448
 8000194:	080055a8 	.word	0x080055a8
 8000198:	08005458 	.word	0x08005458

0800019c <showLine>:

void showLine() {
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af02      	add	r7, sp, #8
  int line_end = 1;
 80001a2:	2301      	movs	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
  OLED_NewFrame();
 80001a6:	f000 fced 	bl	8000b84 <OLED_NewFrame>
  OLED_DrawImage(DINO_INIT_X, DINO_INIT_Y, &dino_jumpsImg, OLED_COLOR_NORMAL);
 80001aa:	2300      	movs	r3, #0
 80001ac:	4a0d      	ldr	r2, [pc, #52]	@ (80001e4 <showLine+0x48>)
 80001ae:	2127      	movs	r1, #39	@ 0x27
 80001b0:	200a      	movs	r0, #10
 80001b2:	f000 fff9 	bl	80011a8 <OLED_DrawImage>
  for (;;) {
    OLED_DrawLine(BASE_LINE_X, BASE_LINE_Y, line_end, BASE_LINE_Y, OLED_COLOR_NORMAL);
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	b2da      	uxtb	r2, r3
 80001ba:	2300      	movs	r3, #0
 80001bc:	9300      	str	r3, [sp, #0]
 80001be:	233f      	movs	r3, #63	@ 0x3f
 80001c0:	213f      	movs	r1, #63	@ 0x3f
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 ff04 	bl	8000fd0 <OLED_DrawLine>
    OLED_ShowFrame();
 80001c8:	f000 fce8 	bl	8000b9c <OLED_ShowFrame>
    line_end += 4;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	3304      	adds	r3, #4
 80001d0:	607b      	str	r3, [r7, #4]
    if (line_end > BASE_LINE_X1) break;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80001d6:	dc00      	bgt.n	80001da <showLine+0x3e>
    OLED_DrawLine(BASE_LINE_X, BASE_LINE_Y, line_end, BASE_LINE_Y, OLED_COLOR_NORMAL);
 80001d8:	e7ed      	b.n	80001b6 <showLine+0x1a>
    if (line_end > BASE_LINE_X1) break;
 80001da:	bf00      	nop
  }
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	080055a8 	.word	0x080055a8

080001e8 <moveDino>:

/**
 * @brief Move dino
 * @note Referenced from github@harshmittal2210/dino_game.ino
 */
void moveDino(int16_t y, int type) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	80fb      	strh	r3, [r7, #6]
  if (type == 0)
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d107      	bne.n	800020a <moveDino+0x22>
    OLED_DrawImage(DINO_INIT_X, y, &dino_front_legImg, OLED_COLOR_NORMAL);
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	b2d9      	uxtb	r1, r3
 80001fe:	2300      	movs	r3, #0
 8000200:	4a15      	ldr	r2, [pc, #84]	@ (8000258 <moveDino+0x70>)
 8000202:	200a      	movs	r0, #10
 8000204:	f000 ffd0 	bl	80011a8 <OLED_DrawImage>
    OLED_DrawImage(DINO_INIT_X, y, &dino_back_legImg, OLED_COLOR_NORMAL);
  else if (type == -1)
    OLED_DrawImage(DINO_INIT_X, y, &dino_jumpsImg, OLED_COLOR_NORMAL);
  else if (type == -2)
    OLED_DrawImage(DINO_INIT_X, y, &dino_crashedImg, OLED_COLOR_NORMAL);
}
 8000208:	e021      	b.n	800024e <moveDino+0x66>
  else if (type == 1)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d107      	bne.n	8000220 <moveDino+0x38>
    OLED_DrawImage(DINO_INIT_X, y, &dino_back_legImg, OLED_COLOR_NORMAL);
 8000210:	88fb      	ldrh	r3, [r7, #6]
 8000212:	b2d9      	uxtb	r1, r3
 8000214:	2300      	movs	r3, #0
 8000216:	4a11      	ldr	r2, [pc, #68]	@ (800025c <moveDino+0x74>)
 8000218:	200a      	movs	r0, #10
 800021a:	f000 ffc5 	bl	80011a8 <OLED_DrawImage>
}
 800021e:	e016      	b.n	800024e <moveDino+0x66>
  else if (type == -1)
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000226:	d107      	bne.n	8000238 <moveDino+0x50>
    OLED_DrawImage(DINO_INIT_X, y, &dino_jumpsImg, OLED_COLOR_NORMAL);
 8000228:	88fb      	ldrh	r3, [r7, #6]
 800022a:	b2d9      	uxtb	r1, r3
 800022c:	2300      	movs	r3, #0
 800022e:	4a0c      	ldr	r2, [pc, #48]	@ (8000260 <moveDino+0x78>)
 8000230:	200a      	movs	r0, #10
 8000232:	f000 ffb9 	bl	80011a8 <OLED_DrawImage>
}
 8000236:	e00a      	b.n	800024e <moveDino+0x66>
  else if (type == -2)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	f113 0f02 	cmn.w	r3, #2
 800023e:	d106      	bne.n	800024e <moveDino+0x66>
    OLED_DrawImage(DINO_INIT_X, y, &dino_crashedImg, OLED_COLOR_NORMAL);
 8000240:	88fb      	ldrh	r3, [r7, #6]
 8000242:	b2d9      	uxtb	r1, r3
 8000244:	2300      	movs	r3, #0
 8000246:	4a07      	ldr	r2, [pc, #28]	@ (8000264 <moveDino+0x7c>)
 8000248:	200a      	movs	r0, #10
 800024a:	f000 ffad 	bl	80011a8 <OLED_DrawImage>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	08005518 	.word	0x08005518
 800025c:	08005560 	.word	0x08005560
 8000260:	080055a8 	.word	0x080055a8
 8000264:	080054d0 	.word	0x080054d0

08000268 <moveTree>:

/**
 * @brief Move tree
 * @note Referenced from github@harshmittal2210/dino_game.ino
 */
void moveTree(int16_t x, Image *type) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	80fb      	strh	r3, [r7, #6]
  if (x > 127 - type->w) return;
 8000274:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000280:	429a      	cmp	r2, r3
 8000282:	dc0b      	bgt.n	800029c <moveTree+0x34>
  OLED_DrawImage(x, BASE_LINE_Y - type->h, type, OLED_COLOR_NORMAL);
 8000284:	88fb      	ldrh	r3, [r7, #6]
 8000286:	b2d8      	uxtb	r0, r3
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	785b      	ldrb	r3, [r3, #1]
 800028c:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000290:	b2d9      	uxtb	r1, r3
 8000292:	2300      	movs	r3, #0
 8000294:	683a      	ldr	r2, [r7, #0]
 8000296:	f000 ff87 	bl	80011a8 <OLED_DrawImage>
 800029a:	e000      	b.n	800029e <moveTree+0x36>
  if (x > 127 - type->w) return;
 800029c:	bf00      	nop
}
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <displayScore>:

/**
 * @brief Display score while running the game
 * @note Referenced from github@harshmittal2210/dino_game.ino
 */
void displayScore(int score, int8_t type) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]
  static char tmp[15];
  if (type == 0) {
 80002b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d115      	bne.n	80002e4 <displayScore+0x40>
    sprintf(tmp, "%d", score);
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	4918      	ldr	r1, [pc, #96]	@ (800031c <displayScore+0x78>)
 80002bc:	4818      	ldr	r0, [pc, #96]	@ (8000320 <displayScore+0x7c>)
 80002be:	f004 fbf7 	bl	8004ab0 <siprintf>
    OLED_PrintString(72, 3, "得分：", &font16x16, OLED_COLOR_NORMAL);
 80002c2:	2300      	movs	r3, #0
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <displayScore+0x80>)
 80002c8:	4a17      	ldr	r2, [pc, #92]	@ (8000328 <displayScore+0x84>)
 80002ca:	2103      	movs	r1, #3
 80002cc:	2048      	movs	r0, #72	@ 0x48
 80002ce:	f000 ffe1 	bl	8001294 <OLED_PrintString>
    OLED_PrintString(72 + 30, 3, tmp, &font16x16, OLED_COLOR_NORMAL);
 80002d2:	2300      	movs	r3, #0
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	4b13      	ldr	r3, [pc, #76]	@ (8000324 <displayScore+0x80>)
 80002d8:	4a11      	ldr	r2, [pc, #68]	@ (8000320 <displayScore+0x7c>)
 80002da:	2103      	movs	r1, #3
 80002dc:	2066      	movs	r0, #102	@ 0x66
 80002de:	f000 ffd9 	bl	8001294 <OLED_PrintString>
  else {
    sprintf(tmp, "%d", highest_score);
    OLED_PrintString(72 - 12, 22, "最高分：", &font16x16, OLED_COLOR_NORMAL);
    OLED_PrintString(72 + 30, 22, tmp, &font16x16, OLED_COLOR_NORMAL);
  }
}
 80002e2:	e016      	b.n	8000312 <displayScore+0x6e>
    sprintf(tmp, "%d", highest_score);
 80002e4:	4b11      	ldr	r3, [pc, #68]	@ (800032c <displayScore+0x88>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	461a      	mov	r2, r3
 80002ea:	490c      	ldr	r1, [pc, #48]	@ (800031c <displayScore+0x78>)
 80002ec:	480c      	ldr	r0, [pc, #48]	@ (8000320 <displayScore+0x7c>)
 80002ee:	f004 fbdf 	bl	8004ab0 <siprintf>
    OLED_PrintString(72 - 12, 22, "最高分：", &font16x16, OLED_COLOR_NORMAL);
 80002f2:	2300      	movs	r3, #0
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <displayScore+0x80>)
 80002f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000330 <displayScore+0x8c>)
 80002fa:	2116      	movs	r1, #22
 80002fc:	203c      	movs	r0, #60	@ 0x3c
 80002fe:	f000 ffc9 	bl	8001294 <OLED_PrintString>
    OLED_PrintString(72 + 30, 22, tmp, &font16x16, OLED_COLOR_NORMAL);
 8000302:	2300      	movs	r3, #0
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	4b07      	ldr	r3, [pc, #28]	@ (8000324 <displayScore+0x80>)
 8000308:	4a05      	ldr	r2, [pc, #20]	@ (8000320 <displayScore+0x7c>)
 800030a:	2116      	movs	r1, #22
 800030c:	2066      	movs	r0, #102	@ 0x66
 800030e:	f000 ffc1 	bl	8001294 <OLED_PrintString>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	08005460 	.word	0x08005460
 8000320:	2000007c 	.word	0x2000007c
 8000324:	08005ca0 	.word	0x08005ca0
 8000328:	08005464 	.word	0x08005464
 800032c:	20000078 	.word	0x20000078
 8000330:	08005470 	.word	0x08005470

08000334 <play>:

// Main play function
void play() {
 8000334:	b580      	push	{r7, lr}
 8000336:	b08c      	sub	sp, #48	@ 0x30
 8000338:	af02      	add	r7, sp, #8
  int16_t tree_interval = 252;
 800033a:	23fc      	movs	r3, #252	@ 0xfc
 800033c:	813b      	strh	r3, [r7, #8]
  int16_t tree1_interval = 381;
 800033e:	f240 137d 	movw	r3, #381	@ 0x17d
 8000342:	80fb      	strh	r3, [r7, #6]
  int16_t tree_x = tree_interval + 100;
 8000344:	893b      	ldrh	r3, [r7, #8]
 8000346:	3364      	adds	r3, #100	@ 0x64
 8000348:	b29b      	uxth	r3, r3
 800034a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t tree1_x = tree1_interval + 200;
 800034c:	88fb      	ldrh	r3, [r7, #6]
 800034e:	33c8      	adds	r3, #200	@ 0xc8
 8000350:	b29b      	uxth	r3, r3
 8000352:	84bb      	strh	r3, [r7, #36]	@ 0x24
  Image *tree = (HAL_GetTick() % 8) ? (Image *)&tree_smallImg : (Image *)&tree_bigImg;
 8000354:	f001 f984 	bl	8001660 <HAL_GetTick>
 8000358:	4603      	mov	r3, r0
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <play+0x32>
 8000362:	4bb0      	ldr	r3, [pc, #704]	@ (8000624 <play+0x2f0>)
 8000364:	e000      	b.n	8000368 <play+0x34>
 8000366:	4bb0      	ldr	r3, [pc, #704]	@ (8000628 <play+0x2f4>)
 8000368:	623b      	str	r3, [r7, #32]
  Image *tree1 = (HAL_GetTick() % 5) ? (Image *)&tree_smallImg : (Image *)&tree_bigImg;
 800036a:	f001 f979 	bl	8001660 <HAL_GetTick>
 800036e:	4601      	mov	r1, r0
 8000370:	4bae      	ldr	r3, [pc, #696]	@ (800062c <play+0x2f8>)
 8000372:	fba3 2301 	umull	r2, r3, r3, r1
 8000376:	089a      	lsrs	r2, r3, #2
 8000378:	4613      	mov	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	4413      	add	r3, r2
 800037e:	1aca      	subs	r2, r1, r3
 8000380:	2a00      	cmp	r2, #0
 8000382:	d001      	beq.n	8000388 <play+0x54>
 8000384:	4ba7      	ldr	r3, [pc, #668]	@ (8000624 <play+0x2f0>)
 8000386:	e000      	b.n	800038a <play+0x56>
 8000388:	4ba7      	ldr	r3, [pc, #668]	@ (8000628 <play+0x2f4>)
 800038a:	61fb      	str	r3, [r7, #28]
  int16_t dino_right = DINO_INIT_X + dino_front_legImg.w;
 800038c:	2315      	movs	r3, #21
 800038e:	330a      	adds	r3, #10
 8000390:	b29b      	uxth	r3, r3
 8000392:	80bb      	strh	r3, [r7, #4]

  int16_t dino_y = DINO_INIT_Y;
 8000394:	2327      	movs	r3, #39	@ 0x27
 8000396:	837b      	strh	r3, [r7, #26]
  int jump = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  int score_raw = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	613b      	str	r3, [r7, #16]
  int score = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]

  int8_t leg = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	72fb      	strb	r3, [r7, #11]

  static char tmp[30];

  for (;;) {
    OLED_NewFrame();
 80003a8:	f000 fbec 	bl	8000b84 <OLED_NewFrame>

    if (HAL_GPIO_ReadPin(JUMP_GPIO_Port, JUMP_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == GPIO_PIN_RESET) {
 80003ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003b0:	489f      	ldr	r0, [pc, #636]	@ (8000630 <play+0x2fc>)
 80003b2:	f001 fdfb 	bl	8001fac <HAL_GPIO_ReadPin>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d007      	beq.n	80003cc <play+0x98>
 80003bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c0:	489b      	ldr	r0, [pc, #620]	@ (8000630 <play+0x2fc>)
 80003c2:	f001 fdf3 	bl	8001fac <HAL_GPIO_ReadPin>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d104      	bne.n	80003d6 <play+0xa2>
      if (jump == 0) jump = 1;
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d101      	bne.n	80003d6 <play+0xa2>
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
    }

    if (tree_x <= (dino_right - ((jump < 5) ? jump : 5)) && tree_x > (DINO_INIT_X + 1) && (dino_y + dino_back_legImg.h) >= (BASE_LINE_Y - tree->h)) {
 80003d6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80003da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	2b05      	cmp	r3, #5
 80003e2:	bfa8      	it	ge
 80003e4:	2305      	movge	r3, #5
 80003e6:	1acb      	subs	r3, r1, r3
 80003e8:	429a      	cmp	r2, r3
 80003ea:	dc44      	bgt.n	8000476 <play+0x142>
 80003ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80003f0:	2b0b      	cmp	r3, #11
 80003f2:	dd40      	ble.n	8000476 <play+0x142>
 80003f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80003f8:	2217      	movs	r2, #23
 80003fa:	441a      	add	r2, r3
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	785b      	ldrb	r3, [r3, #1]
 8000400:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000404:	429a      	cmp	r2, r3
 8000406:	db36      	blt.n	8000476 <play+0x142>
      // Collision Happened
      moveDino(dino_y, -2);
 8000408:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800040c:	f06f 0101 	mvn.w	r1, #1
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff fee9 	bl	80001e8 <moveDino>
      moveTree(tree_x, tree);
 8000416:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800041a:	6a39      	ldr	r1, [r7, #32]
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff23 	bl	8000268 <moveTree>
      moveTree(tree1_x, tree1);
 8000422:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000426:	69f9      	ldr	r1, [r7, #28]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff1d 	bl	8000268 <moveTree>
      OLED_DrawLine(BASE_LINE_X, BASE_LINE_Y, BASE_LINE_X1, BASE_LINE_Y, OLED_COLOR_NORMAL);
 800042e:	2300      	movs	r3, #0
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	233f      	movs	r3, #63	@ 0x3f
 8000434:	227f      	movs	r2, #127	@ 0x7f
 8000436:	213f      	movs	r1, #63	@ 0x3f
 8000438:	2000      	movs	r0, #0
 800043a:	f000 fdc9 	bl	8000fd0 <OLED_DrawLine>
      displayScore(score, 0);
 800043e:	2100      	movs	r1, #0
 8000440:	68f8      	ldr	r0, [r7, #12]
 8000442:	f7ff ff2f 	bl	80002a4 <displayScore>
      if (score > highest_score) {
 8000446:	4b7b      	ldr	r3, [pc, #492]	@ (8000634 <play+0x300>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	429a      	cmp	r2, r3
 800044e:	dd0b      	ble.n	8000468 <play+0x134>
        highest_score = score;
 8000450:	4a78      	ldr	r2, [pc, #480]	@ (8000634 <play+0x300>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	6013      	str	r3, [r2, #0]
        OLED_PrintString(75, 22, "新纪录！", &font16x16, OLED_COLOR_NORMAL);
 8000456:	2300      	movs	r3, #0
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	4b77      	ldr	r3, [pc, #476]	@ (8000638 <play+0x304>)
 800045c:	4a77      	ldr	r2, [pc, #476]	@ (800063c <play+0x308>)
 800045e:	2116      	movs	r1, #22
 8000460:	204b      	movs	r0, #75	@ 0x4b
 8000462:	f000 ff17 	bl	8001294 <OLED_PrintString>
 8000466:	e003      	b.n	8000470 <play+0x13c>
      } else {
        displayScore(score, 1);
 8000468:	2101      	movs	r1, #1
 800046a:	68f8      	ldr	r0, [r7, #12]
 800046c:	f7ff ff1a 	bl	80002a4 <displayScore>
      }
      OLED_ShowFrame();
 8000470:	f000 fb94 	bl	8000b9c <OLED_ShowFrame>
      break;
 8000474:	e13e      	b.n	80006f4 <play+0x3c0>
    }

    if (tree1_x <= (dino_right - ((jump < 5) ? jump : 5)) && tree1_x > (DINO_INIT_X + 1) && (dino_y + dino_back_legImg.h) >= (BASE_LINE_Y - tree1->h)) {
 8000476:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800047a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	2b05      	cmp	r3, #5
 8000482:	bfa8      	it	ge
 8000484:	2305      	movge	r3, #5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	429a      	cmp	r2, r3
 800048a:	dc48      	bgt.n	800051e <play+0x1ea>
 800048c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000490:	2b0b      	cmp	r3, #11
 8000492:	dd44      	ble.n	800051e <play+0x1ea>
 8000494:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000498:	2217      	movs	r2, #23
 800049a:	441a      	add	r2, r3
 800049c:	69fb      	ldr	r3, [r7, #28]
 800049e:	785b      	ldrb	r3, [r3, #1]
 80004a0:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80004a4:	429a      	cmp	r2, r3
 80004a6:	db3a      	blt.n	800051e <play+0x1ea>
      if (dino_y >= (DINO_INIT_Y - 3)) {
 80004a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80004ac:	2b23      	cmp	r3, #35	@ 0x23
 80004ae:	dd36      	ble.n	800051e <play+0x1ea>
        // Collision Happened
        moveDino(dino_y, -2);
 80004b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80004b4:	f06f 0101 	mvn.w	r1, #1
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fe95 	bl	80001e8 <moveDino>
        moveTree(tree_x, tree);
 80004be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80004c2:	6a39      	ldr	r1, [r7, #32]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fecf 	bl	8000268 <moveTree>
        moveTree(tree1_x, tree1);
 80004ca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80004ce:	69f9      	ldr	r1, [r7, #28]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff fec9 	bl	8000268 <moveTree>
        OLED_DrawLine(BASE_LINE_X, BASE_LINE_Y, BASE_LINE_X1, BASE_LINE_Y, OLED_COLOR_NORMAL);
 80004d6:	2300      	movs	r3, #0
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	233f      	movs	r3, #63	@ 0x3f
 80004dc:	227f      	movs	r2, #127	@ 0x7f
 80004de:	213f      	movs	r1, #63	@ 0x3f
 80004e0:	2000      	movs	r0, #0
 80004e2:	f000 fd75 	bl	8000fd0 <OLED_DrawLine>
        displayScore(score, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	68f8      	ldr	r0, [r7, #12]
 80004ea:	f7ff fedb 	bl	80002a4 <displayScore>
        if (score > highest_score) {
 80004ee:	4b51      	ldr	r3, [pc, #324]	@ (8000634 <play+0x300>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dd0b      	ble.n	8000510 <play+0x1dc>
          highest_score = score;
 80004f8:	4a4e      	ldr	r2, [pc, #312]	@ (8000634 <play+0x300>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6013      	str	r3, [r2, #0]
          OLED_PrintString(75, 22, "新纪录！", &font16x16, OLED_COLOR_NORMAL);
 80004fe:	2300      	movs	r3, #0
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	4b4d      	ldr	r3, [pc, #308]	@ (8000638 <play+0x304>)
 8000504:	4a4d      	ldr	r2, [pc, #308]	@ (800063c <play+0x308>)
 8000506:	2116      	movs	r1, #22
 8000508:	204b      	movs	r0, #75	@ 0x4b
 800050a:	f000 fec3 	bl	8001294 <OLED_PrintString>
 800050e:	e003      	b.n	8000518 <play+0x1e4>
        } else {
          displayScore(score, 1);
 8000510:	2101      	movs	r1, #1
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f7ff fec6 	bl	80002a4 <displayScore>
        }
        OLED_ShowFrame();
 8000518:	f000 fb40 	bl	8000b9c <OLED_ShowFrame>
        break;
 800051c:	e0ea      	b.n	80006f4 <play+0x3c0>
      }
    }

    if (jump > 0) {
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	2b00      	cmp	r3, #0
 8000522:	dd0f      	ble.n	8000544 <play+0x210>
      dino_y = DINO_INIT_Y - time_distance[jump - 1];
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	3b01      	subs	r3, #1
 8000528:	4a45      	ldr	r2, [pc, #276]	@ (8000640 <play+0x30c>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 8000530:	b29b      	uxth	r3, r3
 8000532:	837b      	strh	r3, [r7, #26]
      if (++jump > 38) jump = 0;
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	3301      	adds	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	2b26      	cmp	r3, #38	@ 0x26
 800053e:	dd01      	ble.n	8000544 <play+0x210>
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
    }

    score_raw++;
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	3301      	adds	r3, #1
 8000548:	613b      	str	r3, [r7, #16]
    score = score_raw / 5;
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	4a3d      	ldr	r2, [pc, #244]	@ (8000644 <play+0x310>)
 800054e:	fb82 1203 	smull	r1, r2, r2, r3
 8000552:	1052      	asrs	r2, r2, #1
 8000554:	17db      	asrs	r3, r3, #31
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	60fb      	str	r3, [r7, #12]
    displayScore(score, 0);
 800055a:	2100      	movs	r1, #0
 800055c:	68f8      	ldr	r0, [r7, #12]
 800055e:	f7ff fea1 	bl	80002a4 <displayScore>
    if (jump != 0)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d007      	beq.n	8000578 <play+0x244>
      moveDino(dino_y, -1);
 8000568:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800056c:	f04f 31ff 	mov.w	r1, #4294967295
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe39 	bl	80001e8 <moveDino>
 8000576:	e017      	b.n	80005a8 <play+0x274>
    else {
      moveDino(dino_y, leg > 4 ? 1 : 0);
 8000578:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800057c:	2b04      	cmp	r3, #4
 800057e:	bfcc      	ite	gt
 8000580:	2301      	movgt	r3, #1
 8000582:	2300      	movle	r3, #0
 8000584:	b2db      	uxtb	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800058c:	4611      	mov	r1, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe2a 	bl	80001e8 <moveDino>
      if (++leg > 9) leg = 0;
 8000594:	7afb      	ldrb	r3, [r7, #11]
 8000596:	3301      	adds	r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	72fb      	strb	r3, [r7, #11]
 800059c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80005a0:	2b09      	cmp	r3, #9
 80005a2:	dd01      	ble.n	80005a8 <play+0x274>
 80005a4:	2300      	movs	r3, #0
 80005a6:	72fb      	strb	r3, [r7, #11]
    }
    moveTree(tree_x, tree);
 80005a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80005ac:	6a39      	ldr	r1, [r7, #32]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe5a 	bl	8000268 <moveTree>
    moveTree(tree1_x, tree1);
 80005b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80005b8:	69f9      	ldr	r1, [r7, #28]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe54 	bl	8000268 <moveTree>
    OLED_DrawLine(BASE_LINE_X, BASE_LINE_Y, BASE_LINE_X1, BASE_LINE_Y, OLED_COLOR_NORMAL);
 80005c0:	2300      	movs	r3, #0
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	233f      	movs	r3, #63	@ 0x3f
 80005c6:	227f      	movs	r2, #127	@ 0x7f
 80005c8:	213f      	movs	r1, #63	@ 0x3f
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 fd00 	bl	8000fd0 <OLED_DrawLine>

    tree_x -= 2;
 80005d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005d2:	3b02      	subs	r3, #2
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    tree1_x -= 2;
 80005d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80005da:	3b02      	subs	r3, #2
 80005dc:	b29b      	uxth	r3, r3
 80005de:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (tree_x <= 0) {
 80005e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	dc31      	bgt.n	800064c <play+0x318>
      tree_x = tree_interval + HAL_GetTick() / 10 % 20;
 80005e8:	f001 f83a 	bl	8001660 <HAL_GetTick>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <play+0x2f8>)
 80005f0:	fba2 2303 	umull	r2, r3, r2, r3
 80005f4:	08d9      	lsrs	r1, r3, #3
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <play+0x2f8>)
 80005f8:	fba3 2301 	umull	r2, r3, r3, r1
 80005fc:	091a      	lsrs	r2, r3, #4
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	1aca      	subs	r2, r1, r3
 8000608:	b292      	uxth	r2, r2
 800060a:	893b      	ldrh	r3, [r7, #8]
 800060c:	4413      	add	r3, r2
 800060e:	b29b      	uxth	r3, r3
 8000610:	84fb      	strh	r3, [r7, #38]	@ 0x26
      tree = (HAL_GetTick() % 4) ? (Image *)&tree_smallImg : (Image *)&tree_bigImg;
 8000612:	f001 f825 	bl	8001660 <HAL_GetTick>
 8000616:	4603      	mov	r3, r0
 8000618:	f003 0303 	and.w	r3, r3, #3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d013      	beq.n	8000648 <play+0x314>
 8000620:	4b00      	ldr	r3, [pc, #0]	@ (8000624 <play+0x2f0>)
 8000622:	e012      	b.n	800064a <play+0x316>
 8000624:	080055bc 	.word	0x080055bc
 8000628:	080055e8 	.word	0x080055e8
 800062c:	cccccccd 	.word	0xcccccccd
 8000630:	40010c00 	.word	0x40010c00
 8000634:	20000078 	.word	0x20000078
 8000638:	08005ca0 	.word	0x08005ca0
 800063c:	08005480 	.word	0x08005480
 8000640:	080055f0 	.word	0x080055f0
 8000644:	66666667 	.word	0x66666667
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <play+0x3c8>)
 800064a:	623b      	str	r3, [r7, #32]
    }
    if (tree1_x <= 0) {
 800064c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000650:	2b00      	cmp	r3, #0
 8000652:	dc1f      	bgt.n	8000694 <play+0x360>
      tree1_x = tree1_interval + HAL_GetTick() / 10 % 20;
 8000654:	f001 f804 	bl	8001660 <HAL_GetTick>
 8000658:	4603      	mov	r3, r0
 800065a:	4a29      	ldr	r2, [pc, #164]	@ (8000700 <play+0x3cc>)
 800065c:	fba2 2303 	umull	r2, r3, r2, r3
 8000660:	08d9      	lsrs	r1, r3, #3
 8000662:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <play+0x3cc>)
 8000664:	fba3 2301 	umull	r2, r3, r3, r1
 8000668:	091a      	lsrs	r2, r3, #4
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	b292      	uxth	r2, r2
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4413      	add	r3, r2
 800067a:	b29b      	uxth	r3, r3
 800067c:	84bb      	strh	r3, [r7, #36]	@ 0x24
      tree1 = (HAL_GetTick() % 2) ? (Image *)&tree_smallImg : (Image *)&tree_bigImg;
 800067e:	f000 ffef 	bl	8001660 <HAL_GetTick>
 8000682:	4603      	mov	r3, r0
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <play+0x35c>
 800068c:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <play+0x3d0>)
 800068e:	e000      	b.n	8000692 <play+0x35e>
 8000690:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <play+0x3c8>)
 8000692:	61fb      	str	r3, [r7, #28]
    }
    static int16_t interval;
    interval = tree_x - tree1_x;
 8000694:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	b29b      	uxth	r3, r3
 800069c:	b21a      	sxth	r2, r3
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <play+0x3d4>)
 80006a0:	801a      	strh	r2, [r3, #0]
    if (interval > 0 && interval <= 46)
 80006a2:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <play+0x3d4>)
 80006a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dd0d      	ble.n	80006c8 <play+0x394>
 80006ac:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <play+0x3d4>)
 80006ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80006b4:	dc08      	bgt.n	80006c8 <play+0x394>
      tree_x += interval;
 80006b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <play+0x3d4>)
 80006ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	4413      	add	r3, r2
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80006c6:	e012      	b.n	80006ee <play+0x3ba>
    else if (interval < 0 && interval >= -46)
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <play+0x3d4>)
 80006ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	da0d      	bge.n	80006ee <play+0x3ba>
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <play+0x3d4>)
 80006d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d8:	f113 0f2e 	cmn.w	r3, #46	@ 0x2e
 80006dc:	db07      	blt.n	80006ee <play+0x3ba>
      tree1_x += interval;
 80006de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <play+0x3d4>)
 80006e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	4413      	add	r3, r2
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
    OLED_ShowFrame();
 80006ee:	f000 fa55 	bl	8000b9c <OLED_ShowFrame>
  for (;;) {
 80006f2:	e659      	b.n	80003a8 <play+0x74>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	@ 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	080055e8 	.word	0x080055e8
 8000700:	cccccccd 	.word	0xcccccccd
 8000704:	080055bc 	.word	0x080055bc
 8000708:	2000008c 	.word	0x2000008c

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <MX_DMA_Init+0x48>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a0f      	ldr	r2, [pc, #60]	@ (8000754 <MX_DMA_Init+0x48>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <MX_DMA_Init+0x48>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2010      	movs	r0, #16
 8000730:	f001 f89b 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000734:	2010      	movs	r0, #16
 8000736:	f001 f8b4 	bl	80018a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2011      	movs	r0, #17
 8000740:	f001 f893 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000744:	2011      	movs	r0, #17
 8000746:	f001 f8ac 	bl	80018a2 <HAL_NVIC_EnableIRQ>

}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_GPIO_Init+0x80>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a19      	ldr	r2, [pc, #100]	@ (80007d8 <MX_GPIO_Init+0x80>)
 8000772:	f043 0320 	orr.w	r3, r3, #32
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_GPIO_Init+0x80>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0320 	and.w	r3, r3, #32
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_GPIO_Init+0x80>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <MX_GPIO_Init+0x80>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_GPIO_Init+0x80>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_GPIO_Init+0x80>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a0d      	ldr	r2, [pc, #52]	@ (80007d8 <MX_GPIO_Init+0x80>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_GPIO_Init+0x80>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = JUMP_Pin|START_Pin;
 80007b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	4619      	mov	r1, r3
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_GPIO_Init+0x84>)
 80007ca:	f001 fa6b 	bl	8001ca4 <HAL_GPIO_Init>

}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010c00 	.word	0x40010c00

080007e0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_I2C1_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 850000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_I2C1_Init+0x50>)
 800081e:	f001 fbdd 	bl	8001fdc <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 f921 	bl	8000a6e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000090 	.word	0x20000090
 8000834:	40005400 	.word	0x40005400
 8000838:	000cf850 	.word	0x000cf850

0800083c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a43      	ldr	r2, [pc, #268]	@ (8000964 <HAL_I2C_MspInit+0x128>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d17f      	bne.n	800095c <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085c:	4b42      	ldr	r3, [pc, #264]	@ (8000968 <HAL_I2C_MspInit+0x12c>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a41      	ldr	r2, [pc, #260]	@ (8000968 <HAL_I2C_MspInit+0x12c>)
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b3f      	ldr	r3, [pc, #252]	@ (8000968 <HAL_I2C_MspInit+0x12c>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0308 	and.w	r3, r3, #8
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000874:	23c0      	movs	r3, #192	@ 0xc0
 8000876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000878:	2312      	movs	r3, #18
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	4839      	ldr	r0, [pc, #228]	@ (800096c <HAL_I2C_MspInit+0x130>)
 8000888:	f001 fa0c 	bl	8001ca4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800088c:	4b36      	ldr	r3, [pc, #216]	@ (8000968 <HAL_I2C_MspInit+0x12c>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	4a35      	ldr	r2, [pc, #212]	@ (8000968 <HAL_I2C_MspInit+0x12c>)
 8000892:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000896:	61d3      	str	r3, [r2, #28]
 8000898:	4b33      	ldr	r3, [pc, #204]	@ (8000968 <HAL_I2C_MspInit+0x12c>)
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80008a4:	4b32      	ldr	r3, [pc, #200]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008a6:	4a33      	ldr	r2, [pc, #204]	@ (8000974 <HAL_I2C_MspInit+0x138>)
 80008a8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80008c8:	4b29      	ldr	r3, [pc, #164]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80008d4:	4826      	ldr	r0, [pc, #152]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008d6:	f000 ffff 	bl	80018d8 <HAL_DMA_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80008e0:	f000 f8c5 	bl	8000a6e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80008ea:	4a21      	ldr	r2, [pc, #132]	@ (8000970 <HAL_I2C_MspInit+0x134>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80008f0:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 80008f2:	4a22      	ldr	r2, [pc, #136]	@ (800097c <HAL_I2C_MspInit+0x140>)
 80008f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008f6:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 80008f8:	2210      	movs	r2, #16
 80008fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000920:	4815      	ldr	r0, [pc, #84]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 8000922:	f000 ffd9 	bl	80018d8 <HAL_DMA_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 800092c:	f000 f89f 	bl	8000a6e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a11      	ldr	r2, [pc, #68]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 8000934:	635a      	str	r2, [r3, #52]	@ 0x34
 8000936:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <HAL_I2C_MspInit+0x13c>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	201f      	movs	r0, #31
 8000942:	f000 ff92 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000946:	201f      	movs	r0, #31
 8000948:	f000 ffab 	bl	80018a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2020      	movs	r0, #32
 8000952:	f000 ff8a 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000956:	2020      	movs	r0, #32
 8000958:	f000 ffa3 	bl	80018a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005400 	.word	0x40005400
 8000968:	40021000 	.word	0x40021000
 800096c:	40010c00 	.word	0x40010c00
 8000970:	200000e4 	.word	0x200000e4
 8000974:	40020080 	.word	0x40020080
 8000978:	20000128 	.word	0x20000128
 800097c:	4002006c 	.word	0x4002006c

08000980 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 fe14 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f82c 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff fee4 	bl	8000758 <MX_GPIO_Init>
  MX_DMA_Init();
 8000990:	f7ff febc 	bl	800070c <MX_DMA_Init>
  MX_I2C1_Init();
 8000994:	f7ff ff24 	bl	80007e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000998:	2064      	movs	r0, #100	@ 0x64
 800099a:	f000 fe6b 	bl	8001674 <HAL_Delay>
  OLED_Init();
 800099e:	f000 f895 	bl	8000acc <OLED_Init>
  OLED_NewFrame();
 80009a2:	f000 f8ef 	bl	8000b84 <OLED_NewFrame>
  OLED_ShowFrame();
 80009a6:	f000 f8f9 	bl	8000b9c <OLED_ShowFrame>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  introMessage();
 80009aa:	f7ff fbcf 	bl	800014c <introMessage>
  while (1) {
    if (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(JUMP_GPIO_Port, JUMP_Pin) == GPIO_PIN_RESET) {
 80009ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b2:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <main+0x60>)
 80009b4:	f001 fafa 	bl	8001fac <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d007      	beq.n	80009ce <main+0x4e>
 80009be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c2:	4807      	ldr	r0, [pc, #28]	@ (80009e0 <main+0x60>)
 80009c4:	f001 faf2 	bl	8001fac <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1ef      	bne.n	80009ae <main+0x2e>
      showLine();
 80009ce:	f7ff fbe5 	bl	800019c <showLine>
      play();
 80009d2:	f7ff fcaf 	bl	8000334 <play>
      HAL_Delay(300);
 80009d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009da:	f000 fe4b 	bl	8001674 <HAL_Delay>
    if (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(JUMP_GPIO_Port, JUMP_Pin) == GPIO_PIN_RESET) {
 80009de:	e7e6      	b.n	80009ae <main+0x2e>
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b090      	sub	sp, #64	@ 0x40
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0318 	add.w	r3, r7, #24
 80009ee:	2228      	movs	r2, #40	@ 0x28
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f004 f88c 	bl	8004b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a22:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 fc43 	bl	80042b8 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x58>
    Error_Handler();
 8000a38:	f000 f819 	bl	8000a6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2302      	movs	r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2102      	movs	r1, #2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 feb0 	bl	80047bc <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x82>
    Error_Handler();
 8000a62:	f000 f804 	bl	8000a6e <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3740      	adds	r7, #64	@ 0x40
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a72:	b672      	cpsid	i
}
 8000a74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000a76:	bf00      	nop
 8000a78:	e7fd      	b.n	8000a76 <Error_Handler+0x8>
	...

08000a7c <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	2178      	movs	r1, #120	@ 0x78
 8000a96:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <OLED_Send+0x28>)
 8000a98:	f001 fbf8 	bl	800228c <HAL_I2C_Master_Transmit>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000090 	.word	0x20000090

08000aa8 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <OLED_SendCmd+0x20>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <OLED_SendCmd+0x20>)
 8000abc:	f7ff ffde 	bl	8000a7c <OLED_Send>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000056c 	.word	0x2000056c

08000acc <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000ad0:	20ae      	movs	r0, #174	@ 0xae
 8000ad2:	f7ff ffe9 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8000ad6:	2020      	movs	r0, #32
 8000ad8:	f7ff ffe6 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000adc:	2010      	movs	r0, #16
 8000ade:	f7ff ffe3 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8000ae2:	20b0      	movs	r0, #176	@ 0xb0
 8000ae4:	f7ff ffe0 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8000ae8:	20c8      	movs	r0, #200	@ 0xc8
 8000aea:	f7ff ffdd 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff ffda 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000af4:	2010      	movs	r0, #16
 8000af6:	f7ff ffd7 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8000afa:	2040      	movs	r0, #64	@ 0x40
 8000afc:	f7ff ffd4 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8000b00:	2081      	movs	r0, #129	@ 0x81
 8000b02:	f7ff ffd1 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8000b06:	20df      	movs	r0, #223	@ 0xdf
 8000b08:	f7ff ffce 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8000b0c:	20a1      	movs	r0, #161	@ 0xa1
 8000b0e:	f7ff ffcb 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8000b12:	20a6      	movs	r0, #166	@ 0xa6
 8000b14:	f7ff ffc8 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8000b18:	20a8      	movs	r0, #168	@ 0xa8
 8000b1a:	f7ff ffc5 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8000b1e:	203f      	movs	r0, #63	@ 0x3f
 8000b20:	f7ff ffc2 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8000b24:	20a4      	movs	r0, #164	@ 0xa4
 8000b26:	f7ff ffbf 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8000b2a:	20d3      	movs	r0, #211	@ 0xd3
 8000b2c:	f7ff ffbc 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff ffb9 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8000b36:	20d5      	movs	r0, #213	@ 0xd5
 8000b38:	f7ff ffb6 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8000b3c:	20f0      	movs	r0, #240	@ 0xf0
 8000b3e:	f7ff ffb3 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8000b42:	20d9      	movs	r0, #217	@ 0xd9
 8000b44:	f7ff ffb0 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8000b48:	2022      	movs	r0, #34	@ 0x22
 8000b4a:	f7ff ffad 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8000b4e:	20da      	movs	r0, #218	@ 0xda
 8000b50:	f7ff ffaa 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000b54:	2012      	movs	r0, #18
 8000b56:	f7ff ffa7 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8000b5a:	20db      	movs	r0, #219	@ 0xdb
 8000b5c:	f7ff ffa4 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8000b60:	2020      	movs	r0, #32
 8000b62:	f7ff ffa1 	bl	8000aa8 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8000b66:	208d      	movs	r0, #141	@ 0x8d
 8000b68:	f7ff ff9e 	bl	8000aa8 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8000b6c:	2014      	movs	r0, #20
 8000b6e:	f7ff ff9b 	bl	8000aa8 <OLED_SendCmd>

  OLED_NewFrame();
 8000b72:	f000 f807 	bl	8000b84 <OLED_NewFrame>
  OLED_ShowFrame();
 8000b76:	f000 f811 	bl	8000b9c <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8000b7a:	20af      	movs	r0, #175	@ 0xaf
 8000b7c:	f7ff ff94 	bl	8000aa8 <OLED_SendCmd>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000b88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <OLED_NewFrame+0x14>)
 8000b90:	f003 ffbe 	bl	8004b10 <memset>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000016c 	.word	0x2000016c

08000b9c <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <OLED_ShowFrame+0x5c>)
 8000ba4:	2240      	movs	r2, #64	@ 0x40
 8000ba6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	e01b      	b.n	8000be6 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	3b50      	subs	r3, #80	@ 0x50
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff77 	bl	8000aa8 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ff74 	bl	8000aa8 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8000bc0:	2010      	movs	r0, #16
 8000bc2:	f7ff ff71 	bl	8000aa8 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <OLED_ShowFrame+0x60>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	01db      	lsls	r3, r3, #7
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c00 <OLED_ShowFrame+0x64>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f003 ffd0 	bl	8004b78 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8000bd8:	2181      	movs	r1, #129	@ 0x81
 8000bda:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <OLED_ShowFrame+0x5c>)
 8000bdc:	f7ff ff4e 	bl	8000a7c <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	3301      	adds	r3, #1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b07      	cmp	r3, #7
 8000bea:	d9e0      	bls.n	8000bae <OLED_ShowFrame+0x12>
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000570 	.word	0x20000570
 8000bfc:	20000571 	.word	0x20000571
 8000c00:	2000016c 	.word	0x2000016c

08000c04 <OLED_SetPixel>:
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	71bb      	strb	r3, [r7, #6]
 8000c12:	4613      	mov	r3, r2
 8000c14:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db43      	blt.n	8000ca6 <OLED_SetPixel+0xa2>
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c22:	d840      	bhi.n	8000ca6 <OLED_SetPixel+0xa2>
    return;
  if (!color)
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11d      	bne.n	8000c66 <OLED_SetPixel+0x62>
  {
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	b2d8      	uxtb	r0, r3
 8000c30:	4602      	mov	r2, r0
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	491e      	ldr	r1, [pc, #120]	@ (8000cb0 <OLED_SetPixel+0xac>)
 8000c36:	01d2      	lsls	r2, r2, #7
 8000c38:	440a      	add	r2, r1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25a      	sxtb	r2, r3
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b259      	sxtb	r1, r3
 8000c52:	4602      	mov	r2, r0
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	b2c8      	uxtb	r0, r1
 8000c58:	4915      	ldr	r1, [pc, #84]	@ (8000cb0 <OLED_SetPixel+0xac>)
 8000c5a:	01d2      	lsls	r2, r2, #7
 8000c5c:	440a      	add	r2, r1
 8000c5e:	4413      	add	r3, r2
 8000c60:	4602      	mov	r2, r0
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e020      	b.n	8000ca8 <OLED_SetPixel+0xa4>
  }
  else
  {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	08db      	lsrs	r3, r3, #3
 8000c6a:	b2d8      	uxtb	r0, r3
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	490f      	ldr	r1, [pc, #60]	@ (8000cb0 <OLED_SetPixel+0xac>)
 8000c72:	01d2      	lsls	r2, r2, #7
 8000c74:	440a      	add	r2, r1
 8000c76:	4413      	add	r3, r2
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b25a      	sxtb	r2, r3
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	2101      	movs	r1, #1
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	4013      	ands	r3, r2
 8000c90:	b259      	sxtb	r1, r3
 8000c92:	4602      	mov	r2, r0
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	b2c8      	uxtb	r0, r1
 8000c98:	4905      	ldr	r1, [pc, #20]	@ (8000cb0 <OLED_SetPixel+0xac>)
 8000c9a:	01d2      	lsls	r2, r2, #7
 8000c9c:	440a      	add	r2, r1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e000      	b.n	8000ca8 <OLED_SetPixel+0xa4>
    return;
 8000ca6:	bf00      	nop
  }
}
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	2000016c 	.word	0x2000016c

08000cb4 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8000cb4:	b490      	push	{r4, r7}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4604      	mov	r4, r0
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71bb      	strb	r3, [r7, #6]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	717b      	strb	r3, [r7, #5]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b07      	cmp	r3, #7
 8000cd6:	d860      	bhi.n	8000d9a <OLED_SetByte_Fine+0xe6>
 8000cd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db5c      	blt.n	8000d9a <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 8000ce0:	7d3b      	ldrb	r3, [r7, #20]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <OLED_SetByte_Fine+0x38>
    data = ~data;
 8000ce6:	797b      	ldrb	r3, [r7, #5]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8000cec:	7c3b      	ldrb	r3, [r7, #16]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	22ff      	movs	r2, #255	@ 0xff
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	b25a      	sxtb	r2, r3
 8000cf8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	793b      	ldrb	r3, [r7, #4]
 8000d02:	f1c3 0308 	rsb	r3, r3, #8
 8000d06:	21ff      	movs	r1, #255	@ 0xff
 8000d08:	fa41 f303 	asr.w	r3, r1, r3
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <OLED_SetByte_Fine+0xf0>)
 8000d16:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	4922      	ldr	r1, [pc, #136]	@ (8000da8 <OLED_SetByte_Fine+0xf4>)
 8000d1e:	01d2      	lsls	r2, r2, #7
 8000d20:	440a      	add	r2, r1
 8000d22:	4413      	add	r3, r2
 8000d24:	7818      	ldrb	r0, [r3, #0]
 8000d26:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <OLED_SetByte_Fine+0xf0>)
 8000d28:	7819      	ldrb	r1, [r3, #0]
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	4001      	ands	r1, r0
 8000d30:	b2c8      	uxtb	r0, r1
 8000d32:	491d      	ldr	r1, [pc, #116]	@ (8000da8 <OLED_SetByte_Fine+0xf4>)
 8000d34:	01d2      	lsls	r2, r2, #7
 8000d36:	440a      	add	r2, r1
 8000d38:	4413      	add	r3, r2
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8000d3e:	7c3b      	ldrb	r3, [r7, #16]
 8000d40:	3301      	adds	r3, #1
 8000d42:	22ff      	movs	r2, #255	@ 0xff
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d52:	4013      	ands	r3, r2
 8000d54:	b25a      	sxtb	r2, r3
 8000d56:	793b      	ldrb	r3, [r7, #4]
 8000d58:	f1c3 0308 	rsb	r3, r3, #8
 8000d5c:	21ff      	movs	r1, #255	@ 0xff
 8000d5e:	fa41 f303 	asr.w	r3, r1, r3
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <OLED_SetByte_Fine+0xf0>)
 8000d70:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <OLED_SetByte_Fine+0xf4>)
 8000d78:	01d2      	lsls	r2, r2, #7
 8000d7a:	440a      	add	r2, r1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	7818      	ldrb	r0, [r3, #0]
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <OLED_SetByte_Fine+0xf0>)
 8000d82:	7819      	ldrb	r1, [r3, #0]
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	4301      	orrs	r1, r0
 8000d8a:	b2c8      	uxtb	r0, r1
 8000d8c:	4906      	ldr	r1, [pc, #24]	@ (8000da8 <OLED_SetByte_Fine+0xf4>)
 8000d8e:	01d2      	lsls	r2, r2, #7
 8000d90:	440a      	add	r2, r1
 8000d92:	4413      	add	r3, r2
 8000d94:	4602      	mov	r2, r0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e000      	b.n	8000d9c <OLED_SetByte_Fine+0xe8>
    return;
 8000d9a:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc90      	pop	{r4, r7}
 8000da2:	4770      	bx	lr
 8000da4:	200005f1 	.word	0x200005f1
 8000da8:	2000016c 	.word	0x2000016c

08000dac <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8000dac:	b5b0      	push	{r4, r5, r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	4604      	mov	r4, r0
 8000db4:	4608      	mov	r0, r1
 8000db6:	4611      	mov	r1, r2
 8000db8:	461a      	mov	r2, r3
 8000dba:	4623      	mov	r3, r4
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71bb      	strb	r3, [r7, #6]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	717b      	strb	r3, [r7, #5]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8000dd8:	7bba      	ldrb	r2, [r7, #14]
 8000dda:	793b      	ldrb	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	2b08      	cmp	r3, #8
 8000de0:	dd29      	ble.n	8000e36 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000de2:	797a      	ldrb	r2, [r7, #5]
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	7bbc      	ldrb	r4, [r7, #14]
 8000dee:	79f9      	ldrb	r1, [r7, #7]
 8000df0:	7bf8      	ldrb	r0, [r7, #15]
 8000df2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	2307      	movs	r3, #7
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	f7ff ff59 	bl	8000cb4 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2d8      	uxtb	r0, r3
 8000e08:	797a      	ldrb	r2, [r7, #5]
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	f1c3 0308 	rsb	r3, r3, #8
 8000e10:	fa42 f303 	asr.w	r3, r2, r3
 8000e14:	b2dc      	uxtb	r4, r3
 8000e16:	793a      	ldrb	r2, [r7, #4]
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	3b09      	subs	r3, #9
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	79f9      	ldrb	r1, [r7, #7]
 8000e24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e28:	9201      	str	r2, [sp, #4]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4622      	mov	r2, r4
 8000e30:	f7ff ff40 	bl	8000cb4 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8000e34:	e015      	b.n	8000e62 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8000e36:	797a      	ldrb	r2, [r7, #5]
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	b2dc      	uxtb	r4, r3
 8000e40:	7bba      	ldrb	r2, [r7, #14]
 8000e42:	793b      	ldrb	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	7bbd      	ldrb	r5, [r7, #14]
 8000e4e:	79f9      	ldrb	r1, [r7, #7]
 8000e50:	7bf8      	ldrb	r0, [r7, #15]
 8000e52:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e56:	9201      	str	r2, [sp, #4]
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	462b      	mov	r3, r5
 8000e5c:	4622      	mov	r2, r4
 8000e5e:	f7ff ff29 	bl	8000cb4 <OLED_SetByte_Fine>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bdb0      	pop	{r4, r5, r7, pc}

08000e6a <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8000e6a:	b590      	push	{r4, r7, lr}
 8000e6c:	b087      	sub	sp, #28
 8000e6e:	af02      	add	r7, sp, #8
 8000e70:	4604      	mov	r4, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	461a      	mov	r2, r3
 8000e78:	4623      	mov	r3, r4
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71bb      	strb	r3, [r7, #6]
 8000e80:	460b      	mov	r3, r1
 8000e82:	717b      	strb	r3, [r7, #5]
 8000e84:	4613      	mov	r3, r2
 8000e86:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000e96:	797a      	ldrb	r2, [r7, #5]
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	7bbc      	ldrb	r4, [r7, #14]
 8000ea2:	79f9      	ldrb	r1, [r7, #7]
 8000ea4:	7bf8      	ldrb	r0, [r7, #15]
 8000ea6:	793b      	ldrb	r3, [r7, #4]
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	2307      	movs	r3, #7
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	4623      	mov	r3, r4
 8000eb0:	f7ff ff00 	bl	8000cb4 <OLED_SetByte_Fine>
  if (bit)
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d014      	beq.n	8000ee4 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2d8      	uxtb	r0, r3
 8000ec0:	797a      	ldrb	r2, [r7, #5]
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	f1c3 0308 	rsb	r3, r3, #8
 8000ec8:	fa42 f303 	asr.w	r3, r2, r3
 8000ecc:	b2dc      	uxtb	r4, r3
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	79f9      	ldrb	r1, [r7, #7]
 8000ed6:	793a      	ldrb	r2, [r7, #4]
 8000ed8:	9201      	str	r2, [sp, #4]
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	4622      	mov	r2, r4
 8000ee0:	f7ff fee8 	bl	8000cb4 <OLED_SetByte_Fine>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd90      	pop	{r4, r7, pc}

08000eec <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	603a      	str	r2, [r7, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	460b      	mov	r3, r1
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	4613      	mov	r3, r2
 8000f00:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8000f02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f06:	08db      	lsrs	r3, r3, #3
 8000f08:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8000f0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e025      	b.n	8000f66 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	e01b      	b.n	8000f58 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8000f20:	79fa      	ldrb	r2, [r7, #7]
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2d8      	uxtb	r0, r3
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	4413      	add	r3, r2
 8000f32:	b2dc      	uxtb	r4, r3
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	7979      	ldrb	r1, [r7, #5]
 8000f3a:	fb01 f303 	mul.w	r3, r1, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	f7ff ff8c 	bl	8000e6a <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	3301      	adds	r3, #1
 8000f56:	73bb      	strb	r3, [r7, #14]
 8000f58:	7bba      	ldrb	r2, [r7, #14]
 8000f5a:	7b3b      	ldrb	r3, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3df      	bcc.n	8000f20 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3301      	adds	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d3d5      	bcc.n	8000f1a <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d028      	beq.n	8000fc6 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8000f74:	797b      	ldrb	r3, [r7, #5]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	7b3a      	ldrb	r2, [r7, #12]
 8000f7a:	b292      	uxth	r2, r2
 8000f7c:	fb02 f303 	mul.w	r3, r2, r3
 8000f80:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	737b      	strb	r3, [r7, #13]
 8000f86:	e01a      	b.n	8000fbe <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	7b7b      	ldrb	r3, [r7, #13]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b2d8      	uxtb	r0, r3
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	4413      	add	r3, r2
 8000f9a:	b2d9      	uxtb	r1, r3
 8000f9c:	893a      	ldrh	r2, [r7, #8]
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	7afc      	ldrb	r4, [r7, #11]
 8000fac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	f7ff fefa 	bl	8000dac <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	737b      	strb	r3, [r7, #13]
 8000fbe:	7b7a      	ldrb	r2, [r7, #13]
 8000fc0:	797b      	ldrb	r3, [r7, #5]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3e0      	bcc.n	8000f88 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}
	...

08000fd0 <OLED_DrawLine>:
 * @param y2 终止点纵坐标
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制线段
 */
void OLED_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, OLED_ColorMode color)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4623      	mov	r3, r4
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71bb      	strb	r3, [r7, #6]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	717b      	strb	r3, [r7, #5]
 8000fea:	4613      	mov	r3, r2
 8000fec:	713b      	strb	r3, [r7, #4]
  static uint8_t temp = 0;
  if (x1 == x2)
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d11d      	bne.n	8001032 <OLED_DrawLine+0x62>
  {
    if (y1 > y2)
 8000ff6:	79ba      	ldrb	r2, [r7, #6]
 8000ff8:	793b      	ldrb	r3, [r7, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d907      	bls.n	800100e <OLED_DrawLine+0x3e>
    {
      temp = y1;
 8000ffe:	4a69      	ldr	r2, [pc, #420]	@ (80011a4 <OLED_DrawLine+0x1d4>)
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	7013      	strb	r3, [r2, #0]
      y1 = y2;
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	71bb      	strb	r3, [r7, #6]
      y2 = temp;
 8001008:	4b66      	ldr	r3, [pc, #408]	@ (80011a4 <OLED_DrawLine+0x1d4>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	713b      	strb	r3, [r7, #4]
    }
    for (uint8_t y = y1; y <= y2; y++)
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	75fb      	strb	r3, [r7, #23]
 8001012:	e009      	b.n	8001028 <OLED_DrawLine+0x58>
    {
      OLED_SetPixel(x1, y, color);
 8001014:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001018:	7df9      	ldrb	r1, [r7, #23]
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fdf1 	bl	8000c04 <OLED_SetPixel>
    for (uint8_t y = y1; y <= y2; y++)
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	3301      	adds	r3, #1
 8001026:	75fb      	strb	r3, [r7, #23]
 8001028:	7dfa      	ldrb	r2, [r7, #23]
 800102a:	793b      	ldrb	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d9f1      	bls.n	8001014 <OLED_DrawLine+0x44>
          eps -= dy;
        }
      }
    }
  }
}
 8001030:	e0b4      	b.n	800119c <OLED_DrawLine+0x1cc>
  else if (y1 == y2)
 8001032:	79ba      	ldrb	r2, [r7, #6]
 8001034:	793b      	ldrb	r3, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d11d      	bne.n	8001076 <OLED_DrawLine+0xa6>
    if (x1 > x2)
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	797b      	ldrb	r3, [r7, #5]
 800103e:	429a      	cmp	r2, r3
 8001040:	d907      	bls.n	8001052 <OLED_DrawLine+0x82>
      temp = x1;
 8001042:	4a58      	ldr	r2, [pc, #352]	@ (80011a4 <OLED_DrawLine+0x1d4>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	7013      	strb	r3, [r2, #0]
      x1 = x2;
 8001048:	797b      	ldrb	r3, [r7, #5]
 800104a:	71fb      	strb	r3, [r7, #7]
      x2 = temp;
 800104c:	4b55      	ldr	r3, [pc, #340]	@ (80011a4 <OLED_DrawLine+0x1d4>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	717b      	strb	r3, [r7, #5]
    for (uint8_t x = x1; x <= x2; x++)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	75bb      	strb	r3, [r7, #22]
 8001056:	e009      	b.n	800106c <OLED_DrawLine+0x9c>
      OLED_SetPixel(x, y1, color);
 8001058:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800105c:	79b9      	ldrb	r1, [r7, #6]
 800105e:	7dbb      	ldrb	r3, [r7, #22]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fdcf 	bl	8000c04 <OLED_SetPixel>
    for (uint8_t x = x1; x <= x2; x++)
 8001066:	7dbb      	ldrb	r3, [r7, #22]
 8001068:	3301      	adds	r3, #1
 800106a:	75bb      	strb	r3, [r7, #22]
 800106c:	7dba      	ldrb	r2, [r7, #22]
 800106e:	797b      	ldrb	r3, [r7, #5]
 8001070:	429a      	cmp	r2, r3
 8001072:	d9f1      	bls.n	8001058 <OLED_DrawLine+0x88>
}
 8001074:	e092      	b.n	800119c <OLED_DrawLine+0x1cc>
    int16_t dx = x2 - x1;
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	b29a      	uxth	r2, r3
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b29b      	uxth	r3, r3
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	81fb      	strh	r3, [r7, #14]
    int16_t dy = y2 - y1;
 8001084:	793b      	ldrb	r3, [r7, #4]
 8001086:	b29a      	uxth	r2, r3
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	b29b      	uxth	r3, r3
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	b29b      	uxth	r3, r3
 8001090:	81bb      	strh	r3, [r7, #12]
    int16_t ux = ((dx > 0) << 1) - 1;
 8001092:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001096:	2b00      	cmp	r3, #0
 8001098:	dd01      	ble.n	800109e <OLED_DrawLine+0xce>
 800109a:	2301      	movs	r3, #1
 800109c:	e001      	b.n	80010a2 <OLED_DrawLine+0xd2>
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	817b      	strh	r3, [r7, #10]
    int16_t uy = ((dy > 0) << 1) - 1;
 80010a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	dd01      	ble.n	80010b0 <OLED_DrawLine+0xe0>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e001      	b.n	80010b4 <OLED_DrawLine+0xe4>
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	813b      	strh	r3, [r7, #8]
    int16_t x = x1, y = y1, eps = 0;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	82bb      	strh	r3, [r7, #20]
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	827b      	strh	r3, [r7, #18]
 80010be:	2300      	movs	r3, #0
 80010c0:	823b      	strh	r3, [r7, #16]
    dx = abs(dx);
 80010c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bfb8      	it	lt
 80010ca:	425b      	neglt	r3, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	81fb      	strh	r3, [r7, #14]
    dy = abs(dy);
 80010d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bfb8      	it	lt
 80010d8:	425b      	neglt	r3, r3
 80010da:	b29b      	uxth	r3, r3
 80010dc:	81bb      	strh	r3, [r7, #12]
    if (dx > dy)
 80010de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dd2c      	ble.n	8001144 <OLED_DrawLine+0x174>
      for (x = x1; x != x2; x += ux)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	82bb      	strh	r3, [r7, #20]
 80010ee:	e023      	b.n	8001138 <OLED_DrawLine+0x168>
        OLED_SetPixel(x, y, color);
 80010f0:	8abb      	ldrh	r3, [r7, #20]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	8a7a      	ldrh	r2, [r7, #18]
 80010f6:	b2d1      	uxtb	r1, r2
 80010f8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fd81 	bl	8000c04 <OLED_SetPixel>
        eps += dy;
 8001102:	8a3a      	ldrh	r2, [r7, #16]
 8001104:	89bb      	ldrh	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	b29b      	uxth	r3, r3
 800110a:	823b      	strh	r3, [r7, #16]
        if ((eps << 1) >= dx)
 800110c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001110:	005a      	lsls	r2, r3, #1
 8001112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001116:	429a      	cmp	r2, r3
 8001118:	db09      	blt.n	800112e <OLED_DrawLine+0x15e>
          y += uy;
 800111a:	8a7a      	ldrh	r2, [r7, #18]
 800111c:	893b      	ldrh	r3, [r7, #8]
 800111e:	4413      	add	r3, r2
 8001120:	b29b      	uxth	r3, r3
 8001122:	827b      	strh	r3, [r7, #18]
          eps -= dx;
 8001124:	8a3a      	ldrh	r2, [r7, #16]
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b29b      	uxth	r3, r3
 800112c:	823b      	strh	r3, [r7, #16]
      for (x = x1; x != x2; x += ux)
 800112e:	8aba      	ldrh	r2, [r7, #20]
 8001130:	897b      	ldrh	r3, [r7, #10]
 8001132:	4413      	add	r3, r2
 8001134:	b29b      	uxth	r3, r3
 8001136:	82bb      	strh	r3, [r7, #20]
 8001138:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800113c:	797b      	ldrb	r3, [r7, #5]
 800113e:	429a      	cmp	r2, r3
 8001140:	d1d6      	bne.n	80010f0 <OLED_DrawLine+0x120>
}
 8001142:	e02b      	b.n	800119c <OLED_DrawLine+0x1cc>
      for (y = y1; y != y2; y += uy)
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	827b      	strh	r3, [r7, #18]
 8001148:	e023      	b.n	8001192 <OLED_DrawLine+0x1c2>
        OLED_SetPixel(x, y, color);
 800114a:	8abb      	ldrh	r3, [r7, #20]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	8a7a      	ldrh	r2, [r7, #18]
 8001150:	b2d1      	uxtb	r1, r2
 8001152:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fd54 	bl	8000c04 <OLED_SetPixel>
        eps += dx;
 800115c:	8a3a      	ldrh	r2, [r7, #16]
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
 8001164:	823b      	strh	r3, [r7, #16]
        if ((eps << 1) >= dy)
 8001166:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800116a:	005a      	lsls	r2, r3, #1
 800116c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	db09      	blt.n	8001188 <OLED_DrawLine+0x1b8>
          x += ux;
 8001174:	8aba      	ldrh	r2, [r7, #20]
 8001176:	897b      	ldrh	r3, [r7, #10]
 8001178:	4413      	add	r3, r2
 800117a:	b29b      	uxth	r3, r3
 800117c:	82bb      	strh	r3, [r7, #20]
          eps -= dy;
 800117e:	8a3a      	ldrh	r2, [r7, #16]
 8001180:	89bb      	ldrh	r3, [r7, #12]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	823b      	strh	r3, [r7, #16]
      for (y = y1; y != y2; y += uy)
 8001188:	8a7a      	ldrh	r2, [r7, #18]
 800118a:	893b      	ldrh	r3, [r7, #8]
 800118c:	4413      	add	r3, r2
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
 8001192:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001196:	793b      	ldrb	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	d1d6      	bne.n	800114a <OLED_DrawLine+0x17a>
}
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	200005f2 	.word	0x200005f2

080011a8 <OLED_DrawImage>:
 * @param y 起始点纵坐标
 * @param img 图片
 * @param color 颜色
 */
void OLED_DrawImage(uint8_t x, uint8_t y, const Image *img, OLED_ColorMode color)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	603a      	str	r2, [r7, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	460b      	mov	r3, r1
 80011b8:	71bb      	strb	r3, [r7, #6]
 80011ba:	4613      	mov	r3, r2
 80011bc:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, img->data, img->w, img->h, color);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685c      	ldr	r4, [r3, #4]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	781d      	ldrb	r5, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	79b9      	ldrb	r1, [r7, #6]
 80011cc:	79f8      	ldrb	r0, [r7, #7]
 80011ce:	797a      	ldrb	r2, [r7, #5]
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	462b      	mov	r3, r5
 80011d6:	4622      	mov	r2, r4
 80011d8:	f7ff fe88 	bl	8000eec <OLED_SetBlock>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bdb0      	pop	{r4, r5, r7, pc}

080011e4 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	460b      	mov	r3, r1
 80011f2:	71bb      	strb	r3, [r7, #6]
 80011f4:	4613      	mov	r3, r2
 80011f6:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	797b      	ldrb	r3, [r7, #5]
 80011fe:	f1a3 0120 	sub.w	r1, r3, #32
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	3307      	adds	r3, #7
 8001208:	2b00      	cmp	r3, #0
 800120a:	da00      	bge.n	800120e <OLED_PrintASCIIChar+0x2a>
 800120c:	3307      	adds	r3, #7
 800120e:	10db      	asrs	r3, r3, #3
 8001210:	4618      	mov	r0, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	fb00 f303 	mul.w	r3, r0, r3
 800121a:	fb01 f303 	mul.w	r3, r1, r3
 800121e:	18d4      	adds	r4, r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	785d      	ldrb	r5, [r3, #1]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	79b9      	ldrb	r1, [r7, #6]
 800122a:	79f8      	ldrb	r0, [r7, #7]
 800122c:	7e3a      	ldrb	r2, [r7, #24]
 800122e:	9201      	str	r2, [sp, #4]
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	462b      	mov	r3, r5
 8001234:	4622      	mov	r2, r4
 8001236:	f7ff fe59 	bl	8000eec <OLED_SetBlock>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}

08001242 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	db01      	blt.n	8001258 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8001254:	2301      	movs	r3, #1
 8001256:	e018      	b.n	800128a <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001260:	2bc0      	cmp	r3, #192	@ 0xc0
 8001262:	d101      	bne.n	8001268 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8001264:	2302      	movs	r3, #2
 8001266:	e010      	b.n	800128a <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001270:	2be0      	cmp	r3, #224	@ 0xe0
 8001272:	d101      	bne.n	8001278 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8001274:	2303      	movs	r3, #3
 8001276:	e008      	b.n	800128a <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8001280:	2bf0      	cmp	r3, #240	@ 0xf0
 8001282:	d101      	bne.n	8001288 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8001284:	2304      	movs	r3, #4
 8001286:	e000      	b.n	800128a <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af02      	add	r7, sp, #8
 800129a:	60ba      	str	r2, [r7, #8]
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	460b      	mov	r3, r1
 80012a4:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 80012a6:	2300      	movs	r3, #0
 80012a8:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3307      	adds	r3, #7
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da00      	bge.n	80012b6 <OLED_PrintString+0x22>
 80012b4:	3307      	adds	r3, #7
 80012b6:	10db      	asrs	r3, r3, #3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	7852      	ldrb	r2, [r2, #1]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	3304      	adds	r3, #4
 80012c6:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 80012c8:	e07d      	b.n	80013c6 <OLED_PrintString+0x132>
  {
    found = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 80012ce:	8bfb      	ldrh	r3, [r7, #30]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	4413      	add	r3, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ffb4 	bl	8001242 <_OLED_GetUTF8Len>
 80012da:	4603      	mov	r3, r0
 80012dc:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 80012de:	7ebb      	ldrb	r3, [r7, #26]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d078      	beq.n	80013d6 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	773b      	strb	r3, [r7, #28]
 80012e8:	e032      	b.n	8001350 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	7f3a      	ldrb	r2, [r7, #28]
 80012f0:	7ef9      	ldrb	r1, [r7, #27]
 80012f2:	fb01 f202 	mul.w	r2, r1, r2
 80012f6:	4413      	add	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 80012fa:	8bfb      	ldrh	r3, [r7, #30]
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	4413      	add	r3, r2
 8001300:	7eba      	ldrb	r2, [r7, #26]
 8001302:	6979      	ldr	r1, [r7, #20]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fbf3 	bl	8004af0 <memcmp>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d11c      	bne.n	800134a <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	1d1c      	adds	r4, r3, #4
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	785d      	ldrb	r5, [r3, #1]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	7bb9      	ldrb	r1, [r7, #14]
 800131e:	7bf8      	ldrb	r0, [r7, #15]
 8001320:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	462b      	mov	r3, r5
 800132a:	4622      	mov	r2, r4
 800132c:	f7ff fdde 	bl	8000eec <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	785a      	ldrb	r2, [r3, #1]
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4413      	add	r3, r2
 8001338:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800133a:	7ebb      	ldrb	r3, [r7, #26]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8bfb      	ldrh	r3, [r7, #30]
 8001340:	4413      	add	r3, r2
 8001342:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8001344:	2301      	movs	r3, #1
 8001346:	777b      	strb	r3, [r7, #29]
        break;
 8001348:	e007      	b.n	800135a <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 800134a:	7f3b      	ldrb	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	773b      	strb	r3, [r7, #28]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7a1b      	ldrb	r3, [r3, #8]
 8001354:	7f3a      	ldrb	r2, [r7, #28]
 8001356:	429a      	cmp	r2, r3
 8001358:	d3c7      	bcc.n	80012ea <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 800135a:	7f7b      	ldrb	r3, [r7, #29]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d132      	bne.n	80013c6 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8001360:	7ebb      	ldrb	r3, [r7, #26]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d119      	bne.n	800139a <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8001366:	8bfb      	ldrh	r3, [r7, #30]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	4413      	add	r3, r2
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68dc      	ldr	r4, [r3, #12]
 8001372:	7bb9      	ldrb	r1, [r7, #14]
 8001374:	7bf8      	ldrb	r0, [r7, #15]
 8001376:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4623      	mov	r3, r4
 800137e:	f7ff ff31 	bl	80011e4 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	785a      	ldrb	r2, [r3, #1]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	4413      	add	r3, r2
 800138c:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800138e:	7ebb      	ldrb	r3, [r7, #26]
 8001390:	b29a      	uxth	r2, r3
 8001392:	8bfb      	ldrh	r3, [r7, #30]
 8001394:	4413      	add	r3, r2
 8001396:	83fb      	strh	r3, [r7, #30]
 8001398:	e015      	b.n	80013c6 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	7bb9      	ldrb	r1, [r7, #14]
 80013a0:	7bf8      	ldrb	r0, [r7, #15]
 80013a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4613      	mov	r3, r2
 80013aa:	2220      	movs	r2, #32
 80013ac:	f7ff ff1a 	bl	80011e4 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	785a      	ldrb	r2, [r3, #1]
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	4413      	add	r3, r2
 80013ba:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80013bc:	7ebb      	ldrb	r3, [r7, #26]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	8bfb      	ldrh	r3, [r7, #30]
 80013c2:	4413      	add	r3, r2
 80013c4:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 80013c6:	8bfb      	ldrh	r3, [r7, #30]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f47f af7b 	bne.w	80012ca <OLED_PrintString+0x36>
      }
    }
  }
}
 80013d4:	e000      	b.n	80013d8 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 80013d6:	bf00      	nop
}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdb0      	pop	{r4, r5, r7, pc}

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_MspInit+0x5c>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	4a14      	ldr	r2, [pc, #80]	@ (800143c <HAL_MspInit+0x5c>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6193      	str	r3, [r2, #24]
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_MspInit+0x5c>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_MspInit+0x5c>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a0e      	ldr	r2, [pc, #56]	@ (800143c <HAL_MspInit+0x5c>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <HAL_MspInit+0x5c>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_MspInit+0x60>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <HAL_MspInit+0x60>)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 f8d2 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <DMA1_Channel6_IRQHandler+0x10>)
 80014a2:	f000 faeb 	bl	8001a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000128 	.word	0x20000128

080014b0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <DMA1_Channel7_IRQHandler+0x10>)
 80014b6:	f000 fae1 	bl	8001a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200000e4 	.word	0x200000e4

080014c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <I2C1_EV_IRQHandler+0x10>)
 80014ca:	f000 ffdd 	bl	8002488 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000090 	.word	0x20000090

080014d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <I2C1_ER_IRQHandler+0x10>)
 80014de:	f001 f926 	bl	800272e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000090 	.word	0x20000090

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f003 fb00 	bl	8004b20 <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20005000 	.word	0x20005000
 800154c:	00000400 	.word	0x00000400
 8001550:	200005f4 	.word	0x200005f4
 8001554:	20000748 	.word	0x20000748

08001558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001564:	f7ff fff8 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001568:	480b      	ldr	r0, [pc, #44]	@ (8001598 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800156a:	490c      	ldr	r1, [pc, #48]	@ (800159c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800156c:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a09      	ldr	r2, [pc, #36]	@ (80015a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001580:	4c09      	ldr	r4, [pc, #36]	@ (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f003 facd 	bl	8004b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001592:	f7ff f9f5 	bl	8000980 <main>
  bx lr
 8001596:	4770      	bx	lr
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015a0:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 80015a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015a8:	20000744 	.word	0x20000744

080015ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_2_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <HAL_Init+0x28>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <HAL_Init+0x28>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f947 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff ff08 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f95f 	bl	80018be <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 f927 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000000 	.word	0x20000000
 8001634:	20000008 	.word	0x20000008
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <HAL_IncTick+0x1c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b05      	ldr	r3, [pc, #20]	@ (800165c <HAL_IncTick+0x20>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a03      	ldr	r2, [pc, #12]	@ (800165c <HAL_IncTick+0x20>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	20000008 	.word	0x20000008
 800165c:	200005f8 	.word	0x200005f8

08001660 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b02      	ldr	r3, [pc, #8]	@ (8001670 <HAL_GetTick+0x10>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	200005f8 	.word	0x200005f8

08001674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff fff0 	bl	8001660 <HAL_GetTick>
 8001680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168c:	d005      	beq.n	800169a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_Delay+0x44>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169a:	bf00      	nop
 800169c:	f7ff ffe0 	bl	8001660 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8f7      	bhi.n	800169c <HAL_Delay+0x28>
  {
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000008 	.word	0x20000008

080016bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ee:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	60d3      	str	r3, [r2, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	2b00      	cmp	r3, #0
 8001730:	db0b      	blt.n	800174a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	f003 021f 	and.w	r2, r3, #31
 8001738:	4906      	ldr	r1, [pc, #24]	@ (8001754 <__NVIC_EnableIRQ+0x34>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	2001      	movs	r0, #1
 8001742:	fa00 f202 	lsl.w	r2, r0, r2
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	@ (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff90 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff2d 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff42 	bl	8001704 <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff90 	bl	80017ac <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5f 	bl	8001758 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff35 	bl	8001720 <__NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffa2 	bl	8001810 <SysTick_Config>
 80018cc:	4603      	mov	r3, r0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e043      	b.n	8001976 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <HAL_DMA_Init+0xa8>)
 80018f6:	4413      	add	r3, r2
 80018f8:	4a22      	ldr	r2, [pc, #136]	@ (8001984 <HAL_DMA_Init+0xac>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	009a      	lsls	r2, r3, #2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a1f      	ldr	r2, [pc, #124]	@ (8001988 <HAL_DMA_Init+0xb0>)
 800190a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001922:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001926:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	bffdfff8 	.word	0xbffdfff8
 8001984:	cccccccd 	.word	0xcccccccd
 8001988:	40020000 	.word	0x40020000

0800198c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d005      	beq.n	80019b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2204      	movs	r2, #4
 80019a8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e051      	b.n	8001a54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 020e 	bic.w	r2, r2, #14
 80019be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a22      	ldr	r2, [pc, #136]	@ (8001a60 <HAL_DMA_Abort_IT+0xd4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d029      	beq.n	8001a2e <HAL_DMA_Abort_IT+0xa2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a21      	ldr	r2, [pc, #132]	@ (8001a64 <HAL_DMA_Abort_IT+0xd8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d022      	beq.n	8001a2a <HAL_DMA_Abort_IT+0x9e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a68 <HAL_DMA_Abort_IT+0xdc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01a      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x98>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a6c <HAL_DMA_Abort_IT+0xe0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d012      	beq.n	8001a1e <HAL_DMA_Abort_IT+0x92>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <HAL_DMA_Abort_IT+0xe4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00a      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x8c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <HAL_DMA_Abort_IT+0xe8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d102      	bne.n	8001a12 <HAL_DMA_Abort_IT+0x86>
 8001a0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a10:	e00e      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a16:	e00b      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a1c:	e008      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a22:	e005      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a28:	e002      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a2a:	2310      	movs	r3, #16
 8001a2c:	e000      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4a11      	ldr	r2, [pc, #68]	@ (8001a78 <HAL_DMA_Abort_IT+0xec>)
 8001a32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
    } 
  }
  return status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40020008 	.word	0x40020008
 8001a64:	4002001c 	.word	0x4002001c
 8001a68:	40020030 	.word	0x40020030
 8001a6c:	40020044 	.word	0x40020044
 8001a70:	40020058 	.word	0x40020058
 8001a74:	4002006c 	.word	0x4002006c
 8001a78:	40020000 	.word	0x40020000

08001a7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	2204      	movs	r2, #4
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d04f      	beq.n	8001b44 <HAL_DMA_IRQHandler+0xc8>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d04a      	beq.n	8001b44 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d107      	bne.n	8001acc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0204 	bic.w	r2, r2, #4
 8001aca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a66      	ldr	r2, [pc, #408]	@ (8001c6c <HAL_DMA_IRQHandler+0x1f0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d029      	beq.n	8001b2a <HAL_DMA_IRQHandler+0xae>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a65      	ldr	r2, [pc, #404]	@ (8001c70 <HAL_DMA_IRQHandler+0x1f4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d022      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xaa>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a63      	ldr	r2, [pc, #396]	@ (8001c74 <HAL_DMA_IRQHandler+0x1f8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xa4>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a62      	ldr	r2, [pc, #392]	@ (8001c78 <HAL_DMA_IRQHandler+0x1fc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d012      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x9e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a60      	ldr	r2, [pc, #384]	@ (8001c7c <HAL_DMA_IRQHandler+0x200>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00a      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x98>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5f      	ldr	r2, [pc, #380]	@ (8001c80 <HAL_DMA_IRQHandler+0x204>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d102      	bne.n	8001b0e <HAL_DMA_IRQHandler+0x92>
 8001b08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b0c:	e00e      	b.n	8001b2c <HAL_DMA_IRQHandler+0xb0>
 8001b0e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b12:	e00b      	b.n	8001b2c <HAL_DMA_IRQHandler+0xb0>
 8001b14:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b18:	e008      	b.n	8001b2c <HAL_DMA_IRQHandler+0xb0>
 8001b1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b1e:	e005      	b.n	8001b2c <HAL_DMA_IRQHandler+0xb0>
 8001b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b24:	e002      	b.n	8001b2c <HAL_DMA_IRQHandler+0xb0>
 8001b26:	2340      	movs	r3, #64	@ 0x40
 8001b28:	e000      	b.n	8001b2c <HAL_DMA_IRQHandler+0xb0>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	4a55      	ldr	r2, [pc, #340]	@ (8001c84 <HAL_DMA_IRQHandler+0x208>)
 8001b2e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8094 	beq.w	8001c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b42:	e08e      	b.n	8001c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	2202      	movs	r2, #2
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d056      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x186>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d051      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10b      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020a 	bic.w	r2, r2, #10
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a38      	ldr	r2, [pc, #224]	@ (8001c6c <HAL_DMA_IRQHandler+0x1f0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d029      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x166>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a37      	ldr	r2, [pc, #220]	@ (8001c70 <HAL_DMA_IRQHandler+0x1f4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d022      	beq.n	8001bde <HAL_DMA_IRQHandler+0x162>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a35      	ldr	r2, [pc, #212]	@ (8001c74 <HAL_DMA_IRQHandler+0x1f8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01a      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x15c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a34      	ldr	r2, [pc, #208]	@ (8001c78 <HAL_DMA_IRQHandler+0x1fc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d012      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x156>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a32      	ldr	r2, [pc, #200]	@ (8001c7c <HAL_DMA_IRQHandler+0x200>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00a      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x150>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a31      	ldr	r2, [pc, #196]	@ (8001c80 <HAL_DMA_IRQHandler+0x204>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d102      	bne.n	8001bc6 <HAL_DMA_IRQHandler+0x14a>
 8001bc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bc4:	e00e      	b.n	8001be4 <HAL_DMA_IRQHandler+0x168>
 8001bc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bca:	e00b      	b.n	8001be4 <HAL_DMA_IRQHandler+0x168>
 8001bcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bd0:	e008      	b.n	8001be4 <HAL_DMA_IRQHandler+0x168>
 8001bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bd6:	e005      	b.n	8001be4 <HAL_DMA_IRQHandler+0x168>
 8001bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bdc:	e002      	b.n	8001be4 <HAL_DMA_IRQHandler+0x168>
 8001bde:	2320      	movs	r3, #32
 8001be0:	e000      	b.n	8001be4 <HAL_DMA_IRQHandler+0x168>
 8001be2:	2302      	movs	r3, #2
 8001be4:	4a27      	ldr	r2, [pc, #156]	@ (8001c84 <HAL_DMA_IRQHandler+0x208>)
 8001be6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d034      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c00:	e02f      	b.n	8001c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	2208      	movs	r2, #8
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d028      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x1e8>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 020e 	bic.w	r2, r2, #14
 8001c2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4798      	blx	r3
    }
  }
  return;
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
}
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40020008 	.word	0x40020008
 8001c70:	4002001c 	.word	0x4002001c
 8001c74:	40020030 	.word	0x40020030
 8001c78:	40020044 	.word	0x40020044
 8001c7c:	40020058 	.word	0x40020058
 8001c80:	4002006c 	.word	0x4002006c
 8001c84:	40020000 	.word	0x40020000

08001c88 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c96:	b2db      	uxtb	r3, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b08b      	sub	sp, #44	@ 0x2c
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	e169      	b.n	8001f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8158 	bne.w	8001f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4a9a      	ldr	r2, [pc, #616]	@ (8001f44 <HAL_GPIO_Init+0x2a0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d05e      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001ce0:	4a98      	ldr	r2, [pc, #608]	@ (8001f44 <HAL_GPIO_Init+0x2a0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d875      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001ce6:	4a98      	ldr	r2, [pc, #608]	@ (8001f48 <HAL_GPIO_Init+0x2a4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d058      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001cec:	4a96      	ldr	r2, [pc, #600]	@ (8001f48 <HAL_GPIO_Init+0x2a4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d86f      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001cf2:	4a96      	ldr	r2, [pc, #600]	@ (8001f4c <HAL_GPIO_Init+0x2a8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d052      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001cf8:	4a94      	ldr	r2, [pc, #592]	@ (8001f4c <HAL_GPIO_Init+0x2a8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d869      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001cfe:	4a94      	ldr	r2, [pc, #592]	@ (8001f50 <HAL_GPIO_Init+0x2ac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d04c      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001d04:	4a92      	ldr	r2, [pc, #584]	@ (8001f50 <HAL_GPIO_Init+0x2ac>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d863      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d0a:	4a92      	ldr	r2, [pc, #584]	@ (8001f54 <HAL_GPIO_Init+0x2b0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d046      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001d10:	4a90      	ldr	r2, [pc, #576]	@ (8001f54 <HAL_GPIO_Init+0x2b0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d85d      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d82a      	bhi.n	8001d70 <HAL_GPIO_Init+0xcc>
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d859      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d24 <HAL_GPIO_Init+0x80>)
 8001d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001d8b 	.word	0x08001d8b
 8001d30:	08001dcd 	.word	0x08001dcd
 8001d34:	08001dd3 	.word	0x08001dd3
 8001d38:	08001dd3 	.word	0x08001dd3
 8001d3c:	08001dd3 	.word	0x08001dd3
 8001d40:	08001dd3 	.word	0x08001dd3
 8001d44:	08001dd3 	.word	0x08001dd3
 8001d48:	08001dd3 	.word	0x08001dd3
 8001d4c:	08001dd3 	.word	0x08001dd3
 8001d50:	08001dd3 	.word	0x08001dd3
 8001d54:	08001dd3 	.word	0x08001dd3
 8001d58:	08001dd3 	.word	0x08001dd3
 8001d5c:	08001dd3 	.word	0x08001dd3
 8001d60:	08001dd3 	.word	0x08001dd3
 8001d64:	08001dd3 	.word	0x08001dd3
 8001d68:	08001d81 	.word	0x08001d81
 8001d6c:	08001d95 	.word	0x08001d95
 8001d70:	4a79      	ldr	r2, [pc, #484]	@ (8001f58 <HAL_GPIO_Init+0x2b4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d76:	e02c      	b.n	8001dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e029      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	3304      	adds	r3, #4
 8001d86:	623b      	str	r3, [r7, #32]
          break;
 8001d88:	e024      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	623b      	str	r3, [r7, #32]
          break;
 8001d92:	e01f      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	330c      	adds	r3, #12
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e01a      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da6:	2304      	movs	r3, #4
 8001da8:	623b      	str	r3, [r7, #32]
          break;
 8001daa:	e013      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db4:	2308      	movs	r3, #8
 8001db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	611a      	str	r2, [r3, #16]
          break;
 8001dbe:	e009      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	615a      	str	r2, [r3, #20]
          break;
 8001dca:	e003      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          break;
 8001dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2bff      	cmp	r3, #255	@ 0xff
 8001dd8:	d801      	bhi.n	8001dde <HAL_GPIO_Init+0x13a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_Init+0x13e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2bff      	cmp	r3, #255	@ 0xff
 8001de8:	d802      	bhi.n	8001df0 <HAL_GPIO_Init+0x14c>
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x152>
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	3b08      	subs	r3, #8
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	210f      	movs	r1, #15
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	401a      	ands	r2, r3
 8001e08:	6a39      	ldr	r1, [r7, #32]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	431a      	orrs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80b1 	beq.w	8001f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e24:	4b4d      	ldr	r3, [pc, #308]	@ (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a4c      	ldr	r2, [pc, #304]	@ (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b4a      	ldr	r3, [pc, #296]	@ (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e3c:	4a48      	ldr	r2, [pc, #288]	@ (8001f60 <HAL_GPIO_Init+0x2bc>)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a40      	ldr	r2, [pc, #256]	@ (8001f64 <HAL_GPIO_Init+0x2c0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_GPIO_Init+0x1ec>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f68 <HAL_GPIO_Init+0x2c4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1e8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3e      	ldr	r2, [pc, #248]	@ (8001f6c <HAL_GPIO_Init+0x2c8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1e4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f70 <HAL_GPIO_Init+0x2cc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1e0>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e006      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e004      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e90:	2300      	movs	r3, #0
 8001e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e94:	f002 0203 	and.w	r2, r2, #3
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ea2:	492f      	ldr	r1, [pc, #188]	@ (8001f60 <HAL_GPIO_Init+0x2bc>)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	492c      	ldr	r1, [pc, #176]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eca:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4928      	ldr	r1, [pc, #160]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee4:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4922      	ldr	r1, [pc, #136]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60cb      	str	r3, [r1, #12]
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	491e      	ldr	r1, [pc, #120]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4918      	ldr	r1, [pc, #96]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4914      	ldr	r1, [pc, #80]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d021      	beq.n	8001f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	490e      	ldr	r1, [pc, #56]	@ (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
 8001f40:	e021      	b.n	8001f86 <HAL_GPIO_Init+0x2e2>
 8001f42:	bf00      	nop
 8001f44:	10320000 	.word	0x10320000
 8001f48:	10310000 	.word	0x10310000
 8001f4c:	10220000 	.word	0x10220000
 8001f50:	10210000 	.word	0x10210000
 8001f54:	10120000 	.word	0x10120000
 8001f58:	10110000 	.word	0x10110000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	40010c00 	.word	0x40010c00
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40011400 	.word	0x40011400
 8001f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4909      	ldr	r1, [pc, #36]	@ (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f47f ae8e 	bne.w	8001cb8 <HAL_GPIO_Init+0x14>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	372c      	adds	r7, #44	@ 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40010400 	.word	0x40010400

08001fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e001      	b.n	8001fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e12b      	b.n	8002246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fc1a 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2224      	movs	r2, #36	@ 0x24
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800202e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800203e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002040:	f002 fd04 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a81      	ldr	r2, [pc, #516]	@ (8002250 <HAL_I2C_Init+0x274>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d807      	bhi.n	8002060 <HAL_I2C_Init+0x84>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a80      	ldr	r2, [pc, #512]	@ (8002254 <HAL_I2C_Init+0x278>)
 8002054:	4293      	cmp	r3, r2
 8002056:	bf94      	ite	ls
 8002058:	2301      	movls	r3, #1
 800205a:	2300      	movhi	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e006      	b.n	800206e <HAL_I2C_Init+0x92>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a7d      	ldr	r2, [pc, #500]	@ (8002258 <HAL_I2C_Init+0x27c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	bf94      	ite	ls
 8002068:	2301      	movls	r3, #1
 800206a:	2300      	movhi	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0e7      	b.n	8002246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a78      	ldr	r2, [pc, #480]	@ (800225c <HAL_I2C_Init+0x280>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0c9b      	lsrs	r3, r3, #18
 8002080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002250 <HAL_I2C_Init+0x274>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d802      	bhi.n	80020b0 <HAL_I2C_Init+0xd4>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3301      	adds	r3, #1
 80020ae:	e009      	b.n	80020c4 <HAL_I2C_Init+0xe8>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	4a69      	ldr	r2, [pc, #420]	@ (8002260 <HAL_I2C_Init+0x284>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	3301      	adds	r3, #1
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	495c      	ldr	r1, [pc, #368]	@ (8002250 <HAL_I2C_Init+0x274>)
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d819      	bhi.n	8002118 <HAL_I2C_Init+0x13c>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e59      	subs	r1, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f2:	1c59      	adds	r1, r3, #1
 80020f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020f8:	400b      	ands	r3, r1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_I2C_Init+0x138>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1e59      	subs	r1, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fbb1 f3f3 	udiv	r3, r1, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002112:	e051      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002114:	2304      	movs	r3, #4
 8002116:	e04f      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d111      	bne.n	8002144 <HAL_I2C_Init+0x168>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e012      	b.n	800216a <HAL_I2C_Init+0x18e>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	0099      	lsls	r1, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	fbb0 f3f3 	udiv	r3, r0, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Init+0x196>
 800216e:	2301      	movs	r3, #1
 8002170:	e022      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10e      	bne.n	8002198 <HAL_I2C_Init+0x1bc>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e58      	subs	r0, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	440b      	add	r3, r1
 8002188:	fbb0 f3f3 	udiv	r3, r0, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002196:	e00f      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6809      	ldr	r1, [r1, #0]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6911      	ldr	r1, [r2, #16]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68d2      	ldr	r2, [r2, #12]
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	000186a0 	.word	0x000186a0
 8002254:	001e847f 	.word	0x001e847f
 8002258:	003d08ff 	.word	0x003d08ff
 800225c:	431bde83 	.word	0x431bde83
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002276:	2b80      	cmp	r3, #128	@ 0x80
 8002278:	d103      	bne.n	8002282 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	461a      	mov	r2, r3
 8002298:	460b      	mov	r3, r1
 800229a:	817b      	strh	r3, [r7, #10]
 800229c:	4613      	mov	r3, r2
 800229e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff f9de 	bl	8001660 <HAL_GetTick>
 80022a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	f040 80e0 	bne.w	8002474 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	4970      	ldr	r1, [pc, #448]	@ (8002480 <HAL_I2C_Master_Transmit+0x1f4>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f001 fdd6 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0d3      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_I2C_Master_Transmit+0x50>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0cc      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d007      	beq.n	8002302 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002310:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2221      	movs	r2, #33	@ 0x21
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2210      	movs	r2, #16
 800231e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	893a      	ldrh	r2, [r7, #8]
 8002332:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a50      	ldr	r2, [pc, #320]	@ (8002484 <HAL_I2C_Master_Transmit+0x1f8>)
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f001 fc66 	bl	8003c1c <I2C_MasterRequestWrite>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e08d      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002370:	e066      	b.n	8002440 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	6a39      	ldr	r1, [r7, #32]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f001 fe94 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	2b04      	cmp	r3, #4
 8002388:	d107      	bne.n	800239a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002398:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06b      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d11b      	bne.n	8002414 <HAL_I2C_Master_Transmit+0x188>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d017      	beq.n	8002414 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	6a39      	ldr	r1, [r7, #32]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f001 fe8b 	bl	8004134 <I2C_WaitOnBTFFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00d      	beq.n	8002440 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	2b04      	cmp	r3, #4
 800242a:	d107      	bne.n	800243c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e01a      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d194      	bne.n	8002372 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	00100002 	.word	0x00100002
 8002484:	ffff0000 	.word	0xffff0000

08002488 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d003      	beq.n	80024c0 <HAL_I2C_EV_IRQHandler+0x38>
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b40      	cmp	r3, #64	@ 0x40
 80024bc:	f040 80b1 	bne.w	8002622 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10d      	bne.n	80024f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80024e0:	d003      	beq.n	80024ea <HAL_I2C_EV_IRQHandler+0x62>
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80024e8:	d101      	bne.n	80024ee <HAL_I2C_EV_IRQHandler+0x66>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_I2C_EV_IRQHandler+0x68>
 80024ee:	2300      	movs	r3, #0
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	f000 8114 	beq.w	800271e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <HAL_I2C_EV_IRQHandler+0x90>
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f001 feba 	bl	8004284 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fd60 	bl	8002fd6 <I2C_Master_SB>
 8002516:	e083      	b.n	8002620 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0xac>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fdd7 	bl	80030e0 <I2C_Master_ADD10>
 8002532:	e075      	b.n	8002620 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_I2C_EV_IRQHandler+0xc8>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fdf2 	bl	8003132 <I2C_Master_ADDR>
 800254e:	e067      	b.n	8002620 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d036      	beq.n	80025c8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002568:	f000 80db 	beq.w	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00d      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x10a>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x10a>
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f9d4 	bl	8002938 <I2C_MasterTransmit_TXE>
 8002590:	e046      	b.n	8002620 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80c2 	beq.w	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80bc 	beq.w	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80025aa:	7bbb      	ldrb	r3, [r7, #14]
 80025ac:	2b21      	cmp	r3, #33	@ 0x21
 80025ae:	d103      	bne.n	80025b8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fa5d 	bl	8002a70 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b6:	e0b4      	b.n	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b40      	cmp	r3, #64	@ 0x40
 80025bc:	f040 80b1 	bne.w	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 facb 	bl	8002b5c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025c6:	e0ac      	b.n	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025d6:	f000 80a4 	beq.w	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00d      	beq.n	8002600 <HAL_I2C_EV_IRQHandler+0x178>
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_I2C_EV_IRQHandler+0x178>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fb47 	bl	8002c8c <I2C_MasterReceive_RXNE>
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 808b 	beq.w	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8085 	beq.w	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fbf2 	bl	8002e02 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800261e:	e080      	b.n	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
 8002620:	e07f      	b.n	8002722 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e007      	b.n	8002644 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d011      	beq.n	8002672 <HAL_I2C_EV_IRQHandler+0x1ea>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00c      	beq.n	8002672 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002668:	69b9      	ldr	r1, [r7, #24]
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 ffb8 	bl	80035e0 <I2C_Slave_ADDR>
 8002670:	e05a      	b.n	8002728 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_I2C_EV_IRQHandler+0x206>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fff2 	bl	8003670 <I2C_Slave_STOPF>
 800268c:	e04c      	b.n	8002728 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800268e:	7bbb      	ldrb	r3, [r7, #14]
 8002690:	2b21      	cmp	r3, #33	@ 0x21
 8002692:	d002      	beq.n	800269a <HAL_I2C_EV_IRQHandler+0x212>
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	2b29      	cmp	r3, #41	@ 0x29
 8002698:	d120      	bne.n	80026dc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00d      	beq.n	80026c0 <HAL_I2C_EV_IRQHandler+0x238>
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_I2C_EV_IRQHandler+0x238>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fed5 	bl	8003468 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026be:	e032      	b.n	8002726 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d02d      	beq.n	8002726 <HAL_I2C_EV_IRQHandler+0x29e>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d028      	beq.n	8002726 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 ff04 	bl	80034e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026da:	e024      	b.n	8002726 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <HAL_I2C_EV_IRQHandler+0x27a>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_I2C_EV_IRQHandler+0x27a>
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 ff11 	bl	8003522 <I2C_SlaveReceive_RXNE>
 8002700:	e012      	b.n	8002728 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <HAL_I2C_EV_IRQHandler+0x2a0>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 ff41 	bl	800359e <I2C_SlaveReceive_BTF>
 800271c:	e004      	b.n	8002728 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800271e:	bf00      	nop
 8002720:	e002      	b.n	8002728 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002722:	bf00      	nop
 8002724:	e000      	b.n	8002728 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002726:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b08a      	sub	sp, #40	@ 0x28
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002750:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d015      	beq.n	8002788 <HAL_I2C_ER_IRQHandler+0x5a>
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002776:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002786:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00d      	beq.n	80027ae <HAL_I2C_ER_IRQHandler+0x80>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80027ac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d03e      	beq.n	8002836 <HAL_I2C_ER_IRQHandler+0x108>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d039      	beq.n	8002836 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80027c2:	7efb      	ldrb	r3, [r7, #27]
 80027c4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80027dc:	7ebb      	ldrb	r3, [r7, #26]
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d112      	bne.n	8002808 <HAL_I2C_ER_IRQHandler+0xda>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10f      	bne.n	8002808 <HAL_I2C_ER_IRQHandler+0xda>
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	2b21      	cmp	r3, #33	@ 0x21
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b29      	cmp	r3, #41	@ 0x29
 80027f2:	d005      	beq.n	8002800 <HAL_I2C_ER_IRQHandler+0xd2>
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	2b28      	cmp	r3, #40	@ 0x28
 80027f8:	d106      	bne.n	8002808 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b21      	cmp	r3, #33	@ 0x21
 80027fe:	d103      	bne.n	8002808 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f001 f865 	bl	80038d0 <I2C_Slave_AF>
 8002806:	e016      	b.n	8002836 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002810:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800281a:	7efb      	ldrb	r3, [r7, #27]
 800281c:	2b10      	cmp	r3, #16
 800281e:	d002      	beq.n	8002826 <HAL_I2C_ER_IRQHandler+0xf8>
 8002820:	7efb      	ldrb	r3, [r7, #27]
 8002822:	2b40      	cmp	r3, #64	@ 0x40
 8002824:	d107      	bne.n	8002836 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002834:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00d      	beq.n	800285c <HAL_I2C_ER_IRQHandler+0x12e>
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800285a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f001 f8a2 	bl	80039b8 <I2C_ITError>
  }
}
 8002874:	bf00      	nop
 8002876:	3728      	adds	r7, #40	@ 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
 80028d0:	4613      	mov	r3, r2
 80028d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002946:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800294e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295a:	2b00      	cmp	r3, #0
 800295c:	d150      	bne.n	8002a00 <I2C_MasterTransmit_TXE+0xc8>
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b21      	cmp	r3, #33	@ 0x21
 8002962:	d14d      	bne.n	8002a00 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b08      	cmp	r3, #8
 8002968:	d01d      	beq.n	80029a6 <I2C_MasterTransmit_TXE+0x6e>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b20      	cmp	r3, #32
 800296e:	d01a      	beq.n	80029a6 <I2C_MasterTransmit_TXE+0x6e>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002976:	d016      	beq.n	80029a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002986:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2211      	movs	r2, #17
 800298c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ff6c 	bl	800287c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029a4:	e060      	b.n	8002a68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b40      	cmp	r3, #64	@ 0x40
 80029de:	d107      	bne.n	80029f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff81 	bl	80028f0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029ee:	e03b      	b.n	8002a68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff3f 	bl	800287c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029fe:	e033      	b.n	8002a68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b21      	cmp	r3, #33	@ 0x21
 8002a04:	d005      	beq.n	8002a12 <I2C_MasterTransmit_TXE+0xda>
 8002a06:	7bbb      	ldrb	r3, [r7, #14]
 8002a08:	2b40      	cmp	r3, #64	@ 0x40
 8002a0a:	d12d      	bne.n	8002a68 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b22      	cmp	r3, #34	@ 0x22
 8002a10:	d12a      	bne.n	8002a68 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d108      	bne.n	8002a2e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a2a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a2c:	e01c      	b.n	8002a68 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b40      	cmp	r3, #64	@ 0x40
 8002a38:	d103      	bne.n	8002a42 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f88e 	bl	8002b5c <I2C_MemoryTransmit_TXE_BTF>
}
 8002a40:	e012      	b.n	8002a68 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002a66:	e7ff      	b.n	8002a68 <I2C_MasterTransmit_TXE+0x130>
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b21      	cmp	r3, #33	@ 0x21
 8002a88:	d164      	bne.n	8002b54 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d012      	beq.n	8002aba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ab8:	e04c      	b.n	8002b54 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d01d      	beq.n	8002afc <I2C_MasterTransmit_BTF+0x8c>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d01a      	beq.n	8002afc <I2C_MasterTransmit_BTF+0x8c>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002acc:	d016      	beq.n	8002afc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002adc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2211      	movs	r2, #17
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fec1 	bl	800287c <HAL_I2C_MasterTxCpltCallback>
}
 8002afa:	e02b      	b.n	8002b54 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b0a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b40      	cmp	r3, #64	@ 0x40
 8002b34:	d107      	bne.n	8002b46 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fed6 	bl	80028f0 <HAL_I2C_MemTxCpltCallback>
}
 8002b44:	e006      	b.n	8002b54 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fe94 	bl	800287c <HAL_I2C_MasterTxCpltCallback>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d11d      	bne.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10b      	bne.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8c:	1c9a      	adds	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002b92:	e077      	b.n	8002c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	121b      	asrs	r3, r3, #8
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bae:	e069      	b.n	8002c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d10b      	bne.n	8002bd0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bce:	e059      	b.n	8002c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d152      	bne.n	8002c7e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b22      	cmp	r3, #34	@ 0x22
 8002bdc:	d10d      	bne.n	8002bfa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bf8:	e044      	b.n	8002c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d015      	beq.n	8002c30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b21      	cmp	r3, #33	@ 0x21
 8002c08:	d112      	bne.n	8002c30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c2e:	e029      	b.n	8002c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d124      	bne.n	8002c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b21      	cmp	r3, #33	@ 0x21
 8002c3e:	d121      	bne.n	8002c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c4e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff fe3a 	bl	80028f0 <HAL_I2C_MemTxCpltCallback>
}
 8002c7c:	e002      	b.n	8002c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff faf0 	bl	8002264 <I2C_Flush_DR>
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b22      	cmp	r3, #34	@ 0x22
 8002c9e:	f040 80ac 	bne.w	8002dfa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d921      	bls.n	8002cf4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	f040 808c 	bne.w	8002dfa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002cf2:	e082      	b.n	8002dfa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d075      	beq.n	8002de8 <I2C_MasterReceive_RXNE+0x15c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d002      	beq.n	8002d08 <I2C_MasterReceive_RXNE+0x7c>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d16f      	bne.n	8002de8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f001 fa5b 	bl	80041c4 <I2C_WaitOnSTOPRequestThroughIT>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d142      	bne.n	8002d9a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d22:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d32:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b40      	cmp	r3, #64	@ 0x40
 8002d6c:	d10a      	bne.n	8002d84 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fdc0 	bl	8002902 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d82:	e03a      	b.n	8002dfa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2212      	movs	r2, #18
 8002d90:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fd7b 	bl	800288e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d98:	e02f      	b.n	8002dfa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002da8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff fd97 	bl	8002914 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002de6:	e008      	b.n	8002dfa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df6:	605a      	str	r2, [r3, #4]
}
 8002df8:	e7ff      	b.n	8002dfa <I2C_MasterReceive_RXNE+0x16e>
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d11b      	bne.n	8002e52 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e28:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002e50:	e0bd      	b.n	8002fce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d129      	bne.n	8002eb0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d00a      	beq.n	8002e88 <I2C_MasterReceive_BTF+0x86>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d007      	beq.n	8002e88 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002eae:	e08e      	b.n	8002fce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d176      	bne.n	8002fa8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d002      	beq.n	8002ec6 <I2C_MasterReceive_BTF+0xc4>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d108      	bne.n	8002ed8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e019      	b.n	8002f0c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d002      	beq.n	8002ee4 <I2C_MasterReceive_BTF+0xe2>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d108      	bne.n	8002ef6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e00a      	b.n	8002f0c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d007      	beq.n	8002f0c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f66:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b40      	cmp	r3, #64	@ 0x40
 8002f7a:	d10a      	bne.n	8002f92 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fcb9 	bl	8002902 <HAL_I2C_MemRxCpltCallback>
}
 8002f90:	e01d      	b.n	8002fce <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2212      	movs	r2, #18
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff fc74 	bl	800288e <HAL_I2C_MasterRxCpltCallback>
}
 8002fa6:	e012      	b.n	8002fce <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b40      	cmp	r3, #64	@ 0x40
 8002fe8:	d117      	bne.n	800301a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003002:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003004:	e067      	b.n	80030d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]
}
 8003018:	e05d      	b.n	80030d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003022:	d133      	bne.n	800308c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b21      	cmp	r3, #33	@ 0x21
 800302e:	d109      	bne.n	8003044 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003040:	611a      	str	r2, [r3, #16]
 8003042:	e008      	b.n	8003056 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <I2C_Master_SB+0x92>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d108      	bne.n	800307a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306c:	2b00      	cmp	r3, #0
 800306e:	d032      	beq.n	80030d6 <I2C_Master_SB+0x100>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d02d      	beq.n	80030d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003088:	605a      	str	r2, [r3, #4]
}
 800308a:	e024      	b.n	80030d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10e      	bne.n	80030b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003098:	b29b      	uxth	r3, r3
 800309a:	11db      	asrs	r3, r3, #7
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f003 0306 	and.w	r3, r3, #6
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f063 030f 	orn	r3, r3, #15
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	611a      	str	r2, [r3, #16]
}
 80030b0:	e011      	b.n	80030d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10d      	bne.n	80030d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	b29b      	uxth	r3, r3
 80030c0:	11db      	asrs	r3, r3, #7
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f003 0306 	and.w	r3, r3, #6
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f063 030e 	orn	r3, r3, #14
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	611a      	str	r2, [r3, #16]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <I2C_Master_ADD10+0x26>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <I2C_Master_ADD10+0x48>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003126:	605a      	str	r2, [r3, #4]
  }
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003132:	b480      	push	{r7}
 8003134:	b091      	sub	sp, #68	@ 0x44
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003140:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b22      	cmp	r3, #34	@ 0x22
 800315a:	f040 8174 	bne.w	8003446 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <I2C_Master_ADDR+0x54>
 8003166:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800316a:	2b40      	cmp	r3, #64	@ 0x40
 800316c:	d10b      	bne.n	8003186 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316e:	2300      	movs	r3, #0
 8003170:	633b      	str	r3, [r7, #48]	@ 0x30
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	633b      	str	r3, [r7, #48]	@ 0x30
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	633b      	str	r3, [r7, #48]	@ 0x30
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	e16b      	b.n	800345e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11d      	bne.n	80031ca <I2C_Master_ADDR+0x98>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003196:	d118      	bne.n	80031ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003198:	2300      	movs	r3, #0
 800319a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80031c8:	e149      	b.n	800345e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d113      	bne.n	80031fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d4:	2300      	movs	r3, #0
 80031d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e120      	b.n	800343e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	f040 808a 	bne.w	800331c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800320e:	d137      	bne.n	8003280 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800322e:	d113      	bne.n	8003258 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800323e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	e0f2      	b.n	800343e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003258:	2300      	movs	r3, #0
 800325a:	623b      	str	r3, [r7, #32]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	623b      	str	r3, [r7, #32]
 800326c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e0de      	b.n	800343e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003282:	2b08      	cmp	r3, #8
 8003284:	d02e      	beq.n	80032e4 <I2C_Master_ADDR+0x1b2>
 8003286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003288:	2b20      	cmp	r3, #32
 800328a:	d02b      	beq.n	80032e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800328c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328e:	2b12      	cmp	r3, #18
 8003290:	d102      	bne.n	8003298 <I2C_Master_ADDR+0x166>
 8003292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003294:	2b01      	cmp	r3, #1
 8003296:	d125      	bne.n	80032e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329a:	2b04      	cmp	r3, #4
 800329c:	d00e      	beq.n	80032bc <I2C_Master_ADDR+0x18a>
 800329e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d00b      	beq.n	80032bc <I2C_Master_ADDR+0x18a>
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d008      	beq.n	80032bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	e0ac      	b.n	800343e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e090      	b.n	800343e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d158      	bne.n	80033d8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003328:	2b04      	cmp	r3, #4
 800332a:	d021      	beq.n	8003370 <I2C_Master_ADDR+0x23e>
 800332c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332e:	2b02      	cmp	r3, #2
 8003330:	d01e      	beq.n	8003370 <I2C_Master_ADDR+0x23e>
 8003332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003334:	2b10      	cmp	r3, #16
 8003336:	d01b      	beq.n	8003370 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003346:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e012      	b.n	8003396 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800337e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033a4:	d14b      	bne.n	800343e <I2C_Master_ADDR+0x30c>
 80033a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033ac:	d00b      	beq.n	80033c6 <I2C_Master_ADDR+0x294>
 80033ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d008      	beq.n	80033c6 <I2C_Master_ADDR+0x294>
 80033b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d005      	beq.n	80033c6 <I2C_Master_ADDR+0x294>
 80033ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d002      	beq.n	80033c6 <I2C_Master_ADDR+0x294>
 80033c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d13b      	bne.n	800343e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	e032      	b.n	800343e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033e6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033f6:	d117      	bne.n	8003428 <I2C_Master_ADDR+0x2f6>
 80033f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033fe:	d00b      	beq.n	8003418 <I2C_Master_ADDR+0x2e6>
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	2b01      	cmp	r3, #1
 8003404:	d008      	beq.n	8003418 <I2C_Master_ADDR+0x2e6>
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	2b08      	cmp	r3, #8
 800340a:	d005      	beq.n	8003418 <I2C_Master_ADDR+0x2e6>
 800340c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340e:	2b10      	cmp	r3, #16
 8003410:	d002      	beq.n	8003418 <I2C_Master_ADDR+0x2e6>
 8003412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003414:	2b20      	cmp	r3, #32
 8003416:	d107      	bne.n	8003428 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003426:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003444:	e00b      	b.n	800345e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
}
 800345c:	e7ff      	b.n	800345e <I2C_Master_ADDR+0x32c>
 800345e:	bf00      	nop
 8003460:	3744      	adds	r7, #68	@ 0x44
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003476:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d02b      	beq.n	80034da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	781a      	ldrb	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d114      	bne.n	80034da <I2C_SlaveTransmit_TXE+0x72>
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b29      	cmp	r3, #41	@ 0x29
 80034b4:	d111      	bne.n	80034da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2221      	movs	r2, #33	@ 0x21
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2228      	movs	r2, #40	@ 0x28
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff f9e3 	bl	80028a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d011      	beq.n	8003518 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003530:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02c      	beq.n	8003596 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d114      	bne.n	8003596 <I2C_SlaveReceive_RXNE+0x74>
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003570:	d111      	bne.n	8003596 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003580:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2222      	movs	r2, #34	@ 0x22
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2228      	movs	r2, #40	@ 0x28
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff f98e 	bl	80028b2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d012      	beq.n	80035d6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035fa:	2b28      	cmp	r3, #40	@ 0x28
 80035fc:	d125      	bne.n	800364a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800360c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	81bb      	strh	r3, [r7, #12]
 800362c:	e002      	b.n	8003634 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800363c:	89ba      	ldrh	r2, [r7, #12]
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	4619      	mov	r1, r3
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff f93e 	bl	80028c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003648:	e00e      	b.n	8003668 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800368e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036cc:	d172      	bne.n	80037b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b22      	cmp	r3, #34	@ 0x22
 80036d2:	d002      	beq.n	80036da <I2C_Slave_STOPF+0x6a>
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80036d8:	d135      	bne.n	8003746 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f043 0204 	orr.w	r2, r3, #4
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800370c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fab8 	bl	8001c88 <HAL_DMA_GetState>
 8003718:	4603      	mov	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d049      	beq.n	80037b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	4a69      	ldr	r2, [pc, #420]	@ (80038c8 <I2C_Slave_STOPF+0x258>)
 8003724:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe f92e 	bl	800198c <HAL_DMA_Abort_IT>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d03d      	beq.n	80037b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003740:	4610      	mov	r0, r2
 8003742:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003744:	e035      	b.n	80037b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	f043 0204 	orr.w	r2, r3, #4
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003778:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fa82 	bl	8001c88 <HAL_DMA_GetState>
 8003784:	4603      	mov	r3, r0
 8003786:	2b01      	cmp	r3, #1
 8003788:	d014      	beq.n	80037b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378e:	4a4e      	ldr	r2, [pc, #312]	@ (80038c8 <I2C_Slave_STOPF+0x258>)
 8003790:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe f8f8 	bl	800198c <HAL_DMA_Abort_IT>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037ac:	4610      	mov	r0, r2
 80037ae:	4798      	blx	r3
 80037b0:	e000      	b.n	80037b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d03e      	beq.n	800383c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d112      	bne.n	80037f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fc:	2b40      	cmp	r3, #64	@ 0x40
 80037fe:	d112      	bne.n	8003826 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	f043 0204 	orr.w	r2, r3, #4
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f8b7 	bl	80039b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800384a:	e039      	b.n	80038c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003850:	d109      	bne.n	8003866 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2228      	movs	r2, #40	@ 0x28
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff f826 	bl	80028b2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b28      	cmp	r3, #40	@ 0x28
 8003870:	d111      	bne.n	8003896 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a15      	ldr	r2, [pc, #84]	@ (80038cc <I2C_Slave_STOPF+0x25c>)
 8003876:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff f825 	bl	80028de <HAL_I2C_ListenCpltCallback>
}
 8003894:	e014      	b.n	80038c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	2b22      	cmp	r3, #34	@ 0x22
 800389c:	d002      	beq.n	80038a4 <I2C_Slave_STOPF+0x234>
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b22      	cmp	r3, #34	@ 0x22
 80038a2:	d10d      	bne.n	80038c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fe fff9 	bl	80028b2 <HAL_I2C_SlaveRxCpltCallback>
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	08003d21 	.word	0x08003d21
 80038cc:	ffff0000 	.word	0xffff0000

080038d0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038de:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d002      	beq.n	80038f2 <I2C_Slave_AF+0x22>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d129      	bne.n	8003946 <I2C_Slave_AF+0x76>
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b28      	cmp	r3, #40	@ 0x28
 80038f6:	d126      	bne.n	8003946 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a2e      	ldr	r2, [pc, #184]	@ (80039b4 <I2C_Slave_AF+0xe4>)
 80038fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800390c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003916:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fe ffcd 	bl	80028de <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003944:	e031      	b.n	80039aa <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b21      	cmp	r3, #33	@ 0x21
 800394a:	d129      	bne.n	80039a0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a19      	ldr	r2, [pc, #100]	@ (80039b4 <I2C_Slave_AF+0xe4>)
 8003950:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2221      	movs	r2, #33	@ 0x21
 8003956:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003976:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003980:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003990:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fe fc66 	bl	8002264 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7fe ff81 	bl	80028a0 <HAL_I2C_SlaveTxCpltCallback>
}
 800399e:	e004      	b.n	80039aa <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039a8:	615a      	str	r2, [r3, #20]
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	ffff0000 	.word	0xffff0000

080039b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d002      	beq.n	80039dc <I2C_ITError+0x24>
 80039d6:	7bbb      	ldrb	r3, [r7, #14]
 80039d8:	2b40      	cmp	r3, #64	@ 0x40
 80039da:	d10a      	bne.n	80039f2 <I2C_ITError+0x3a>
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b22      	cmp	r3, #34	@ 0x22
 80039e0:	d107      	bne.n	80039f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039f8:	2b28      	cmp	r3, #40	@ 0x28
 80039fa:	d107      	bne.n	8003a0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2228      	movs	r2, #40	@ 0x28
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a0a:	e015      	b.n	8003a38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a1a:	d00a      	beq.n	8003a32 <I2C_ITError+0x7a>
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b60      	cmp	r3, #96	@ 0x60
 8003a20:	d007      	beq.n	8003a32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a46:	d162      	bne.n	8003b0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d020      	beq.n	8003aa8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6a:	4a6a      	ldr	r2, [pc, #424]	@ (8003c14 <I2C_ITError+0x25c>)
 8003a6c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd ff8a 	bl	800198c <HAL_DMA_Abort_IT>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8089 	beq.w	8003b92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	4798      	blx	r3
 8003aa6:	e074      	b.n	8003b92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	4a59      	ldr	r2, [pc, #356]	@ (8003c14 <I2C_ITError+0x25c>)
 8003aae:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd ff69 	bl	800198c <HAL_DMA_Abort_IT>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d068      	beq.n	8003b92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aca:	2b40      	cmp	r3, #64	@ 0x40
 8003acc:	d10b      	bne.n	8003ae6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4798      	blx	r3
 8003b0c:	e041      	b.n	8003b92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b60      	cmp	r3, #96	@ 0x60
 8003b18:	d125      	bne.n	8003b66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d10b      	bne.n	8003b4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe fee1 	bl	8002926 <HAL_I2C_AbortCpltCallback>
 8003b64:	e015      	b.n	8003b92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b70:	2b40      	cmp	r3, #64	@ 0x40
 8003b72:	d10b      	bne.n	8003b8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fe fec1 	bl	8002914 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10e      	bne.n	8003bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d113      	bne.n	8003c0c <I2C_ITError+0x254>
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b28      	cmp	r3, #40	@ 0x28
 8003be8:	d110      	bne.n	8003c0c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	@ (8003c18 <I2C_ITError+0x260>)
 8003bee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe fe69 	bl	80028de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	08003d21 	.word	0x08003d21
 8003c18:	ffff0000 	.word	0xffff0000

08003c1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d006      	beq.n	8003c46 <I2C_MasterRequestWrite+0x2a>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d003      	beq.n	8003c46 <I2C_MasterRequestWrite+0x2a>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c44:	d108      	bne.n	8003c58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	2b12      	cmp	r3, #18
 8003c5e:	d107      	bne.n	8003c70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f8f7 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c96:	d103      	bne.n	8003ca0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e035      	b.n	8003d10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cac:	d108      	bne.n	8003cc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cbc:	611a      	str	r2, [r3, #16]
 8003cbe:	e01b      	b.n	8003cf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cc0:	897b      	ldrh	r3, [r7, #10]
 8003cc2:	11db      	asrs	r3, r3, #7
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 0306 	and.w	r3, r3, #6
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f063 030f 	orn	r3, r3, #15
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	490e      	ldr	r1, [pc, #56]	@ (8003d18 <I2C_MasterRequestWrite+0xfc>)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f940 	bl	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e010      	b.n	8003d10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4907      	ldr	r1, [pc, #28]	@ (8003d1c <I2C_MasterRequestWrite+0x100>)
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f930 	bl	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	00010008 	.word	0x00010008
 8003d1c:	00010002 	.word	0x00010002

08003d20 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d38:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003e68 <I2C_DMAAbort+0x148>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	08db      	lsrs	r3, r3, #3
 8003d40:	4a4a      	ldr	r2, [pc, #296]	@ (8003e6c <I2C_DMAAbort+0x14c>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0a1a      	lsrs	r2, r3, #8
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00da      	lsls	r2, r3, #3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003d66:	e00a      	b.n	8003d7e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d7c:	d0ea      	beq.n	8003d54 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b60      	cmp	r3, #96	@ 0x60
 8003dee:	d10e      	bne.n	8003e0e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2200      	movs	r2, #0
 8003e04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7fe fd8d 	bl	8002926 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e0c:	e027      	b.n	8003e5e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e14:	2b28      	cmp	r3, #40	@ 0x28
 8003e16:	d117      	bne.n	8003e48 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2228      	movs	r2, #40	@ 0x28
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e46:	e007      	b.n	8003e58 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003e58:	6978      	ldr	r0, [r7, #20]
 8003e5a:	f7fe fd5b 	bl	8002914 <HAL_I2C_ErrorCallback>
}
 8003e5e:	bf00      	nop
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	14f8b589 	.word	0x14f8b589

08003e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e80:	e048      	b.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d044      	beq.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7fd fbe9 	bl	8001660 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d139      	bne.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10d      	bne.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	43da      	mvns	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	e00c      	b.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	43da      	mvns	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d116      	bne.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e023      	b.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10d      	bne.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	e00c      	b.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	43da      	mvns	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d093      	beq.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f72:	e071      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f82:	d123      	bne.n	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	f043 0204 	orr.w	r2, r3, #4
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e067      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d041      	beq.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd4:	f7fd fb44 	bl	8001660 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d136      	bne.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d10c      	bne.n	800400e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	bf14      	ite	ne
 8004006:	2301      	movne	r3, #1
 8004008:	2300      	moveq	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e00b      	b.n	8004026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	43da      	mvns	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4013      	ands	r3, r2
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e021      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	0c1b      	lsrs	r3, r3, #16
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10c      	bne.n	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	43da      	mvns	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf14      	ite	ne
 8004074:	2301      	movne	r3, #1
 8004076:	2300      	moveq	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e00b      	b.n	8004094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	f47f af6d 	bne.w	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b0:	e034      	b.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f8b8 	bl	8004228 <I2C_IsAcknowledgeFailed>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e034      	b.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d028      	beq.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ca:	f7fd fac9 	bl	8001660 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11d      	bne.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	2b80      	cmp	r3, #128	@ 0x80
 80040ec:	d016      	beq.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e007      	b.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b80      	cmp	r3, #128	@ 0x80
 8004128:	d1c3      	bne.n	80040b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004140:	e034      	b.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f870 	bl	8004228 <I2C_IsAcknowledgeFailed>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e034      	b.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d028      	beq.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fd fa81 	bl	8001660 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11d      	bne.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b04      	cmp	r3, #4
 800417c:	d016      	beq.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e007      	b.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d1c3      	bne.n	8004142 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041d0:	4b13      	ldr	r3, [pc, #76]	@ (8004220 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	08db      	lsrs	r3, r3, #3
 80041d6:	4a13      	ldr	r2, [pc, #76]	@ (8004224 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	0a1a      	lsrs	r2, r3, #8
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d107      	bne.n	8004202 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	f043 0220 	orr.w	r2, r3, #32
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e008      	b.n	8004214 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800420c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004210:	d0e9      	beq.n	80041e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000000 	.word	0x20000000
 8004224:	14f8b589 	.word	0x14f8b589

08004228 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423e:	d11b      	bne.n	8004278 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004248:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004294:	d103      	bne.n	800429e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800429c:	e007      	b.n	80042ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80042a6:	d102      	bne.n	80042ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2208      	movs	r2, #8
 80042ac:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e272      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8087 	beq.w	80043e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042d8:	4b92      	ldr	r3, [pc, #584]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d00c      	beq.n	80042fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d112      	bne.n	8004316 <HAL_RCC_OscConfig+0x5e>
 80042f0:	4b8c      	ldr	r3, [pc, #560]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fc:	d10b      	bne.n	8004316 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fe:	4b89      	ldr	r3, [pc, #548]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d06c      	beq.n	80043e4 <HAL_RCC_OscConfig+0x12c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d168      	bne.n	80043e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e24c      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x76>
 8004320:	4b80      	ldr	r3, [pc, #512]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a7f      	ldr	r2, [pc, #508]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	e02e      	b.n	800438c <HAL_RCC_OscConfig+0xd4>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x98>
 8004336:	4b7b      	ldr	r3, [pc, #492]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7a      	ldr	r2, [pc, #488]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 800433c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	4b78      	ldr	r3, [pc, #480]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a77      	ldr	r2, [pc, #476]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004348:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e01d      	b.n	800438c <HAL_RCC_OscConfig+0xd4>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0xbc>
 800435a:	4b72      	ldr	r3, [pc, #456]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a71      	ldr	r2, [pc, #452]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b6f      	ldr	r3, [pc, #444]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a6e      	ldr	r2, [pc, #440]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e00b      	b.n	800438c <HAL_RCC_OscConfig+0xd4>
 8004374:	4b6b      	ldr	r3, [pc, #428]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6a      	ldr	r2, [pc, #424]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 800437a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	4b68      	ldr	r3, [pc, #416]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a67      	ldr	r2, [pc, #412]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800438a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d013      	beq.n	80043bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fd f964 	bl	8001660 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800439c:	f7fd f960 	bl	8001660 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	@ 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e200      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0xe4>
 80043ba:	e014      	b.n	80043e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fd f950 	bl	8001660 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c4:	f7fd f94c 	bl	8001660 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	@ 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1ec      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d6:	4b53      	ldr	r3, [pc, #332]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x10c>
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d063      	beq.n	80044ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043fe:	4b49      	ldr	r3, [pc, #292]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b08      	cmp	r3, #8
 8004408:	d11c      	bne.n	8004444 <HAL_RCC_OscConfig+0x18c>
 800440a:	4b46      	ldr	r3, [pc, #280]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	4b43      	ldr	r3, [pc, #268]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_RCC_OscConfig+0x176>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e1c0      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442e:	4b3d      	ldr	r3, [pc, #244]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4939      	ldr	r1, [pc, #228]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	e03a      	b.n	80044ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800444c:	4b36      	ldr	r3, [pc, #216]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fd f905 	bl	8001660 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445a:	f7fd f901 	bl	8001660 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e1a1      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446c:	4b2d      	ldr	r3, [pc, #180]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004478:	4b2a      	ldr	r3, [pc, #168]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4927      	ldr	r1, [pc, #156]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]
 800448c:	e015      	b.n	80044ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448e:	4b26      	ldr	r3, [pc, #152]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fd f8e4 	bl	8001660 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449c:	f7fd f8e0 	bl	8001660 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e180      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d03a      	beq.n	800453c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d019      	beq.n	8004502 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ce:	4b17      	ldr	r3, [pc, #92]	@ (800452c <HAL_RCC_OscConfig+0x274>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d4:	f7fd f8c4 	bl	8001660 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fd f8c0 	bl	8001660 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e160      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044fa:	2001      	movs	r0, #1
 80044fc:	f000 faba 	bl	8004a74 <RCC_Delay>
 8004500:	e01c      	b.n	800453c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004502:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <HAL_RCC_OscConfig+0x274>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004508:	f7fd f8aa 	bl	8001660 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450e:	e00f      	b.n	8004530 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004510:	f7fd f8a6 	bl	8001660 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d908      	bls.n	8004530 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e146      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	42420000 	.word	0x42420000
 800452c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004530:	4b92      	ldr	r3, [pc, #584]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e9      	bne.n	8004510 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80a6 	beq.w	8004696 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454e:	4b8b      	ldr	r3, [pc, #556]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	4b88      	ldr	r3, [pc, #544]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	4a87      	ldr	r2, [pc, #540]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004564:	61d3      	str	r3, [r2, #28]
 8004566:	4b85      	ldr	r3, [pc, #532]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004576:	4b82      	ldr	r3, [pc, #520]	@ (8004780 <HAL_RCC_OscConfig+0x4c8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d118      	bne.n	80045b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004582:	4b7f      	ldr	r3, [pc, #508]	@ (8004780 <HAL_RCC_OscConfig+0x4c8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a7e      	ldr	r2, [pc, #504]	@ (8004780 <HAL_RCC_OscConfig+0x4c8>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800458c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458e:	f7fd f867 	bl	8001660 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004596:	f7fd f863 	bl	8001660 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b64      	cmp	r3, #100	@ 0x64
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e103      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	4b75      	ldr	r3, [pc, #468]	@ (8004780 <HAL_RCC_OscConfig+0x4c8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x312>
 80045bc:	4b6f      	ldr	r3, [pc, #444]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4a6e      	ldr	r2, [pc, #440]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6213      	str	r3, [r2, #32]
 80045c8:	e02d      	b.n	8004626 <HAL_RCC_OscConfig+0x36e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x334>
 80045d2:	4b6a      	ldr	r3, [pc, #424]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	4a69      	ldr	r2, [pc, #420]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	6213      	str	r3, [r2, #32]
 80045de:	4b67      	ldr	r3, [pc, #412]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	4a66      	ldr	r2, [pc, #408]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	f023 0304 	bic.w	r3, r3, #4
 80045e8:	6213      	str	r3, [r2, #32]
 80045ea:	e01c      	b.n	8004626 <HAL_RCC_OscConfig+0x36e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b05      	cmp	r3, #5
 80045f2:	d10c      	bne.n	800460e <HAL_RCC_OscConfig+0x356>
 80045f4:	4b61      	ldr	r3, [pc, #388]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	4a60      	ldr	r2, [pc, #384]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	f043 0304 	orr.w	r3, r3, #4
 80045fe:	6213      	str	r3, [r2, #32]
 8004600:	4b5e      	ldr	r3, [pc, #376]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4a5d      	ldr	r2, [pc, #372]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6213      	str	r3, [r2, #32]
 800460c:	e00b      	b.n	8004626 <HAL_RCC_OscConfig+0x36e>
 800460e:	4b5b      	ldr	r3, [pc, #364]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	4a5a      	ldr	r2, [pc, #360]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	6213      	str	r3, [r2, #32]
 800461a:	4b58      	ldr	r3, [pc, #352]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	4a57      	ldr	r2, [pc, #348]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d015      	beq.n	800465a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462e:	f7fd f817 	bl	8001660 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	e00a      	b.n	800464c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fd f813 	bl	8001660 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e0b1      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	4b4b      	ldr	r3, [pc, #300]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ee      	beq.n	8004636 <HAL_RCC_OscConfig+0x37e>
 8004658:	e014      	b.n	8004684 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465a:	f7fd f801 	bl	8001660 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fc fffd 	bl	8001660 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e09b      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004678:	4b40      	ldr	r3, [pc, #256]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ee      	bne.n	8004662 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d105      	bne.n	8004696 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468a:	4b3c      	ldr	r3, [pc, #240]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	4a3b      	ldr	r2, [pc, #236]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004690:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004694:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8087 	beq.w	80047ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a0:	4b36      	ldr	r3, [pc, #216]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d061      	beq.n	8004770 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d146      	bne.n	8004742 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b4:	4b33      	ldr	r3, [pc, #204]	@ (8004784 <HAL_RCC_OscConfig+0x4cc>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fc ffd1 	bl	8001660 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c2:	f7fc ffcd 	bl	8001660 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e06d      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d4:	4b29      	ldr	r3, [pc, #164]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e8:	d108      	bne.n	80046fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046ea:	4b24      	ldr	r3, [pc, #144]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4921      	ldr	r1, [pc, #132]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046fc:	4b1f      	ldr	r3, [pc, #124]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a19      	ldr	r1, [r3, #32]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	430b      	orrs	r3, r1
 800470e:	491b      	ldr	r1, [pc, #108]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004714:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <HAL_RCC_OscConfig+0x4cc>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471a:	f7fc ffa1 	bl	8001660 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004722:	f7fc ff9d 	bl	8001660 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e03d      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004734:	4b11      	ldr	r3, [pc, #68]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x46a>
 8004740:	e035      	b.n	80047ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004742:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <HAL_RCC_OscConfig+0x4cc>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fc ff8a 	bl	8001660 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004750:	f7fc ff86 	bl	8001660 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e026      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004762:	4b06      	ldr	r3, [pc, #24]	@ (800477c <HAL_RCC_OscConfig+0x4c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x498>
 800476e:	e01e      	b.n	80047ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d107      	bne.n	8004788 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e019      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
 800477c:	40021000 	.word	0x40021000
 8004780:	40007000 	.word	0x40007000
 8004784:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004788:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <HAL_RCC_OscConfig+0x500>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	429a      	cmp	r2, r3
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d001      	beq.n	80047ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000

080047bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0d0      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b6a      	ldr	r3, [pc, #424]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d910      	bls.n	8004800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b67      	ldr	r3, [pc, #412]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 0207 	bic.w	r2, r3, #7
 80047e6:	4965      	ldr	r1, [pc, #404]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b63      	ldr	r3, [pc, #396]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0b8      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d020      	beq.n	800484e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004818:	4b59      	ldr	r3, [pc, #356]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a58      	ldr	r2, [pc, #352]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004822:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004830:	4b53      	ldr	r3, [pc, #332]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a52      	ldr	r2, [pc, #328]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800483a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800483c:	4b50      	ldr	r3, [pc, #320]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	494d      	ldr	r1, [pc, #308]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d040      	beq.n	80048dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b47      	ldr	r3, [pc, #284]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d115      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e07f      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d107      	bne.n	800488a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	4b41      	ldr	r3, [pc, #260]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e073      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488a:	4b3d      	ldr	r3, [pc, #244]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e06b      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489a:	4b39      	ldr	r3, [pc, #228]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4936      	ldr	r1, [pc, #216]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ac:	f7fc fed8 	bl	8001660 <HAL_GetTick>
 80048b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b4:	f7fc fed4 	bl	8001660 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e053      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 020c 	and.w	r2, r3, #12
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1eb      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048dc:	4b27      	ldr	r3, [pc, #156]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d210      	bcs.n	800490c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b24      	ldr	r3, [pc, #144]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 0207 	bic.w	r2, r3, #7
 80048f2:	4922      	ldr	r1, [pc, #136]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b20      	ldr	r3, [pc, #128]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e032      	b.n	8004972 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004918:	4b19      	ldr	r3, [pc, #100]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4916      	ldr	r1, [pc, #88]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004936:	4b12      	ldr	r3, [pc, #72]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	490e      	ldr	r1, [pc, #56]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800494a:	f000 f821 	bl	8004990 <HAL_RCC_GetSysClockFreq>
 800494e:	4602      	mov	r2, r0
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	490a      	ldr	r1, [pc, #40]	@ (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800495c:	5ccb      	ldrb	r3, [r1, r3]
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	4a09      	ldr	r2, [pc, #36]	@ (8004988 <HAL_RCC_ClockConfig+0x1cc>)
 8004964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004966:	4b09      	ldr	r3, [pc, #36]	@ (800498c <HAL_RCC_ClockConfig+0x1d0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc fe36 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40022000 	.word	0x40022000
 8004980:	40021000 	.word	0x40021000
 8004984:	08005cb0 	.word	0x08005cb0
 8004988:	20000000 	.word	0x20000000
 800498c:	20000004 	.word	0x20000004

08004990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x94>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d002      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x30>
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d003      	beq.n	80049c6 <HAL_RCC_GetSysClockFreq+0x36>
 80049be:	e027      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049c0:	4b19      	ldr	r3, [pc, #100]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80049c2:	613b      	str	r3, [r7, #16]
      break;
 80049c4:	e027      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	0c9b      	lsrs	r3, r3, #18
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	4a17      	ldr	r2, [pc, #92]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x9c>)
 80049d0:	5cd3      	ldrb	r3, [r2, r3]
 80049d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d010      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049de:	4b11      	ldr	r3, [pc, #68]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x94>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	0c5b      	lsrs	r3, r3, #17
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	4a11      	ldr	r2, [pc, #68]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049ea:	5cd3      	ldrb	r3, [r2, r3]
 80049ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80049f2:	fb03 f202 	mul.w	r2, r3, r2
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	e004      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0c      	ldr	r2, [pc, #48]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	613b      	str	r3, [r7, #16]
      break;
 8004a0e:	e002      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a12:	613b      	str	r3, [r7, #16]
      break;
 8004a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a16:	693b      	ldr	r3, [r7, #16]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	007a1200 	.word	0x007a1200
 8004a2c:	08005cc8 	.word	0x08005cc8
 8004a30:	08005cd8 	.word	0x08005cd8
 8004a34:	003d0900 	.word	0x003d0900

08004a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a3c:	4b02      	ldr	r3, [pc, #8]	@ (8004a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	20000000 	.word	0x20000000

08004a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a50:	f7ff fff2 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b05      	ldr	r3, [pc, #20]	@ (8004a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	0a1b      	lsrs	r3, r3, #8
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	4903      	ldr	r1, [pc, #12]	@ (8004a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	08005cc0 	.word	0x08005cc0

08004a74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <RCC_Delay+0x34>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0a      	ldr	r2, [pc, #40]	@ (8004aac <RCC_Delay+0x38>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	0a5b      	lsrs	r3, r3, #9
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a90:	bf00      	nop
  }
  while (Delay --);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1e5a      	subs	r2, r3, #1
 8004a96:	60fa      	str	r2, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f9      	bne.n	8004a90 <RCC_Delay+0x1c>
}
 8004a9c:	bf00      	nop
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	10624dd3 	.word	0x10624dd3

08004ab0 <siprintf>:
 8004ab0:	b40e      	push	{r1, r2, r3}
 8004ab2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ab6:	b500      	push	{lr}
 8004ab8:	b09c      	sub	sp, #112	@ 0x70
 8004aba:	ab1d      	add	r3, sp, #116	@ 0x74
 8004abc:	9002      	str	r0, [sp, #8]
 8004abe:	9006      	str	r0, [sp, #24]
 8004ac0:	9107      	str	r1, [sp, #28]
 8004ac2:	9104      	str	r1, [sp, #16]
 8004ac4:	4808      	ldr	r0, [pc, #32]	@ (8004ae8 <siprintf+0x38>)
 8004ac6:	4909      	ldr	r1, [pc, #36]	@ (8004aec <siprintf+0x3c>)
 8004ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004acc:	9105      	str	r1, [sp, #20]
 8004ace:	6800      	ldr	r0, [r0, #0]
 8004ad0:	a902      	add	r1, sp, #8
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	f000 f9b0 	bl	8004e38 <_svfiprintf_r>
 8004ad8:	2200      	movs	r2, #0
 8004ada:	9b02      	ldr	r3, [sp, #8]
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	b01c      	add	sp, #112	@ 0x70
 8004ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ae4:	b003      	add	sp, #12
 8004ae6:	4770      	bx	lr
 8004ae8:	2000000c 	.word	0x2000000c
 8004aec:	ffff0208 	.word	0xffff0208

08004af0 <memcmp>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	3901      	subs	r1, #1
 8004af4:	4402      	add	r2, r0
 8004af6:	4290      	cmp	r0, r2
 8004af8:	d101      	bne.n	8004afe <memcmp+0xe>
 8004afa:	2000      	movs	r0, #0
 8004afc:	e005      	b.n	8004b0a <memcmp+0x1a>
 8004afe:	7803      	ldrb	r3, [r0, #0]
 8004b00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	d001      	beq.n	8004b0c <memcmp+0x1c>
 8004b08:	1b18      	subs	r0, r3, r4
 8004b0a:	bd10      	pop	{r4, pc}
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	e7f2      	b.n	8004af6 <memcmp+0x6>

08004b10 <memset>:
 8004b10:	4603      	mov	r3, r0
 8004b12:	4402      	add	r2, r0
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <memset+0xa>
 8004b18:	4770      	bx	lr
 8004b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1e:	e7f9      	b.n	8004b14 <memset+0x4>

08004b20 <__errno>:
 8004b20:	4b01      	ldr	r3, [pc, #4]	@ (8004b28 <__errno+0x8>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	2000000c 	.word	0x2000000c

08004b2c <__libc_init_array>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	2600      	movs	r6, #0
 8004b30:	4d0c      	ldr	r5, [pc, #48]	@ (8004b64 <__libc_init_array+0x38>)
 8004b32:	4c0d      	ldr	r4, [pc, #52]	@ (8004b68 <__libc_init_array+0x3c>)
 8004b34:	1b64      	subs	r4, r4, r5
 8004b36:	10a4      	asrs	r4, r4, #2
 8004b38:	42a6      	cmp	r6, r4
 8004b3a:	d109      	bne.n	8004b50 <__libc_init_array+0x24>
 8004b3c:	f000 fc78 	bl	8005430 <_init>
 8004b40:	2600      	movs	r6, #0
 8004b42:	4d0a      	ldr	r5, [pc, #40]	@ (8004b6c <__libc_init_array+0x40>)
 8004b44:	4c0a      	ldr	r4, [pc, #40]	@ (8004b70 <__libc_init_array+0x44>)
 8004b46:	1b64      	subs	r4, r4, r5
 8004b48:	10a4      	asrs	r4, r4, #2
 8004b4a:	42a6      	cmp	r6, r4
 8004b4c:	d105      	bne.n	8004b5a <__libc_init_array+0x2e>
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b54:	4798      	blx	r3
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7ee      	b.n	8004b38 <__libc_init_array+0xc>
 8004b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b5e:	4798      	blx	r3
 8004b60:	3601      	adds	r6, #1
 8004b62:	e7f2      	b.n	8004b4a <__libc_init_array+0x1e>
 8004b64:	08005d10 	.word	0x08005d10
 8004b68:	08005d10 	.word	0x08005d10
 8004b6c:	08005d10 	.word	0x08005d10
 8004b70:	08005d14 	.word	0x08005d14

08004b74 <__retarget_lock_acquire_recursive>:
 8004b74:	4770      	bx	lr

08004b76 <__retarget_lock_release_recursive>:
 8004b76:	4770      	bx	lr

08004b78 <memcpy>:
 8004b78:	440a      	add	r2, r1
 8004b7a:	4291      	cmp	r1, r2
 8004b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b80:	d100      	bne.n	8004b84 <memcpy+0xc>
 8004b82:	4770      	bx	lr
 8004b84:	b510      	push	{r4, lr}
 8004b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b8a:	4291      	cmp	r1, r2
 8004b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b90:	d1f9      	bne.n	8004b86 <memcpy+0xe>
 8004b92:	bd10      	pop	{r4, pc}

08004b94 <_free_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4605      	mov	r5, r0
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	d040      	beq.n	8004c1e <_free_r+0x8a>
 8004b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba0:	1f0c      	subs	r4, r1, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bfb8      	it	lt
 8004ba6:	18e4      	addlt	r4, r4, r3
 8004ba8:	f000 f8de 	bl	8004d68 <__malloc_lock>
 8004bac:	4a1c      	ldr	r2, [pc, #112]	@ (8004c20 <_free_r+0x8c>)
 8004bae:	6813      	ldr	r3, [r2, #0]
 8004bb0:	b933      	cbnz	r3, 8004bc0 <_free_r+0x2c>
 8004bb2:	6063      	str	r3, [r4, #4]
 8004bb4:	6014      	str	r4, [r2, #0]
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bbc:	f000 b8da 	b.w	8004d74 <__malloc_unlock>
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	d908      	bls.n	8004bd6 <_free_r+0x42>
 8004bc4:	6820      	ldr	r0, [r4, #0]
 8004bc6:	1821      	adds	r1, r4, r0
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf01      	itttt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	1809      	addeq	r1, r1, r0
 8004bd2:	6021      	streq	r1, [r4, #0]
 8004bd4:	e7ed      	b.n	8004bb2 <_free_r+0x1e>
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	b10b      	cbz	r3, 8004be0 <_free_r+0x4c>
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	d9fa      	bls.n	8004bd6 <_free_r+0x42>
 8004be0:	6811      	ldr	r1, [r2, #0]
 8004be2:	1850      	adds	r0, r2, r1
 8004be4:	42a0      	cmp	r0, r4
 8004be6:	d10b      	bne.n	8004c00 <_free_r+0x6c>
 8004be8:	6820      	ldr	r0, [r4, #0]
 8004bea:	4401      	add	r1, r0
 8004bec:	1850      	adds	r0, r2, r1
 8004bee:	4283      	cmp	r3, r0
 8004bf0:	6011      	str	r1, [r2, #0]
 8004bf2:	d1e0      	bne.n	8004bb6 <_free_r+0x22>
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4408      	add	r0, r1
 8004bfa:	6010      	str	r0, [r2, #0]
 8004bfc:	6053      	str	r3, [r2, #4]
 8004bfe:	e7da      	b.n	8004bb6 <_free_r+0x22>
 8004c00:	d902      	bls.n	8004c08 <_free_r+0x74>
 8004c02:	230c      	movs	r3, #12
 8004c04:	602b      	str	r3, [r5, #0]
 8004c06:	e7d6      	b.n	8004bb6 <_free_r+0x22>
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	1821      	adds	r1, r4, r0
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	bf01      	itttt	eq
 8004c10:	6819      	ldreq	r1, [r3, #0]
 8004c12:	685b      	ldreq	r3, [r3, #4]
 8004c14:	1809      	addeq	r1, r1, r0
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	6063      	str	r3, [r4, #4]
 8004c1a:	6054      	str	r4, [r2, #4]
 8004c1c:	e7cb      	b.n	8004bb6 <_free_r+0x22>
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
 8004c20:	20000740 	.word	0x20000740

08004c24 <sbrk_aligned>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4e0f      	ldr	r6, [pc, #60]	@ (8004c64 <sbrk_aligned+0x40>)
 8004c28:	460c      	mov	r4, r1
 8004c2a:	6831      	ldr	r1, [r6, #0]
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	b911      	cbnz	r1, 8004c36 <sbrk_aligned+0x12>
 8004c30:	f000 fbaa 	bl	8005388 <_sbrk_r>
 8004c34:	6030      	str	r0, [r6, #0]
 8004c36:	4621      	mov	r1, r4
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 fba5 	bl	8005388 <_sbrk_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	d103      	bne.n	8004c4a <sbrk_aligned+0x26>
 8004c42:	f04f 34ff 	mov.w	r4, #4294967295
 8004c46:	4620      	mov	r0, r4
 8004c48:	bd70      	pop	{r4, r5, r6, pc}
 8004c4a:	1cc4      	adds	r4, r0, #3
 8004c4c:	f024 0403 	bic.w	r4, r4, #3
 8004c50:	42a0      	cmp	r0, r4
 8004c52:	d0f8      	beq.n	8004c46 <sbrk_aligned+0x22>
 8004c54:	1a21      	subs	r1, r4, r0
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 fb96 	bl	8005388 <_sbrk_r>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d1f2      	bne.n	8004c46 <sbrk_aligned+0x22>
 8004c60:	e7ef      	b.n	8004c42 <sbrk_aligned+0x1e>
 8004c62:	bf00      	nop
 8004c64:	2000073c 	.word	0x2000073c

08004c68 <_malloc_r>:
 8004c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c6c:	1ccd      	adds	r5, r1, #3
 8004c6e:	f025 0503 	bic.w	r5, r5, #3
 8004c72:	3508      	adds	r5, #8
 8004c74:	2d0c      	cmp	r5, #12
 8004c76:	bf38      	it	cc
 8004c78:	250c      	movcc	r5, #12
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	4606      	mov	r6, r0
 8004c7e:	db01      	blt.n	8004c84 <_malloc_r+0x1c>
 8004c80:	42a9      	cmp	r1, r5
 8004c82:	d904      	bls.n	8004c8e <_malloc_r+0x26>
 8004c84:	230c      	movs	r3, #12
 8004c86:	6033      	str	r3, [r6, #0]
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d64 <_malloc_r+0xfc>
 8004c92:	f000 f869 	bl	8004d68 <__malloc_lock>
 8004c96:	f8d8 3000 	ldr.w	r3, [r8]
 8004c9a:	461c      	mov	r4, r3
 8004c9c:	bb44      	cbnz	r4, 8004cf0 <_malloc_r+0x88>
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f7ff ffbf 	bl	8004c24 <sbrk_aligned>
 8004ca6:	1c43      	adds	r3, r0, #1
 8004ca8:	4604      	mov	r4, r0
 8004caa:	d158      	bne.n	8004d5e <_malloc_r+0xf6>
 8004cac:	f8d8 4000 	ldr.w	r4, [r8]
 8004cb0:	4627      	mov	r7, r4
 8004cb2:	2f00      	cmp	r7, #0
 8004cb4:	d143      	bne.n	8004d3e <_malloc_r+0xd6>
 8004cb6:	2c00      	cmp	r4, #0
 8004cb8:	d04b      	beq.n	8004d52 <_malloc_r+0xea>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	eb04 0903 	add.w	r9, r4, r3
 8004cc4:	f000 fb60 	bl	8005388 <_sbrk_r>
 8004cc8:	4581      	cmp	r9, r0
 8004cca:	d142      	bne.n	8004d52 <_malloc_r+0xea>
 8004ccc:	6821      	ldr	r1, [r4, #0]
 8004cce:	4630      	mov	r0, r6
 8004cd0:	1a6d      	subs	r5, r5, r1
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f7ff ffa6 	bl	8004c24 <sbrk_aligned>
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d03a      	beq.n	8004d52 <_malloc_r+0xea>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	442b      	add	r3, r5
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	bb62      	cbnz	r2, 8004d44 <_malloc_r+0xdc>
 8004cea:	f8c8 7000 	str.w	r7, [r8]
 8004cee:	e00f      	b.n	8004d10 <_malloc_r+0xa8>
 8004cf0:	6822      	ldr	r2, [r4, #0]
 8004cf2:	1b52      	subs	r2, r2, r5
 8004cf4:	d420      	bmi.n	8004d38 <_malloc_r+0xd0>
 8004cf6:	2a0b      	cmp	r2, #11
 8004cf8:	d917      	bls.n	8004d2a <_malloc_r+0xc2>
 8004cfa:	1961      	adds	r1, r4, r5
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	6025      	str	r5, [r4, #0]
 8004d00:	bf18      	it	ne
 8004d02:	6059      	strne	r1, [r3, #4]
 8004d04:	6863      	ldr	r3, [r4, #4]
 8004d06:	bf08      	it	eq
 8004d08:	f8c8 1000 	streq.w	r1, [r8]
 8004d0c:	5162      	str	r2, [r4, r5]
 8004d0e:	604b      	str	r3, [r1, #4]
 8004d10:	4630      	mov	r0, r6
 8004d12:	f000 f82f 	bl	8004d74 <__malloc_unlock>
 8004d16:	f104 000b 	add.w	r0, r4, #11
 8004d1a:	1d23      	adds	r3, r4, #4
 8004d1c:	f020 0007 	bic.w	r0, r0, #7
 8004d20:	1ac2      	subs	r2, r0, r3
 8004d22:	bf1c      	itt	ne
 8004d24:	1a1b      	subne	r3, r3, r0
 8004d26:	50a3      	strne	r3, [r4, r2]
 8004d28:	e7af      	b.n	8004c8a <_malloc_r+0x22>
 8004d2a:	6862      	ldr	r2, [r4, #4]
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	bf0c      	ite	eq
 8004d30:	f8c8 2000 	streq.w	r2, [r8]
 8004d34:	605a      	strne	r2, [r3, #4]
 8004d36:	e7eb      	b.n	8004d10 <_malloc_r+0xa8>
 8004d38:	4623      	mov	r3, r4
 8004d3a:	6864      	ldr	r4, [r4, #4]
 8004d3c:	e7ae      	b.n	8004c9c <_malloc_r+0x34>
 8004d3e:	463c      	mov	r4, r7
 8004d40:	687f      	ldr	r7, [r7, #4]
 8004d42:	e7b6      	b.n	8004cb2 <_malloc_r+0x4a>
 8004d44:	461a      	mov	r2, r3
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	d1fb      	bne.n	8004d44 <_malloc_r+0xdc>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	6053      	str	r3, [r2, #4]
 8004d50:	e7de      	b.n	8004d10 <_malloc_r+0xa8>
 8004d52:	230c      	movs	r3, #12
 8004d54:	4630      	mov	r0, r6
 8004d56:	6033      	str	r3, [r6, #0]
 8004d58:	f000 f80c 	bl	8004d74 <__malloc_unlock>
 8004d5c:	e794      	b.n	8004c88 <_malloc_r+0x20>
 8004d5e:	6005      	str	r5, [r0, #0]
 8004d60:	e7d6      	b.n	8004d10 <_malloc_r+0xa8>
 8004d62:	bf00      	nop
 8004d64:	20000740 	.word	0x20000740

08004d68 <__malloc_lock>:
 8004d68:	4801      	ldr	r0, [pc, #4]	@ (8004d70 <__malloc_lock+0x8>)
 8004d6a:	f7ff bf03 	b.w	8004b74 <__retarget_lock_acquire_recursive>
 8004d6e:	bf00      	nop
 8004d70:	20000738 	.word	0x20000738

08004d74 <__malloc_unlock>:
 8004d74:	4801      	ldr	r0, [pc, #4]	@ (8004d7c <__malloc_unlock+0x8>)
 8004d76:	f7ff befe 	b.w	8004b76 <__retarget_lock_release_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	20000738 	.word	0x20000738

08004d80 <__ssputs_r>:
 8004d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d84:	461f      	mov	r7, r3
 8004d86:	688e      	ldr	r6, [r1, #8]
 8004d88:	4682      	mov	sl, r0
 8004d8a:	42be      	cmp	r6, r7
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	4690      	mov	r8, r2
 8004d90:	680b      	ldr	r3, [r1, #0]
 8004d92:	d82d      	bhi.n	8004df0 <__ssputs_r+0x70>
 8004d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d9c:	d026      	beq.n	8004dec <__ssputs_r+0x6c>
 8004d9e:	6965      	ldr	r5, [r4, #20]
 8004da0:	6909      	ldr	r1, [r1, #16]
 8004da2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004da6:	eba3 0901 	sub.w	r9, r3, r1
 8004daa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dae:	1c7b      	adds	r3, r7, #1
 8004db0:	444b      	add	r3, r9
 8004db2:	106d      	asrs	r5, r5, #1
 8004db4:	429d      	cmp	r5, r3
 8004db6:	bf38      	it	cc
 8004db8:	461d      	movcc	r5, r3
 8004dba:	0553      	lsls	r3, r2, #21
 8004dbc:	d527      	bpl.n	8004e0e <__ssputs_r+0x8e>
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	f7ff ff52 	bl	8004c68 <_malloc_r>
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	b360      	cbz	r0, 8004e22 <__ssputs_r+0xa2>
 8004dc8:	464a      	mov	r2, r9
 8004dca:	6921      	ldr	r1, [r4, #16]
 8004dcc:	f7ff fed4 	bl	8004b78 <memcpy>
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dda:	81a3      	strh	r3, [r4, #12]
 8004ddc:	6126      	str	r6, [r4, #16]
 8004dde:	444e      	add	r6, r9
 8004de0:	6026      	str	r6, [r4, #0]
 8004de2:	463e      	mov	r6, r7
 8004de4:	6165      	str	r5, [r4, #20]
 8004de6:	eba5 0509 	sub.w	r5, r5, r9
 8004dea:	60a5      	str	r5, [r4, #8]
 8004dec:	42be      	cmp	r6, r7
 8004dee:	d900      	bls.n	8004df2 <__ssputs_r+0x72>
 8004df0:	463e      	mov	r6, r7
 8004df2:	4632      	mov	r2, r6
 8004df4:	4641      	mov	r1, r8
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	f000 faac 	bl	8005354 <memmove>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	68a3      	ldr	r3, [r4, #8]
 8004e00:	1b9b      	subs	r3, r3, r6
 8004e02:	60a3      	str	r3, [r4, #8]
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	4433      	add	r3, r6
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0e:	462a      	mov	r2, r5
 8004e10:	f000 fad8 	bl	80053c4 <_realloc_r>
 8004e14:	4606      	mov	r6, r0
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d1e0      	bne.n	8004ddc <__ssputs_r+0x5c>
 8004e1a:	4650      	mov	r0, sl
 8004e1c:	6921      	ldr	r1, [r4, #16]
 8004e1e:	f7ff feb9 	bl	8004b94 <_free_r>
 8004e22:	230c      	movs	r3, #12
 8004e24:	f8ca 3000 	str.w	r3, [sl]
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	e7e9      	b.n	8004e0a <__ssputs_r+0x8a>
	...

08004e38 <_svfiprintf_r>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	4698      	mov	r8, r3
 8004e3e:	898b      	ldrh	r3, [r1, #12]
 8004e40:	4607      	mov	r7, r0
 8004e42:	061b      	lsls	r3, r3, #24
 8004e44:	460d      	mov	r5, r1
 8004e46:	4614      	mov	r4, r2
 8004e48:	b09d      	sub	sp, #116	@ 0x74
 8004e4a:	d510      	bpl.n	8004e6e <_svfiprintf_r+0x36>
 8004e4c:	690b      	ldr	r3, [r1, #16]
 8004e4e:	b973      	cbnz	r3, 8004e6e <_svfiprintf_r+0x36>
 8004e50:	2140      	movs	r1, #64	@ 0x40
 8004e52:	f7ff ff09 	bl	8004c68 <_malloc_r>
 8004e56:	6028      	str	r0, [r5, #0]
 8004e58:	6128      	str	r0, [r5, #16]
 8004e5a:	b930      	cbnz	r0, 8004e6a <_svfiprintf_r+0x32>
 8004e5c:	230c      	movs	r3, #12
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	b01d      	add	sp, #116	@ 0x74
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	2340      	movs	r3, #64	@ 0x40
 8004e6c:	616b      	str	r3, [r5, #20]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e72:	2320      	movs	r3, #32
 8004e74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e78:	2330      	movs	r3, #48	@ 0x30
 8004e7a:	f04f 0901 	mov.w	r9, #1
 8004e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e82:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800501c <_svfiprintf_r+0x1e4>
 8004e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	469a      	mov	sl, r3
 8004e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e92:	b10a      	cbz	r2, 8004e98 <_svfiprintf_r+0x60>
 8004e94:	2a25      	cmp	r2, #37	@ 0x25
 8004e96:	d1f9      	bne.n	8004e8c <_svfiprintf_r+0x54>
 8004e98:	ebba 0b04 	subs.w	fp, sl, r4
 8004e9c:	d00b      	beq.n	8004eb6 <_svfiprintf_r+0x7e>
 8004e9e:	465b      	mov	r3, fp
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	f7ff ff6b 	bl	8004d80 <__ssputs_r>
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f000 80a7 	beq.w	8004ffe <_svfiprintf_r+0x1c6>
 8004eb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004eb2:	445a      	add	r2, fp
 8004eb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 809f 	beq.w	8004ffe <_svfiprintf_r+0x1c6>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eca:	f10a 0a01 	add.w	sl, sl, #1
 8004ece:	9304      	str	r3, [sp, #16]
 8004ed0:	9307      	str	r3, [sp, #28]
 8004ed2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ed6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ed8:	4654      	mov	r4, sl
 8004eda:	2205      	movs	r2, #5
 8004edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee0:	484e      	ldr	r0, [pc, #312]	@ (800501c <_svfiprintf_r+0x1e4>)
 8004ee2:	f000 fa61 	bl	80053a8 <memchr>
 8004ee6:	9a04      	ldr	r2, [sp, #16]
 8004ee8:	b9d8      	cbnz	r0, 8004f22 <_svfiprintf_r+0xea>
 8004eea:	06d0      	lsls	r0, r2, #27
 8004eec:	bf44      	itt	mi
 8004eee:	2320      	movmi	r3, #32
 8004ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ef4:	0711      	lsls	r1, r2, #28
 8004ef6:	bf44      	itt	mi
 8004ef8:	232b      	movmi	r3, #43	@ 0x2b
 8004efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004efe:	f89a 3000 	ldrb.w	r3, [sl]
 8004f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f04:	d015      	beq.n	8004f32 <_svfiprintf_r+0xfa>
 8004f06:	4654      	mov	r4, sl
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f04f 0c0a 	mov.w	ip, #10
 8004f0e:	9a07      	ldr	r2, [sp, #28]
 8004f10:	4621      	mov	r1, r4
 8004f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f16:	3b30      	subs	r3, #48	@ 0x30
 8004f18:	2b09      	cmp	r3, #9
 8004f1a:	d94b      	bls.n	8004fb4 <_svfiprintf_r+0x17c>
 8004f1c:	b1b0      	cbz	r0, 8004f4c <_svfiprintf_r+0x114>
 8004f1e:	9207      	str	r2, [sp, #28]
 8004f20:	e014      	b.n	8004f4c <_svfiprintf_r+0x114>
 8004f22:	eba0 0308 	sub.w	r3, r0, r8
 8004f26:	fa09 f303 	lsl.w	r3, r9, r3
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	46a2      	mov	sl, r4
 8004f2e:	9304      	str	r3, [sp, #16]
 8004f30:	e7d2      	b.n	8004ed8 <_svfiprintf_r+0xa0>
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	1d19      	adds	r1, r3, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	9103      	str	r1, [sp, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bfbb      	ittet	lt
 8004f3e:	425b      	neglt	r3, r3
 8004f40:	f042 0202 	orrlt.w	r2, r2, #2
 8004f44:	9307      	strge	r3, [sp, #28]
 8004f46:	9307      	strlt	r3, [sp, #28]
 8004f48:	bfb8      	it	lt
 8004f4a:	9204      	strlt	r2, [sp, #16]
 8004f4c:	7823      	ldrb	r3, [r4, #0]
 8004f4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f50:	d10a      	bne.n	8004f68 <_svfiprintf_r+0x130>
 8004f52:	7863      	ldrb	r3, [r4, #1]
 8004f54:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f56:	d132      	bne.n	8004fbe <_svfiprintf_r+0x186>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	3402      	adds	r4, #2
 8004f5c:	1d1a      	adds	r2, r3, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	9203      	str	r2, [sp, #12]
 8004f62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f66:	9305      	str	r3, [sp, #20]
 8004f68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005020 <_svfiprintf_r+0x1e8>
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	4650      	mov	r0, sl
 8004f70:	7821      	ldrb	r1, [r4, #0]
 8004f72:	f000 fa19 	bl	80053a8 <memchr>
 8004f76:	b138      	cbz	r0, 8004f88 <_svfiprintf_r+0x150>
 8004f78:	2240      	movs	r2, #64	@ 0x40
 8004f7a:	9b04      	ldr	r3, [sp, #16]
 8004f7c:	eba0 000a 	sub.w	r0, r0, sl
 8004f80:	4082      	lsls	r2, r0
 8004f82:	4313      	orrs	r3, r2
 8004f84:	3401      	adds	r4, #1
 8004f86:	9304      	str	r3, [sp, #16]
 8004f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8c:	2206      	movs	r2, #6
 8004f8e:	4825      	ldr	r0, [pc, #148]	@ (8005024 <_svfiprintf_r+0x1ec>)
 8004f90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f94:	f000 fa08 	bl	80053a8 <memchr>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d036      	beq.n	800500a <_svfiprintf_r+0x1d2>
 8004f9c:	4b22      	ldr	r3, [pc, #136]	@ (8005028 <_svfiprintf_r+0x1f0>)
 8004f9e:	bb1b      	cbnz	r3, 8004fe8 <_svfiprintf_r+0x1b0>
 8004fa0:	9b03      	ldr	r3, [sp, #12]
 8004fa2:	3307      	adds	r3, #7
 8004fa4:	f023 0307 	bic.w	r3, r3, #7
 8004fa8:	3308      	adds	r3, #8
 8004faa:	9303      	str	r3, [sp, #12]
 8004fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fae:	4433      	add	r3, r6
 8004fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fb2:	e76a      	b.n	8004e8a <_svfiprintf_r+0x52>
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fbc:	e7a8      	b.n	8004f10 <_svfiprintf_r+0xd8>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f04f 0c0a 	mov.w	ip, #10
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	3401      	adds	r4, #1
 8004fc8:	9305      	str	r3, [sp, #20]
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fd0:	3a30      	subs	r2, #48	@ 0x30
 8004fd2:	2a09      	cmp	r2, #9
 8004fd4:	d903      	bls.n	8004fde <_svfiprintf_r+0x1a6>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0c6      	beq.n	8004f68 <_svfiprintf_r+0x130>
 8004fda:	9105      	str	r1, [sp, #20]
 8004fdc:	e7c4      	b.n	8004f68 <_svfiprintf_r+0x130>
 8004fde:	4604      	mov	r4, r0
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fe6:	e7f0      	b.n	8004fca <_svfiprintf_r+0x192>
 8004fe8:	ab03      	add	r3, sp, #12
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	462a      	mov	r2, r5
 8004fee:	4638      	mov	r0, r7
 8004ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <_svfiprintf_r+0x1f4>)
 8004ff2:	a904      	add	r1, sp, #16
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	1c42      	adds	r2, r0, #1
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	d1d6      	bne.n	8004fac <_svfiprintf_r+0x174>
 8004ffe:	89ab      	ldrh	r3, [r5, #12]
 8005000:	065b      	lsls	r3, r3, #25
 8005002:	f53f af2d 	bmi.w	8004e60 <_svfiprintf_r+0x28>
 8005006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005008:	e72c      	b.n	8004e64 <_svfiprintf_r+0x2c>
 800500a:	ab03      	add	r3, sp, #12
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	462a      	mov	r2, r5
 8005010:	4638      	mov	r0, r7
 8005012:	4b06      	ldr	r3, [pc, #24]	@ (800502c <_svfiprintf_r+0x1f4>)
 8005014:	a904      	add	r1, sp, #16
 8005016:	f000 f87d 	bl	8005114 <_printf_i>
 800501a:	e7ed      	b.n	8004ff8 <_svfiprintf_r+0x1c0>
 800501c:	08005cda 	.word	0x08005cda
 8005020:	08005ce0 	.word	0x08005ce0
 8005024:	08005ce4 	.word	0x08005ce4
 8005028:	00000000 	.word	0x00000000
 800502c:	08004d81 	.word	0x08004d81

08005030 <_printf_common>:
 8005030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005034:	4616      	mov	r6, r2
 8005036:	4698      	mov	r8, r3
 8005038:	688a      	ldr	r2, [r1, #8]
 800503a:	690b      	ldr	r3, [r1, #16]
 800503c:	4607      	mov	r7, r0
 800503e:	4293      	cmp	r3, r2
 8005040:	bfb8      	it	lt
 8005042:	4613      	movlt	r3, r2
 8005044:	6033      	str	r3, [r6, #0]
 8005046:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800504a:	460c      	mov	r4, r1
 800504c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005050:	b10a      	cbz	r2, 8005056 <_printf_common+0x26>
 8005052:	3301      	adds	r3, #1
 8005054:	6033      	str	r3, [r6, #0]
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	0699      	lsls	r1, r3, #26
 800505a:	bf42      	ittt	mi
 800505c:	6833      	ldrmi	r3, [r6, #0]
 800505e:	3302      	addmi	r3, #2
 8005060:	6033      	strmi	r3, [r6, #0]
 8005062:	6825      	ldr	r5, [r4, #0]
 8005064:	f015 0506 	ands.w	r5, r5, #6
 8005068:	d106      	bne.n	8005078 <_printf_common+0x48>
 800506a:	f104 0a19 	add.w	sl, r4, #25
 800506e:	68e3      	ldr	r3, [r4, #12]
 8005070:	6832      	ldr	r2, [r6, #0]
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	42ab      	cmp	r3, r5
 8005076:	dc2b      	bgt.n	80050d0 <_printf_common+0xa0>
 8005078:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800507c:	6822      	ldr	r2, [r4, #0]
 800507e:	3b00      	subs	r3, #0
 8005080:	bf18      	it	ne
 8005082:	2301      	movne	r3, #1
 8005084:	0692      	lsls	r2, r2, #26
 8005086:	d430      	bmi.n	80050ea <_printf_common+0xba>
 8005088:	4641      	mov	r1, r8
 800508a:	4638      	mov	r0, r7
 800508c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005090:	47c8      	blx	r9
 8005092:	3001      	adds	r0, #1
 8005094:	d023      	beq.n	80050de <_printf_common+0xae>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	6922      	ldr	r2, [r4, #16]
 800509a:	f003 0306 	and.w	r3, r3, #6
 800509e:	2b04      	cmp	r3, #4
 80050a0:	bf14      	ite	ne
 80050a2:	2500      	movne	r5, #0
 80050a4:	6833      	ldreq	r3, [r6, #0]
 80050a6:	f04f 0600 	mov.w	r6, #0
 80050aa:	bf08      	it	eq
 80050ac:	68e5      	ldreq	r5, [r4, #12]
 80050ae:	f104 041a 	add.w	r4, r4, #26
 80050b2:	bf08      	it	eq
 80050b4:	1aed      	subeq	r5, r5, r3
 80050b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050ba:	bf08      	it	eq
 80050bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c0:	4293      	cmp	r3, r2
 80050c2:	bfc4      	itt	gt
 80050c4:	1a9b      	subgt	r3, r3, r2
 80050c6:	18ed      	addgt	r5, r5, r3
 80050c8:	42b5      	cmp	r5, r6
 80050ca:	d11a      	bne.n	8005102 <_printf_common+0xd2>
 80050cc:	2000      	movs	r0, #0
 80050ce:	e008      	b.n	80050e2 <_printf_common+0xb2>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4652      	mov	r2, sl
 80050d4:	4641      	mov	r1, r8
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c8      	blx	r9
 80050da:	3001      	adds	r0, #1
 80050dc:	d103      	bne.n	80050e6 <_printf_common+0xb6>
 80050de:	f04f 30ff 	mov.w	r0, #4294967295
 80050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e6:	3501      	adds	r5, #1
 80050e8:	e7c1      	b.n	800506e <_printf_common+0x3e>
 80050ea:	2030      	movs	r0, #48	@ 0x30
 80050ec:	18e1      	adds	r1, r4, r3
 80050ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050f8:	4422      	add	r2, r4
 80050fa:	3302      	adds	r3, #2
 80050fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005100:	e7c2      	b.n	8005088 <_printf_common+0x58>
 8005102:	2301      	movs	r3, #1
 8005104:	4622      	mov	r2, r4
 8005106:	4641      	mov	r1, r8
 8005108:	4638      	mov	r0, r7
 800510a:	47c8      	blx	r9
 800510c:	3001      	adds	r0, #1
 800510e:	d0e6      	beq.n	80050de <_printf_common+0xae>
 8005110:	3601      	adds	r6, #1
 8005112:	e7d9      	b.n	80050c8 <_printf_common+0x98>

08005114 <_printf_i>:
 8005114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	7e0f      	ldrb	r7, [r1, #24]
 800511a:	4691      	mov	r9, r2
 800511c:	2f78      	cmp	r7, #120	@ 0x78
 800511e:	4680      	mov	r8, r0
 8005120:	460c      	mov	r4, r1
 8005122:	469a      	mov	sl, r3
 8005124:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800512a:	d807      	bhi.n	800513c <_printf_i+0x28>
 800512c:	2f62      	cmp	r7, #98	@ 0x62
 800512e:	d80a      	bhi.n	8005146 <_printf_i+0x32>
 8005130:	2f00      	cmp	r7, #0
 8005132:	f000 80d3 	beq.w	80052dc <_printf_i+0x1c8>
 8005136:	2f58      	cmp	r7, #88	@ 0x58
 8005138:	f000 80ba 	beq.w	80052b0 <_printf_i+0x19c>
 800513c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005144:	e03a      	b.n	80051bc <_printf_i+0xa8>
 8005146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800514a:	2b15      	cmp	r3, #21
 800514c:	d8f6      	bhi.n	800513c <_printf_i+0x28>
 800514e:	a101      	add	r1, pc, #4	@ (adr r1, 8005154 <_printf_i+0x40>)
 8005150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005154:	080051ad 	.word	0x080051ad
 8005158:	080051c1 	.word	0x080051c1
 800515c:	0800513d 	.word	0x0800513d
 8005160:	0800513d 	.word	0x0800513d
 8005164:	0800513d 	.word	0x0800513d
 8005168:	0800513d 	.word	0x0800513d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800513d 	.word	0x0800513d
 8005174:	0800513d 	.word	0x0800513d
 8005178:	0800513d 	.word	0x0800513d
 800517c:	0800513d 	.word	0x0800513d
 8005180:	080052c3 	.word	0x080052c3
 8005184:	080051eb 	.word	0x080051eb
 8005188:	0800527d 	.word	0x0800527d
 800518c:	0800513d 	.word	0x0800513d
 8005190:	0800513d 	.word	0x0800513d
 8005194:	080052e5 	.word	0x080052e5
 8005198:	0800513d 	.word	0x0800513d
 800519c:	080051eb 	.word	0x080051eb
 80051a0:	0800513d 	.word	0x0800513d
 80051a4:	0800513d 	.word	0x0800513d
 80051a8:	08005285 	.word	0x08005285
 80051ac:	6833      	ldr	r3, [r6, #0]
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6032      	str	r2, [r6, #0]
 80051b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051bc:	2301      	movs	r3, #1
 80051be:	e09e      	b.n	80052fe <_printf_i+0x1ea>
 80051c0:	6833      	ldr	r3, [r6, #0]
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	1d19      	adds	r1, r3, #4
 80051c6:	6031      	str	r1, [r6, #0]
 80051c8:	0606      	lsls	r6, r0, #24
 80051ca:	d501      	bpl.n	80051d0 <_printf_i+0xbc>
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	e003      	b.n	80051d8 <_printf_i+0xc4>
 80051d0:	0645      	lsls	r5, r0, #25
 80051d2:	d5fb      	bpl.n	80051cc <_printf_i+0xb8>
 80051d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051d8:	2d00      	cmp	r5, #0
 80051da:	da03      	bge.n	80051e4 <_printf_i+0xd0>
 80051dc:	232d      	movs	r3, #45	@ 0x2d
 80051de:	426d      	negs	r5, r5
 80051e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e4:	230a      	movs	r3, #10
 80051e6:	4859      	ldr	r0, [pc, #356]	@ (800534c <_printf_i+0x238>)
 80051e8:	e011      	b.n	800520e <_printf_i+0xfa>
 80051ea:	6821      	ldr	r1, [r4, #0]
 80051ec:	6833      	ldr	r3, [r6, #0]
 80051ee:	0608      	lsls	r0, r1, #24
 80051f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80051f4:	d402      	bmi.n	80051fc <_printf_i+0xe8>
 80051f6:	0649      	lsls	r1, r1, #25
 80051f8:	bf48      	it	mi
 80051fa:	b2ad      	uxthmi	r5, r5
 80051fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80051fe:	6033      	str	r3, [r6, #0]
 8005200:	bf14      	ite	ne
 8005202:	230a      	movne	r3, #10
 8005204:	2308      	moveq	r3, #8
 8005206:	4851      	ldr	r0, [pc, #324]	@ (800534c <_printf_i+0x238>)
 8005208:	2100      	movs	r1, #0
 800520a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800520e:	6866      	ldr	r6, [r4, #4]
 8005210:	2e00      	cmp	r6, #0
 8005212:	bfa8      	it	ge
 8005214:	6821      	ldrge	r1, [r4, #0]
 8005216:	60a6      	str	r6, [r4, #8]
 8005218:	bfa4      	itt	ge
 800521a:	f021 0104 	bicge.w	r1, r1, #4
 800521e:	6021      	strge	r1, [r4, #0]
 8005220:	b90d      	cbnz	r5, 8005226 <_printf_i+0x112>
 8005222:	2e00      	cmp	r6, #0
 8005224:	d04b      	beq.n	80052be <_printf_i+0x1aa>
 8005226:	4616      	mov	r6, r2
 8005228:	fbb5 f1f3 	udiv	r1, r5, r3
 800522c:	fb03 5711 	mls	r7, r3, r1, r5
 8005230:	5dc7      	ldrb	r7, [r0, r7]
 8005232:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005236:	462f      	mov	r7, r5
 8005238:	42bb      	cmp	r3, r7
 800523a:	460d      	mov	r5, r1
 800523c:	d9f4      	bls.n	8005228 <_printf_i+0x114>
 800523e:	2b08      	cmp	r3, #8
 8005240:	d10b      	bne.n	800525a <_printf_i+0x146>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	07df      	lsls	r7, r3, #31
 8005246:	d508      	bpl.n	800525a <_printf_i+0x146>
 8005248:	6923      	ldr	r3, [r4, #16]
 800524a:	6861      	ldr	r1, [r4, #4]
 800524c:	4299      	cmp	r1, r3
 800524e:	bfde      	ittt	le
 8005250:	2330      	movle	r3, #48	@ 0x30
 8005252:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005256:	f106 36ff 	addle.w	r6, r6, #4294967295
 800525a:	1b92      	subs	r2, r2, r6
 800525c:	6122      	str	r2, [r4, #16]
 800525e:	464b      	mov	r3, r9
 8005260:	4621      	mov	r1, r4
 8005262:	4640      	mov	r0, r8
 8005264:	f8cd a000 	str.w	sl, [sp]
 8005268:	aa03      	add	r2, sp, #12
 800526a:	f7ff fee1 	bl	8005030 <_printf_common>
 800526e:	3001      	adds	r0, #1
 8005270:	d14a      	bne.n	8005308 <_printf_i+0x1f4>
 8005272:	f04f 30ff 	mov.w	r0, #4294967295
 8005276:	b004      	add	sp, #16
 8005278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	f043 0320 	orr.w	r3, r3, #32
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	2778      	movs	r7, #120	@ 0x78
 8005286:	4832      	ldr	r0, [pc, #200]	@ (8005350 <_printf_i+0x23c>)
 8005288:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	6831      	ldr	r1, [r6, #0]
 8005290:	061f      	lsls	r7, r3, #24
 8005292:	f851 5b04 	ldr.w	r5, [r1], #4
 8005296:	d402      	bmi.n	800529e <_printf_i+0x18a>
 8005298:	065f      	lsls	r7, r3, #25
 800529a:	bf48      	it	mi
 800529c:	b2ad      	uxthmi	r5, r5
 800529e:	6031      	str	r1, [r6, #0]
 80052a0:	07d9      	lsls	r1, r3, #31
 80052a2:	bf44      	itt	mi
 80052a4:	f043 0320 	orrmi.w	r3, r3, #32
 80052a8:	6023      	strmi	r3, [r4, #0]
 80052aa:	b11d      	cbz	r5, 80052b4 <_printf_i+0x1a0>
 80052ac:	2310      	movs	r3, #16
 80052ae:	e7ab      	b.n	8005208 <_printf_i+0xf4>
 80052b0:	4826      	ldr	r0, [pc, #152]	@ (800534c <_printf_i+0x238>)
 80052b2:	e7e9      	b.n	8005288 <_printf_i+0x174>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	f023 0320 	bic.w	r3, r3, #32
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	e7f6      	b.n	80052ac <_printf_i+0x198>
 80052be:	4616      	mov	r6, r2
 80052c0:	e7bd      	b.n	800523e <_printf_i+0x12a>
 80052c2:	6833      	ldr	r3, [r6, #0]
 80052c4:	6825      	ldr	r5, [r4, #0]
 80052c6:	1d18      	adds	r0, r3, #4
 80052c8:	6961      	ldr	r1, [r4, #20]
 80052ca:	6030      	str	r0, [r6, #0]
 80052cc:	062e      	lsls	r6, r5, #24
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	d501      	bpl.n	80052d6 <_printf_i+0x1c2>
 80052d2:	6019      	str	r1, [r3, #0]
 80052d4:	e002      	b.n	80052dc <_printf_i+0x1c8>
 80052d6:	0668      	lsls	r0, r5, #25
 80052d8:	d5fb      	bpl.n	80052d2 <_printf_i+0x1be>
 80052da:	8019      	strh	r1, [r3, #0]
 80052dc:	2300      	movs	r3, #0
 80052de:	4616      	mov	r6, r2
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	e7bc      	b.n	800525e <_printf_i+0x14a>
 80052e4:	6833      	ldr	r3, [r6, #0]
 80052e6:	2100      	movs	r1, #0
 80052e8:	1d1a      	adds	r2, r3, #4
 80052ea:	6032      	str	r2, [r6, #0]
 80052ec:	681e      	ldr	r6, [r3, #0]
 80052ee:	6862      	ldr	r2, [r4, #4]
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 f859 	bl	80053a8 <memchr>
 80052f6:	b108      	cbz	r0, 80052fc <_printf_i+0x1e8>
 80052f8:	1b80      	subs	r0, r0, r6
 80052fa:	6060      	str	r0, [r4, #4]
 80052fc:	6863      	ldr	r3, [r4, #4]
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	2300      	movs	r3, #0
 8005302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005306:	e7aa      	b.n	800525e <_printf_i+0x14a>
 8005308:	4632      	mov	r2, r6
 800530a:	4649      	mov	r1, r9
 800530c:	4640      	mov	r0, r8
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	47d0      	blx	sl
 8005312:	3001      	adds	r0, #1
 8005314:	d0ad      	beq.n	8005272 <_printf_i+0x15e>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	079b      	lsls	r3, r3, #30
 800531a:	d413      	bmi.n	8005344 <_printf_i+0x230>
 800531c:	68e0      	ldr	r0, [r4, #12]
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	4298      	cmp	r0, r3
 8005322:	bfb8      	it	lt
 8005324:	4618      	movlt	r0, r3
 8005326:	e7a6      	b.n	8005276 <_printf_i+0x162>
 8005328:	2301      	movs	r3, #1
 800532a:	4632      	mov	r2, r6
 800532c:	4649      	mov	r1, r9
 800532e:	4640      	mov	r0, r8
 8005330:	47d0      	blx	sl
 8005332:	3001      	adds	r0, #1
 8005334:	d09d      	beq.n	8005272 <_printf_i+0x15e>
 8005336:	3501      	adds	r5, #1
 8005338:	68e3      	ldr	r3, [r4, #12]
 800533a:	9903      	ldr	r1, [sp, #12]
 800533c:	1a5b      	subs	r3, r3, r1
 800533e:	42ab      	cmp	r3, r5
 8005340:	dcf2      	bgt.n	8005328 <_printf_i+0x214>
 8005342:	e7eb      	b.n	800531c <_printf_i+0x208>
 8005344:	2500      	movs	r5, #0
 8005346:	f104 0619 	add.w	r6, r4, #25
 800534a:	e7f5      	b.n	8005338 <_printf_i+0x224>
 800534c:	08005ceb 	.word	0x08005ceb
 8005350:	08005cfc 	.word	0x08005cfc

08005354 <memmove>:
 8005354:	4288      	cmp	r0, r1
 8005356:	b510      	push	{r4, lr}
 8005358:	eb01 0402 	add.w	r4, r1, r2
 800535c:	d902      	bls.n	8005364 <memmove+0x10>
 800535e:	4284      	cmp	r4, r0
 8005360:	4623      	mov	r3, r4
 8005362:	d807      	bhi.n	8005374 <memmove+0x20>
 8005364:	1e43      	subs	r3, r0, #1
 8005366:	42a1      	cmp	r1, r4
 8005368:	d008      	beq.n	800537c <memmove+0x28>
 800536a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800536e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005372:	e7f8      	b.n	8005366 <memmove+0x12>
 8005374:	4601      	mov	r1, r0
 8005376:	4402      	add	r2, r0
 8005378:	428a      	cmp	r2, r1
 800537a:	d100      	bne.n	800537e <memmove+0x2a>
 800537c:	bd10      	pop	{r4, pc}
 800537e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005386:	e7f7      	b.n	8005378 <memmove+0x24>

08005388 <_sbrk_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	2300      	movs	r3, #0
 800538c:	4d05      	ldr	r5, [pc, #20]	@ (80053a4 <_sbrk_r+0x1c>)
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fc f8aa 	bl	80014ec <_sbrk>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_sbrk_r+0x1a>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_sbrk_r+0x1a>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	20000734 	.word	0x20000734

080053a8 <memchr>:
 80053a8:	4603      	mov	r3, r0
 80053aa:	b510      	push	{r4, lr}
 80053ac:	b2c9      	uxtb	r1, r1
 80053ae:	4402      	add	r2, r0
 80053b0:	4293      	cmp	r3, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	d101      	bne.n	80053ba <memchr+0x12>
 80053b6:	2000      	movs	r0, #0
 80053b8:	e003      	b.n	80053c2 <memchr+0x1a>
 80053ba:	7804      	ldrb	r4, [r0, #0]
 80053bc:	3301      	adds	r3, #1
 80053be:	428c      	cmp	r4, r1
 80053c0:	d1f6      	bne.n	80053b0 <memchr+0x8>
 80053c2:	bd10      	pop	{r4, pc}

080053c4 <_realloc_r>:
 80053c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c8:	4680      	mov	r8, r0
 80053ca:	4615      	mov	r5, r2
 80053cc:	460c      	mov	r4, r1
 80053ce:	b921      	cbnz	r1, 80053da <_realloc_r+0x16>
 80053d0:	4611      	mov	r1, r2
 80053d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053d6:	f7ff bc47 	b.w	8004c68 <_malloc_r>
 80053da:	b92a      	cbnz	r2, 80053e8 <_realloc_r+0x24>
 80053dc:	f7ff fbda 	bl	8004b94 <_free_r>
 80053e0:	2400      	movs	r4, #0
 80053e2:	4620      	mov	r0, r4
 80053e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e8:	f000 f81a 	bl	8005420 <_malloc_usable_size_r>
 80053ec:	4285      	cmp	r5, r0
 80053ee:	4606      	mov	r6, r0
 80053f0:	d802      	bhi.n	80053f8 <_realloc_r+0x34>
 80053f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80053f6:	d8f4      	bhi.n	80053e2 <_realloc_r+0x1e>
 80053f8:	4629      	mov	r1, r5
 80053fa:	4640      	mov	r0, r8
 80053fc:	f7ff fc34 	bl	8004c68 <_malloc_r>
 8005400:	4607      	mov	r7, r0
 8005402:	2800      	cmp	r0, #0
 8005404:	d0ec      	beq.n	80053e0 <_realloc_r+0x1c>
 8005406:	42b5      	cmp	r5, r6
 8005408:	462a      	mov	r2, r5
 800540a:	4621      	mov	r1, r4
 800540c:	bf28      	it	cs
 800540e:	4632      	movcs	r2, r6
 8005410:	f7ff fbb2 	bl	8004b78 <memcpy>
 8005414:	4621      	mov	r1, r4
 8005416:	4640      	mov	r0, r8
 8005418:	f7ff fbbc 	bl	8004b94 <_free_r>
 800541c:	463c      	mov	r4, r7
 800541e:	e7e0      	b.n	80053e2 <_realloc_r+0x1e>

08005420 <_malloc_usable_size_r>:
 8005420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005424:	1f18      	subs	r0, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	bfbc      	itt	lt
 800542a:	580b      	ldrlt	r3, [r1, r0]
 800542c:	18c0      	addlt	r0, r0, r3
 800542e:	4770      	bx	lr

08005430 <_init>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	bf00      	nop
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr

0800543c <_fini>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr
