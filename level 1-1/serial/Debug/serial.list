
serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a1c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b28  08002b28  00003b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b54  08002b54  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b54  08002b54  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b54  08002b54  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b54  08002b54  00003b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b58  08002b58  00003b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b5c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08002b68  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002b68  00004110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007357  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015da  00000000  00000000  0000b38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0000c968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000510  00000000  00000000  0000d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f6b  00000000  00000000  0000d518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081b2  00000000  00000000  00023483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e586  00000000  00000000  0002b635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9bbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000199c  00000000  00000000  000a9c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ab59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b10 	.word	0x08002b10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b10 	.word	0x08002b10

0800014c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit_DMA(&huart2, receiveData, 2);
 8000154:	2202      	movs	r2, #2
 8000156:	491a      	ldr	r1, [pc, #104]	@ (80001c0 <HAL_UART_RxCpltCallback+0x74>)
 8000158:	481a      	ldr	r0, [pc, #104]	@ (80001c4 <HAL_UART_RxCpltCallback+0x78>)
 800015a:	f001 fcc5 	bl	8001ae8 <HAL_UART_Transmit_DMA>
	  GPIO_PinState state=GPIO_PIN_SET;
 800015e:	2301      	movs	r3, #1
 8000160:	73fb      	strb	r3, [r7, #15]
	  if(receiveData[1]=='0')
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <HAL_UART_RxCpltCallback+0x74>)
 8000164:	785b      	ldrb	r3, [r3, #1]
 8000166:	2b30      	cmp	r3, #48	@ 0x30
 8000168:	d101      	bne.n	800016e <HAL_UART_RxCpltCallback+0x22>
		  state=GPIO_PIN_RESET;
 800016a:	2300      	movs	r3, #0
 800016c:	73fb      	strb	r3, [r7, #15]
	  if(receiveData[0]=='R')
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <HAL_UART_RxCpltCallback+0x74>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b52      	cmp	r3, #82	@ 0x52
 8000174:	d106      	bne.n	8000184 <HAL_UART_RxCpltCallback+0x38>
		HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin,state);
 8000176:	7bfb      	ldrb	r3, [r7, #15]
 8000178:	461a      	mov	r2, r3
 800017a:	2101      	movs	r1, #1
 800017c:	4812      	ldr	r0, [pc, #72]	@ (80001c8 <HAL_UART_RxCpltCallback+0x7c>)
 800017e:	f001 f83b 	bl	80011f8 <HAL_GPIO_WritePin>
 8000182:	e014      	b.n	80001ae <HAL_UART_RxCpltCallback+0x62>
	  else if(receiveData[0]=='G')
 8000184:	4b0e      	ldr	r3, [pc, #56]	@ (80001c0 <HAL_UART_RxCpltCallback+0x74>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b47      	cmp	r3, #71	@ 0x47
 800018a:	d106      	bne.n	800019a <HAL_UART_RxCpltCallback+0x4e>
		  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin,state);
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	461a      	mov	r2, r3
 8000190:	2180      	movs	r1, #128	@ 0x80
 8000192:	480e      	ldr	r0, [pc, #56]	@ (80001cc <HAL_UART_RxCpltCallback+0x80>)
 8000194:	f001 f830 	bl	80011f8 <HAL_GPIO_WritePin>
 8000198:	e009      	b.n	80001ae <HAL_UART_RxCpltCallback+0x62>
	  else if(receiveData[0]=='B')
 800019a:	4b09      	ldr	r3, [pc, #36]	@ (80001c0 <HAL_UART_RxCpltCallback+0x74>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	2b42      	cmp	r3, #66	@ 0x42
 80001a0:	d105      	bne.n	80001ae <HAL_UART_RxCpltCallback+0x62>
			  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin,state);
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	461a      	mov	r2, r3
 80001a6:	2140      	movs	r1, #64	@ 0x40
 80001a8:	4808      	ldr	r0, [pc, #32]	@ (80001cc <HAL_UART_RxCpltCallback+0x80>)
 80001aa:	f001 f825 	bl	80011f8 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_DMA(&huart2, receiveData, 2);
 80001ae:	2202      	movs	r2, #2
 80001b0:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <HAL_UART_RxCpltCallback+0x74>)
 80001b2:	4804      	ldr	r0, [pc, #16]	@ (80001c4 <HAL_UART_RxCpltCallback+0x78>)
 80001b4:	f001 fd08 	bl	8001bc8 <HAL_UART_Receive_DMA>

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200000f8 	.word	0x200000f8
 80001c4:	20000028 	.word	0x20000028
 80001c8:	40010c00 	.word	0x40010c00
 80001cc:	40010800 	.word	0x40010800

080001d0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	460b      	mov	r3, r1
 80001da:	807b      	strh	r3, [r7, #2]
	if(huart==&huart2)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4a0d      	ldr	r2, [pc, #52]	@ (8000214 <HAL_UARTEx_RxEventCallback+0x44>)
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d112      	bne.n	800020a <HAL_UARTEx_RxEventCallback+0x3a>
	{
		HAL_UART_Transmit_DMA(huart, receiveData, Size);
 80001e4:	887b      	ldrh	r3, [r7, #2]
 80001e6:	461a      	mov	r2, r3
 80001e8:	490b      	ldr	r1, [pc, #44]	@ (8000218 <HAL_UARTEx_RxEventCallback+0x48>)
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f001 fc7c 	bl	8001ae8 <HAL_UART_Transmit_DMA>

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receiveData, sizeof(receiveData));
 80001f0:	2214      	movs	r2, #20
 80001f2:	4909      	ldr	r1, [pc, #36]	@ (8000218 <HAL_UARTEx_RxEventCallback+0x48>)
 80001f4:	4807      	ldr	r0, [pc, #28]	@ (8000214 <HAL_UARTEx_RxEventCallback+0x44>)
 80001f6:	f001 fd0c 	bl	8001c12 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 80001fa:	4b08      	ldr	r3, [pc, #32]	@ (800021c <HAL_UARTEx_RxEventCallback+0x4c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f022 0204 	bic.w	r2, r2, #4
 8000208:	601a      	str	r2, [r3, #0]

	}

}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000028 	.word	0x20000028
 8000218:	200000f8 	.word	0x200000f8
 800021c:	200000b4 	.word	0x200000b4

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa52 	bl	80006cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81c 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8a6 	bl	800037c <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f87e 	bl	8000330 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000234:	f000 f852 	bl	80002dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//HAL_UART_Receive_DMA(&huart2, receiveData, 2);
HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receiveData, sizeof(receiveData));
 8000238:	2214      	movs	r2, #20
 800023a:	4907      	ldr	r1, [pc, #28]	@ (8000258 <main+0x38>)
 800023c:	4807      	ldr	r0, [pc, #28]	@ (800025c <main+0x3c>)
 800023e:	f001 fce8 	bl	8001c12 <HAL_UARTEx_ReceiveToIdle_DMA>
__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8000242:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <main+0x40>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <main+0x40>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f022 0204 	bic.w	r2, r2, #4
 8000250:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000252:	bf00      	nop
 8000254:	e7fd      	b.n	8000252 <main+0x32>
 8000256:	bf00      	nop
 8000258:	200000f8 	.word	0x200000f8
 800025c:	20000028 	.word	0x20000028
 8000260:	200000b4 	.word	0x200000b4

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b090      	sub	sp, #64	@ 0x40
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2228      	movs	r2, #40	@ 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fc20 	bl	8002ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2310      	movs	r3, #16
 8000290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	2300      	movs	r3, #0
 8000294:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	4618      	mov	r0, r3
 800029c:	f000 ffc4 	bl	8001228 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002a6:	f000 f8bb 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fa32 	bl	800172c <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ce:	f000 f8a7 	bl	8000420 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	@ 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002e2:	4a12      	ldr	r2, [pc, #72]	@ (800032c <MX_USART2_UART_Init+0x50>)
 80002e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002e6:	4b10      	ldr	r3, [pc, #64]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 8000302:	220c      	movs	r2, #12
 8000304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000306:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 8000314:	f001 fb98 	bl	8001a48 <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800031e:	f000 f87f 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000028 	.word	0x20000028
 800032c:	40004400 	.word	0x40004400

08000330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000336:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <MX_DMA_Init+0x48>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a0f      	ldr	r2, [pc, #60]	@ (8000378 <MX_DMA_Init+0x48>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b0d      	ldr	r3, [pc, #52]	@ (8000378 <MX_DMA_Init+0x48>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2100      	movs	r1, #0
 8000352:	2010      	movs	r0, #16
 8000354:	f000 faf3 	bl	800093e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000358:	2010      	movs	r0, #16
 800035a:	f000 fb0c 	bl	8000976 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	2011      	movs	r0, #17
 8000364:	f000 faeb 	bl	800093e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000368:	2011      	movs	r0, #17
 800036a:	f000 fb04 	bl	8000976 <HAL_NVIC_EnableIRQ>

}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <MX_GPIO_Init+0x98>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1f      	ldr	r2, [pc, #124]	@ (8000414 <MX_GPIO_Init+0x98>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b1d      	ldr	r3, [pc, #116]	@ (8000414 <MX_GPIO_Init+0x98>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <MX_GPIO_Init+0x98>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a19      	ldr	r2, [pc, #100]	@ (8000414 <MX_GPIO_Init+0x98>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <MX_GPIO_Init+0x98>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_Pin|GREEN_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	21c0      	movs	r1, #192	@ 0xc0
 80003c4:	4814      	ldr	r0, [pc, #80]	@ (8000418 <MX_GPIO_Init+0x9c>)
 80003c6:	f000 ff17 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2101      	movs	r1, #1
 80003ce:	4813      	ldr	r0, [pc, #76]	@ (800041c <MX_GPIO_Init+0xa0>)
 80003d0:	f000 ff12 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_Pin GREEN_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin;
 80003d4:	23c0      	movs	r3, #192	@ 0xc0
 80003d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	2301      	movs	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	2302      	movs	r3, #2
 80003e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e4:	f107 0308 	add.w	r3, r7, #8
 80003e8:	4619      	mov	r1, r3
 80003ea:	480b      	ldr	r0, [pc, #44]	@ (8000418 <MX_GPIO_Init+0x9c>)
 80003ec:	f000 fd80 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_Pin */
  GPIO_InitStruct.Pin = RED_Pin;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 0308 	add.w	r3, r7, #8
 8000404:	4619      	mov	r1, r3
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <MX_GPIO_Init+0xa0>)
 8000408:	f000 fd72 	bl	8000ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040c:	bf00      	nop
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800
 800041c:	40010c00 	.word	0x40010c00

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	@ (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000462:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	@ (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a46      	ldr	r2, [pc, #280]	@ (80005c4 <HAL_UART_MspInit+0x134>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	f040 8084 	bne.w	80005ba <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004b2:	4b45      	ldr	r3, [pc, #276]	@ (80005c8 <HAL_UART_MspInit+0x138>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a44      	ldr	r2, [pc, #272]	@ (80005c8 <HAL_UART_MspInit+0x138>)
 80004b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b42      	ldr	r3, [pc, #264]	@ (80005c8 <HAL_UART_MspInit+0x138>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b3f      	ldr	r3, [pc, #252]	@ (80005c8 <HAL_UART_MspInit+0x138>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a3e      	ldr	r2, [pc, #248]	@ (80005c8 <HAL_UART_MspInit+0x138>)
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b3c      	ldr	r3, [pc, #240]	@ (80005c8 <HAL_UART_MspInit+0x138>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0304 	and.w	r3, r3, #4
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004e2:	2304      	movs	r3, #4
 80004e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ea:	2303      	movs	r3, #3
 80004ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	4835      	ldr	r0, [pc, #212]	@ (80005cc <HAL_UART_MspInit+0x13c>)
 80004f6:	f000 fcfb 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004fa:	2308      	movs	r3, #8
 80004fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	482f      	ldr	r0, [pc, #188]	@ (80005cc <HAL_UART_MspInit+0x13c>)
 800050e:	f000 fcef 	bl	8000ef0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000512:	4b2f      	ldr	r3, [pc, #188]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 8000514:	4a2f      	ldr	r2, [pc, #188]	@ (80005d4 <HAL_UART_MspInit+0x144>)
 8000516:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000518:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 800051a:	2210      	movs	r2, #16
 800051c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800051e:	4b2c      	ldr	r3, [pc, #176]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000524:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800052a:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000530:	4b27      	ldr	r3, [pc, #156]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000536:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800053c:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000542:	4823      	ldr	r0, [pc, #140]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 8000544:	f000 fa32 	bl	80009ac <HAL_DMA_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800054e:	f7ff ff67 	bl	8000420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a1e      	ldr	r2, [pc, #120]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 8000556:	639a      	str	r2, [r3, #56]	@ 0x38
 8000558:	4a1d      	ldr	r2, [pc, #116]	@ (80005d0 <HAL_UART_MspInit+0x140>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800055e:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 8000560:	4a1e      	ldr	r2, [pc, #120]	@ (80005dc <HAL_UART_MspInit+0x14c>)
 8000562:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000564:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800056a:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000570:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 8000572:	2280      	movs	r2, #128	@ 0x80
 8000574:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000576:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800057c:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000582:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000588:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800058e:	4812      	ldr	r0, [pc, #72]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 8000590:	f000 fa0c 	bl	80009ac <HAL_DMA_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800059a:	f7ff ff41 	bl	8000420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 80005a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005a4:	4a0c      	ldr	r2, [pc, #48]	@ (80005d8 <HAL_UART_MspInit+0x148>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	2026      	movs	r0, #38	@ 0x26
 80005b0:	f000 f9c5 	bl	800093e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005b4:	2026      	movs	r0, #38	@ 0x26
 80005b6:	f000 f9de 	bl	8000976 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40004400 	.word	0x40004400
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800
 80005d0:	20000070 	.word	0x20000070
 80005d4:	40020080 	.word	0x40020080
 80005d8:	200000b4 	.word	0x200000b4
 80005dc:	4002006c 	.word	0x4002006c

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <NMI_Handler+0x4>

080005e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <MemManage_Handler+0x4>

080005f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <UsageFault_Handler+0x4>

08000608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000630:	f000 f892 	bl	8000758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <DMA1_Channel6_IRQHandler+0x10>)
 800063e:	f000 fb23 	bl	8000c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000b4 	.word	0x200000b4

0800064c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <DMA1_Channel7_IRQHandler+0x10>)
 8000652:	f000 fb19 	bl	8000c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000070 	.word	0x20000070

08000660 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000664:	4802      	ldr	r0, [pc, #8]	@ (8000670 <USART2_IRQHandler+0x10>)
 8000666:	f001 fb2d 	bl	8001cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028

08000674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000680:	f7ff fff8 	bl	8000674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000686:	490c      	ldr	r1, [pc, #48]	@ (80006b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000688:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a09      	ldr	r2, [pc, #36]	@ (80006c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800069c:	4c09      	ldr	r4, [pc, #36]	@ (80006c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006aa:	f002 fa0d 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ae:	f7ff fdb7 	bl	8000220 <main>
  bx lr
 80006b2:	4770      	bx	lr
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006bc:	08002b5c 	.word	0x08002b5c
  ldr r2, =_sbss
 80006c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c4:	20000110 	.word	0x20000110

080006c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC1_2_IRQHandler>
	...

080006cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <HAL_Init+0x28>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a07      	ldr	r2, [pc, #28]	@ (80006f4 <HAL_Init+0x28>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f923 	bl	8000928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e2:	200f      	movs	r0, #15
 80006e4:	f000 f808 	bl	80006f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e8:	f7ff fea0 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40022000 	.word	0x40022000

080006f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_InitTick+0x54>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <HAL_InitTick+0x58>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f93b 	bl	8000992 <HAL_SYSTICK_Config>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e00e      	b.n	8000744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	d80a      	bhi.n	8000742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072c:	2200      	movs	r2, #0
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f000 f903 	bl	800093e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000738:	4a06      	ldr	r2, [pc, #24]	@ (8000754 <HAL_InitTick+0x5c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <HAL_IncTick+0x1c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <HAL_IncTick+0x20>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4413      	add	r3, r2
 8000768:	4a03      	ldr	r2, [pc, #12]	@ (8000778 <HAL_IncTick+0x20>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	20000008 	.word	0x20000008
 8000778:	2000010c 	.word	0x2000010c

0800077c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;
 8000780:	4b02      	ldr	r3, [pc, #8]	@ (800078c <HAL_GetTick+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	2000010c 	.word	0x2000010c

08000790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c2:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	60d3      	str	r3, [r2, #12]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db0b      	blt.n	800081e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f003 021f 	and.w	r2, r3, #31
 800080c:	4906      	ldr	r1, [pc, #24]	@ (8000828 <__NVIC_EnableIRQ+0x34>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	095b      	lsrs	r3, r3, #5
 8000814:	2001      	movs	r0, #1
 8000816:	fa00 f202 	lsl.w	r2, r0, r2
 800081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	e000e100 	.word	0xe000e100

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	db0a      	blt.n	8000856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	b2da      	uxtb	r2, r3
 8000844:	490c      	ldr	r1, [pc, #48]	@ (8000878 <__NVIC_SetPriority+0x4c>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	0112      	lsls	r2, r2, #4
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	440b      	add	r3, r1
 8000850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000854:	e00a      	b.n	800086c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4908      	ldr	r1, [pc, #32]	@ (800087c <__NVIC_SetPriority+0x50>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	3b04      	subs	r3, #4
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	440b      	add	r3, r1
 800086a:	761a      	strb	r2, [r3, #24]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000e100 	.word	0xe000e100
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	@ 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	f1c3 0307 	rsb	r3, r3, #7
 800089a:	2b04      	cmp	r3, #4
 800089c:	bf28      	it	cs
 800089e:	2304      	movcs	r3, #4
 80008a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3304      	adds	r3, #4
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d902      	bls.n	80008b0 <NVIC_EncodePriority+0x30>
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3b03      	subs	r3, #3
 80008ae:	e000      	b.n	80008b2 <NVIC_EncodePriority+0x32>
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	f04f 32ff 	mov.w	r2, #4294967295
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43da      	mvns	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	401a      	ands	r2, r3
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43d9      	mvns	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	4313      	orrs	r3, r2
         );
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3724      	adds	r7, #36	@ 0x24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008f4:	d301      	bcc.n	80008fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00f      	b.n	800091a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <SysTick_Config+0x40>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000902:	210f      	movs	r1, #15
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f7ff ff90 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <SysTick_Config+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <SysTick_Config+0x40>)
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010

08000928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff2d 	bl	8000790 <__NVIC_SetPriorityGrouping>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000950:	f7ff ff42 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 8000954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	6978      	ldr	r0, [r7, #20]
 800095c:	f7ff ff90 	bl	8000880 <NVIC_EncodePriority>
 8000960:	4602      	mov	r2, r0
 8000962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff5f 	bl	800082c <__NVIC_SetPriority>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff35 	bl	80007f4 <__NVIC_EnableIRQ>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffa2 	bl	80008e4 <SysTick_Config>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e043      	b.n	8000a4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <HAL_DMA_Init+0xa8>)
 80009ca:	4413      	add	r3, r2
 80009cc:	4a22      	ldr	r2, [pc, #136]	@ (8000a58 <HAL_DMA_Init+0xac>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	091b      	lsrs	r3, r3, #4
 80009d4:	009a      	lsls	r2, r3, #2
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a1f      	ldr	r2, [pc, #124]	@ (8000a5c <HAL_DMA_Init+0xb0>)
 80009de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2202      	movs	r2, #2
 80009e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80009f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80009fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	bffdfff8 	.word	0xbffdfff8
 8000a58:	cccccccd 	.word	0xcccccccd
 8000a5c:	40020000 	.word	0x40020000

08000a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d101      	bne.n	8000a80 <HAL_DMA_Start_IT+0x20>
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	e04b      	b.n	8000b18 <HAL_DMA_Start_IT+0xb8>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2201      	movs	r2, #1
 8000a84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d13a      	bne.n	8000b0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2202      	movs	r2, #2
 8000a98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0201 	bic.w	r2, r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 f9eb 	bl	8000e94 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d008      	beq.n	8000ad8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f042 020e 	orr.w	r2, r2, #14
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e00f      	b.n	8000af8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0204 	bic.w	r2, r2, #4
 8000ae6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f042 020a 	orr.w	r2, r2, #10
 8000af6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0201 	orr.w	r2, r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e005      	b.n	8000b16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b12:	2302      	movs	r3, #2
 8000b14:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d008      	beq.n	8000b4a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e020      	b.n	8000b8c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 020e 	bic.w	r2, r2, #14
 8000b58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
	...

08000b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d005      	beq.n	8000bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e051      	b.n	8000c60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 020e 	bic.w	r2, r2, #14
 8000bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0201 	bic.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a22      	ldr	r2, [pc, #136]	@ (8000c6c <HAL_DMA_Abort_IT+0xd4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d029      	beq.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a21      	ldr	r2, [pc, #132]	@ (8000c70 <HAL_DMA_Abort_IT+0xd8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d022      	beq.n	8000c36 <HAL_DMA_Abort_IT+0x9e>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c74 <HAL_DMA_Abort_IT+0xdc>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d01a      	beq.n	8000c30 <HAL_DMA_Abort_IT+0x98>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c78 <HAL_DMA_Abort_IT+0xe0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d012      	beq.n	8000c2a <HAL_DMA_Abort_IT+0x92>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <HAL_DMA_Abort_IT+0xe4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00a      	beq.n	8000c24 <HAL_DMA_Abort_IT+0x8c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1b      	ldr	r2, [pc, #108]	@ (8000c80 <HAL_DMA_Abort_IT+0xe8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d102      	bne.n	8000c1e <HAL_DMA_Abort_IT+0x86>
 8000c18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c1c:	e00e      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c22:	e00b      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c28:	e008      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2e:	e005      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c34:	e002      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c36:	2310      	movs	r3, #16
 8000c38:	e000      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	4a11      	ldr	r2, [pc, #68]	@ (8000c84 <HAL_DMA_Abort_IT+0xec>)
 8000c3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	4798      	blx	r3
    } 
  }
  return status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40020008 	.word	0x40020008
 8000c70:	4002001c 	.word	0x4002001c
 8000c74:	40020030 	.word	0x40020030
 8000c78:	40020044 	.word	0x40020044
 8000c7c:	40020058 	.word	0x40020058
 8000c80:	4002006c 	.word	0x4002006c
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d04f      	beq.n	8000d50 <HAL_DMA_IRQHandler+0xc8>
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d04a      	beq.n	8000d50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0320 	and.w	r3, r3, #32
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d107      	bne.n	8000cd8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0204 	bic.w	r2, r2, #4
 8000cd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a66      	ldr	r2, [pc, #408]	@ (8000e78 <HAL_DMA_IRQHandler+0x1f0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d029      	beq.n	8000d36 <HAL_DMA_IRQHandler+0xae>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a65      	ldr	r2, [pc, #404]	@ (8000e7c <HAL_DMA_IRQHandler+0x1f4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d022      	beq.n	8000d32 <HAL_DMA_IRQHandler+0xaa>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a63      	ldr	r2, [pc, #396]	@ (8000e80 <HAL_DMA_IRQHandler+0x1f8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d01a      	beq.n	8000d2c <HAL_DMA_IRQHandler+0xa4>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a62      	ldr	r2, [pc, #392]	@ (8000e84 <HAL_DMA_IRQHandler+0x1fc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d012      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x9e>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a60      	ldr	r2, [pc, #384]	@ (8000e88 <HAL_DMA_IRQHandler+0x200>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00a      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x98>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8000e8c <HAL_DMA_IRQHandler+0x204>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d102      	bne.n	8000d1a <HAL_DMA_IRQHandler+0x92>
 8000d14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d18:	e00e      	b.n	8000d38 <HAL_DMA_IRQHandler+0xb0>
 8000d1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000d1e:	e00b      	b.n	8000d38 <HAL_DMA_IRQHandler+0xb0>
 8000d20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000d24:	e008      	b.n	8000d38 <HAL_DMA_IRQHandler+0xb0>
 8000d26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d2a:	e005      	b.n	8000d38 <HAL_DMA_IRQHandler+0xb0>
 8000d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d30:	e002      	b.n	8000d38 <HAL_DMA_IRQHandler+0xb0>
 8000d32:	2340      	movs	r3, #64	@ 0x40
 8000d34:	e000      	b.n	8000d38 <HAL_DMA_IRQHandler+0xb0>
 8000d36:	2304      	movs	r3, #4
 8000d38:	4a55      	ldr	r2, [pc, #340]	@ (8000e90 <HAL_DMA_IRQHandler+0x208>)
 8000d3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 8094 	beq.w	8000e6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d4e:	e08e      	b.n	8000e6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d54:	2202      	movs	r2, #2
 8000d56:	409a      	lsls	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d056      	beq.n	8000e0e <HAL_DMA_IRQHandler+0x186>
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d051      	beq.n	8000e0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10b      	bne.n	8000d90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 020a 	bic.w	r2, r2, #10
 8000d86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a38      	ldr	r2, [pc, #224]	@ (8000e78 <HAL_DMA_IRQHandler+0x1f0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d029      	beq.n	8000dee <HAL_DMA_IRQHandler+0x166>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a37      	ldr	r2, [pc, #220]	@ (8000e7c <HAL_DMA_IRQHandler+0x1f4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d022      	beq.n	8000dea <HAL_DMA_IRQHandler+0x162>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a35      	ldr	r2, [pc, #212]	@ (8000e80 <HAL_DMA_IRQHandler+0x1f8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d01a      	beq.n	8000de4 <HAL_DMA_IRQHandler+0x15c>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a34      	ldr	r2, [pc, #208]	@ (8000e84 <HAL_DMA_IRQHandler+0x1fc>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d012      	beq.n	8000dde <HAL_DMA_IRQHandler+0x156>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a32      	ldr	r2, [pc, #200]	@ (8000e88 <HAL_DMA_IRQHandler+0x200>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d00a      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x150>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <HAL_DMA_IRQHandler+0x204>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d102      	bne.n	8000dd2 <HAL_DMA_IRQHandler+0x14a>
 8000dcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000dd0:	e00e      	b.n	8000df0 <HAL_DMA_IRQHandler+0x168>
 8000dd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dd6:	e00b      	b.n	8000df0 <HAL_DMA_IRQHandler+0x168>
 8000dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ddc:	e008      	b.n	8000df0 <HAL_DMA_IRQHandler+0x168>
 8000dde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de2:	e005      	b.n	8000df0 <HAL_DMA_IRQHandler+0x168>
 8000de4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000de8:	e002      	b.n	8000df0 <HAL_DMA_IRQHandler+0x168>
 8000dea:	2320      	movs	r3, #32
 8000dec:	e000      	b.n	8000df0 <HAL_DMA_IRQHandler+0x168>
 8000dee:	2302      	movs	r3, #2
 8000df0:	4a27      	ldr	r2, [pc, #156]	@ (8000e90 <HAL_DMA_IRQHandler+0x208>)
 8000df2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d034      	beq.n	8000e6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e0c:	e02f      	b.n	8000e6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	2208      	movs	r2, #8
 8000e14:	409a      	lsls	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d028      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x1e8>
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d023      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 020e 	bic.w	r2, r2, #14
 8000e36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	4798      	blx	r3
    }
  }
  return;
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
}
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40020008 	.word	0x40020008
 8000e7c:	4002001c 	.word	0x4002001c
 8000e80:	40020030 	.word	0x40020030
 8000e84:	40020044 	.word	0x40020044
 8000e88:	40020058 	.word	0x40020058
 8000e8c:	4002006c 	.word	0x4002006c
 8000e90:	40020000 	.word	0x40020000

08000e94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eaa:	2101      	movs	r1, #1
 8000eac:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b10      	cmp	r3, #16
 8000ec0:	d108      	bne.n	8000ed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ed2:	e007      	b.n	8000ee4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	60da      	str	r2, [r3, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b08b      	sub	sp, #44	@ 0x2c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e169      	b.n	80011d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f04:	2201      	movs	r2, #1
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8158 	bne.w	80011d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a9a      	ldr	r2, [pc, #616]	@ (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d05e      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f2c:	4a98      	ldr	r2, [pc, #608]	@ (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d875      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f32:	4a98      	ldr	r2, [pc, #608]	@ (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d058      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f38:	4a96      	ldr	r2, [pc, #600]	@ (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d86f      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f3e:	4a96      	ldr	r2, [pc, #600]	@ (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d052      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f44:	4a94      	ldr	r2, [pc, #592]	@ (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d869      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f4a:	4a94      	ldr	r2, [pc, #592]	@ (800119c <HAL_GPIO_Init+0x2ac>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d04c      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f50:	4a92      	ldr	r2, [pc, #584]	@ (800119c <HAL_GPIO_Init+0x2ac>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d863      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f56:	4a92      	ldr	r2, [pc, #584]	@ (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d046      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f5c:	4a90      	ldr	r2, [pc, #576]	@ (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d85d      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d82a      	bhi.n	8000fbc <HAL_GPIO_Init+0xcc>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d859      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f70 <HAL_GPIO_Init+0x80>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000feb 	.word	0x08000feb
 8000f74:	08000fc5 	.word	0x08000fc5
 8000f78:	08000fd7 	.word	0x08000fd7
 8000f7c:	08001019 	.word	0x08001019
 8000f80:	0800101f 	.word	0x0800101f
 8000f84:	0800101f 	.word	0x0800101f
 8000f88:	0800101f 	.word	0x0800101f
 8000f8c:	0800101f 	.word	0x0800101f
 8000f90:	0800101f 	.word	0x0800101f
 8000f94:	0800101f 	.word	0x0800101f
 8000f98:	0800101f 	.word	0x0800101f
 8000f9c:	0800101f 	.word	0x0800101f
 8000fa0:	0800101f 	.word	0x0800101f
 8000fa4:	0800101f 	.word	0x0800101f
 8000fa8:	0800101f 	.word	0x0800101f
 8000fac:	0800101f 	.word	0x0800101f
 8000fb0:	0800101f 	.word	0x0800101f
 8000fb4:	08000fcd 	.word	0x08000fcd
 8000fb8:	08000fe1 	.word	0x08000fe1
 8000fbc:	4a79      	ldr	r2, [pc, #484]	@ (80011a4 <HAL_GPIO_Init+0x2b4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc2:	e02c      	b.n	800101e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e029      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e024      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e01f      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e01a      	b.n	8001020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e013      	b.n	8001020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001000:	2308      	movs	r3, #8
 8001002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	611a      	str	r2, [r3, #16]
          break;
 800100a:	e009      	b.n	8001020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800100c:	2308      	movs	r3, #8
 800100e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	615a      	str	r2, [r3, #20]
          break;
 8001016:	e003      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x130>
          break;
 800101e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	@ 0xff
 8001024:	d801      	bhi.n	800102a <HAL_GPIO_Init+0x13a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	e001      	b.n	800102e <HAL_GPIO_Init+0x13e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3304      	adds	r3, #4
 800102e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2bff      	cmp	r3, #255	@ 0xff
 8001034:	d802      	bhi.n	800103c <HAL_GPIO_Init+0x14c>
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x152>
 800103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103e:	3b08      	subs	r3, #8
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	210f      	movs	r1, #15
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	401a      	ands	r2, r3
 8001054:	6a39      	ldr	r1, [r7, #32]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	431a      	orrs	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80b1 	beq.w	80011d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001070:	4b4d      	ldr	r3, [pc, #308]	@ (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a4c      	ldr	r2, [pc, #304]	@ (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b4a      	ldr	r3, [pc, #296]	@ (80011a8 <HAL_GPIO_Init+0x2b8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001088:	4a48      	ldr	r2, [pc, #288]	@ (80011ac <HAL_GPIO_Init+0x2bc>)
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a40      	ldr	r2, [pc, #256]	@ (80011b0 <HAL_GPIO_Init+0x2c0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1ec>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3f      	ldr	r2, [pc, #252]	@ (80011b4 <HAL_GPIO_Init+0x2c4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1e8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a3e      	ldr	r2, [pc, #248]	@ (80011b8 <HAL_GPIO_Init+0x2c8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a3d      	ldr	r2, [pc, #244]	@ (80011bc <HAL_GPIO_Init+0x2cc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1e0>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e004      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010dc:	2300      	movs	r3, #0
 80010de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e0:	f002 0203 	and.w	r2, r2, #3
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	4093      	lsls	r3, r2
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ee:	492f      	ldr	r1, [pc, #188]	@ (80011ac <HAL_GPIO_Init+0x2bc>)
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001108:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	492c      	ldr	r1, [pc, #176]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	608b      	str	r3, [r1, #8]
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001116:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	43db      	mvns	r3, r3
 800111e:	4928      	ldr	r1, [pc, #160]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001120:	4013      	ands	r3, r2
 8001122:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001130:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	4922      	ldr	r1, [pc, #136]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	60cb      	str	r3, [r1, #12]
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800113e:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	43db      	mvns	r3, r3
 8001146:	491e      	ldr	r1, [pc, #120]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001148:	4013      	ands	r3, r2
 800114a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	4918      	ldr	r1, [pc, #96]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	43db      	mvns	r3, r3
 800116e:	4914      	ldr	r1, [pc, #80]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001170:	4013      	ands	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	490e      	ldr	r1, [pc, #56]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
 800118c:	e021      	b.n	80011d2 <HAL_GPIO_Init+0x2e2>
 800118e:	bf00      	nop
 8001190:	10320000 	.word	0x10320000
 8001194:	10310000 	.word	0x10310000
 8001198:	10220000 	.word	0x10220000
 800119c:	10210000 	.word	0x10210000
 80011a0:	10120000 	.word	0x10120000
 80011a4:	10110000 	.word	0x10110000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40011400 	.word	0x40011400
 80011c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4909      	ldr	r1, [pc, #36]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	3301      	adds	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f47f ae8e 	bne.w	8000f04 <HAL_GPIO_Init+0x14>
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	372c      	adds	r7, #44	@ 0x2c
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	611a      	str	r2, [r3, #16]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e272      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8087 	beq.w	8001356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001248:	4b92      	ldr	r3, [pc, #584]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b04      	cmp	r3, #4
 8001252:	d00c      	beq.n	800126e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001254:	4b8f      	ldr	r3, [pc, #572]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d112      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
 8001260:	4b8c      	ldr	r3, [pc, #560]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126c:	d10b      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126e:	4b89      	ldr	r3, [pc, #548]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d06c      	beq.n	8001354 <HAL_RCC_OscConfig+0x12c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d168      	bne.n	8001354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e24c      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x76>
 8001290:	4b80      	ldr	r3, [pc, #512]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a7f      	ldr	r2, [pc, #508]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e02e      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b78      	ldr	r3, [pc, #480]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a77      	ldr	r2, [pc, #476]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0xbc>
 80012ca:	4b72      	ldr	r3, [pc, #456]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a71      	ldr	r2, [pc, #452]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6e      	ldr	r2, [pc, #440]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b68      	ldr	r3, [pc, #416]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a67      	ldr	r2, [pc, #412]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fa3a 	bl	800077c <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fa36 	bl	800077c <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	@ 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e200      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5d      	ldr	r3, [pc, #372]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xe4>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fa26 	bl	800077c <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fa22 	bl	800077c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	@ 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1ec      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b53      	ldr	r3, [pc, #332]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x10c>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001362:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800136e:	4b49      	ldr	r3, [pc, #292]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
 800137a:	4b46      	ldr	r3, [pc, #280]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b43      	ldr	r3, [pc, #268]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c0      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3d      	ldr	r3, [pc, #244]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4939      	ldr	r1, [pc, #228]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b36      	ldr	r3, [pc, #216]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff f9db 	bl	800077c <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff f9d7 	bl	800077c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a1      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4927      	ldr	r1, [pc, #156]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff f9ba 	bl	800077c <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff f9b6 	bl	800077c <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e180      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d03a      	beq.n	80014ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d019      	beq.n	8001472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_RCC_OscConfig+0x274>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff f99a 	bl	800077c <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff f996 	bl	800077c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e160      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 face 	bl	8001a0c <RCC_Delay>
 8001470:	e01c      	b.n	80014ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_RCC_OscConfig+0x274>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff f980 	bl	800077c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147e:	e00f      	b.n	80014a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff f97c 	bl	800077c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d908      	bls.n	80014a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e146      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	42420000 	.word	0x42420000
 800149c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b92      	ldr	r3, [pc, #584]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e9      	bne.n	8001480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a6 	beq.w	8001606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b8b      	ldr	r3, [pc, #556]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10d      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b88      	ldr	r3, [pc, #544]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a87      	ldr	r2, [pc, #540]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b85      	ldr	r3, [pc, #532]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b82      	ldr	r3, [pc, #520]	@ (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b7f      	ldr	r3, [pc, #508]	@ (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a7e      	ldr	r2, [pc, #504]	@ (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff f93d 	bl	800077c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff f939 	bl	800077c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b64      	cmp	r3, #100	@ 0x64
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e103      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b75      	ldr	r3, [pc, #468]	@ (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x312>
 800152c:	4b6f      	ldr	r3, [pc, #444]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a6e      	ldr	r2, [pc, #440]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e02d      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x334>
 8001542:	4b6a      	ldr	r3, [pc, #424]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a69      	ldr	r2, [pc, #420]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b67      	ldr	r3, [pc, #412]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a66      	ldr	r2, [pc, #408]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x356>
 8001564:	4b61      	ldr	r3, [pc, #388]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a60      	ldr	r2, [pc, #384]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	4b5e      	ldr	r3, [pc, #376]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a5d      	ldr	r2, [pc, #372]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800157e:	4b5b      	ldr	r3, [pc, #364]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a5a      	ldr	r2, [pc, #360]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	4b58      	ldr	r3, [pc, #352]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a57      	ldr	r2, [pc, #348]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff f8ed 	bl	800077c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff f8e9 	bl	800077c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0b1      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b4b      	ldr	r3, [pc, #300]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x37e>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff f8d7 	bl	800077c <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff f8d3 	bl	800077c <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e09b      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b40      	ldr	r3, [pc, #256]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b3c      	ldr	r3, [pc, #240]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a3b      	ldr	r2, [pc, #236]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8087 	beq.w	800171e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001610:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d061      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d146      	bne.n	80016b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b33      	ldr	r3, [pc, #204]	@ (80016f4 <HAL_RCC_OscConfig+0x4cc>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff f8a7 	bl	800077c <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff f8a3 	bl	800077c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e06d      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001644:	4b29      	ldr	r3, [pc, #164]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001658:	d108      	bne.n	800166c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4921      	ldr	r1, [pc, #132]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a19      	ldr	r1, [r3, #32]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	430b      	orrs	r3, r1
 800167e:	491b      	ldr	r1, [pc, #108]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_RCC_OscConfig+0x4cc>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff f877 	bl	800077c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff f873 	bl	800077c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e03d      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x46a>
 80016b0:	e035      	b.n	800171e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <HAL_RCC_OscConfig+0x4cc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff f860 	bl	800077c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff f85c 	bl	800077c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e026      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x498>
 80016de:	e01e      	b.n	800171e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e019      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40007000 	.word	0x40007000
 80016f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_RCC_OscConfig+0x500>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	429a      	cmp	r2, r3
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0d0      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b6a      	ldr	r3, [pc, #424]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d910      	bls.n	8001770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b67      	ldr	r3, [pc, #412]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 0207 	bic.w	r2, r3, #7
 8001756:	4965      	ldr	r1, [pc, #404]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a58      	ldr	r2, [pc, #352]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a52      	ldr	r2, [pc, #328]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d040      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d115      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e073      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3d      	ldr	r3, [pc, #244]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06b      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b39      	ldr	r3, [pc, #228]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4936      	ldr	r1, [pc, #216]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7fe ffae 	bl	800077c <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7fe ffaa 	bl	800077c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e053      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d210      	bcs.n	800187c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4922      	ldr	r1, [pc, #136]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	@ (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1cc>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_RCC_ClockConfig+0x1d0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe ff0c 	bl	80006f8 <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08002b28 	.word	0x08002b28
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800191a:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x94>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b04      	cmp	r3, #4
 8001928:	d002      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x30>
 800192a:	2b08      	cmp	r3, #8
 800192c:	d003      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x36>
 800192e:	e027      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x98>)
 8001932:	613b      	str	r3, [r7, #16]
      break;
 8001934:	e027      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	0c9b      	lsrs	r3, r3, #18
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	4a17      	ldr	r2, [pc, #92]	@ (800199c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d010      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x94>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	0c5b      	lsrs	r3, r3, #17
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	4a11      	ldr	r2, [pc, #68]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x98>)
 8001962:	fb03 f202 	mul.w	r2, r3, r2
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	fbb2 f3f3 	udiv	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e004      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	613b      	str	r3, [r7, #16]
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x98>)
 8001982:	613b      	str	r3, [r7, #16]
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	693b      	ldr	r3, [r7, #16]
}
 8001988:	4618      	mov	r0, r3
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	007a1200 	.word	0x007a1200
 800199c:	08002b40 	.word	0x08002b40
 80019a0:	08002b50 	.word	0x08002b50
 80019a4:	003d0900 	.word	0x003d0900

080019a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ac:	4b02      	ldr	r3, [pc, #8]	@ (80019b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000000 	.word	0x20000000

080019bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019c0:	f7ff fff2 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	4903      	ldr	r1, [pc, #12]	@ (80019e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d2:	5ccb      	ldrb	r3, [r1, r3]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d8:	4618      	mov	r0, r3
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	08002b38 	.word	0x08002b38

080019e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e8:	f7ff ffde 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	0adb      	lsrs	r3, r3, #11
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	4903      	ldr	r1, [pc, #12]	@ (8001a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	08002b38 	.word	0x08002b38

08001a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <RCC_Delay+0x34>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <RCC_Delay+0x38>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0a5b      	lsrs	r3, r3, #9
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a28:	bf00      	nop
  }
  while (Delay --);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f9      	bne.n	8001a28 <RCC_Delay+0x1c>
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000000 	.word	0x20000000
 8001a44:	10624dd3 	.word	0x10624dd3

08001a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e042      	b.n	8001ae0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7fe fd0e 	bl	8000490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	@ 0x24
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 ff85 	bl	800299c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	@ 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	4613      	mov	r3, r2
 8001af4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d156      	bne.n	8001bb0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_UART_Transmit_DMA+0x26>
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e04f      	b.n	8001bb2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2221      	movs	r2, #33	@ 0x21
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b36:	4a21      	ldr	r2, [pc, #132]	@ (8001bbc <HAL_UART_Transmit_DMA+0xd4>)
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b3e:	4a20      	ldr	r2, [pc, #128]	@ (8001bc0 <HAL_UART_Transmit_DMA+0xd8>)
 8001b40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b46:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc4 <HAL_UART_Transmit_DMA+0xdc>)
 8001b48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4e:	2200      	movs	r2, #0
 8001b50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3304      	adds	r3, #4
 8001b66:	461a      	mov	r2, r3
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	f7fe ff79 	bl	8000a60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3314      	adds	r3, #20
 8001b7e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	e853 3f00 	ldrex	r3, [r3]
 8001b86:	617b      	str	r3, [r7, #20]
   return(result);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3314      	adds	r3, #20
 8001b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b98:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b9a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b9c:	6a39      	ldr	r1, [r7, #32]
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba0:	e841 2300 	strex	r3, r2, [r1]
 8001ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e5      	bne.n	8001b78 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e000      	b.n	8001bb2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
  }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3730      	adds	r7, #48	@ 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	08002231 	.word	0x08002231
 8001bc0:	080022cb 	.word	0x080022cb
 8001bc4:	0800244f 	.word	0x0800244f

08001bc8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d112      	bne.n	8001c08 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_UART_Receive_DMA+0x26>
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00b      	b.n	8001c0a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fc70 	bl	80024e4 <UART_Start_Receive_DMA>
 8001c04:	4603      	mov	r3, r0
 8001c06:	e000      	b.n	8001c0a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
  }
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b08c      	sub	sp, #48	@ 0x30
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d146      	bne.n	8001cba <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e03f      	b.n	8001cbc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 fc48 	bl	80024e4 <UART_Start_Receive_DMA>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d125      	bne.n	8001cae <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	e853 3f00 	ldrex	r3, [r3]
 8001c86:	617b      	str	r3, [r7, #20]
   return(result);
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f043 0310 	orr.w	r3, r3, #16
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	330c      	adds	r3, #12
 8001c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c98:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c9c:	6a39      	ldr	r1, [r7, #32]
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca0:	e841 2300 	strex	r3, r2, [r1]
 8001ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e5      	bne.n	8001c78 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8001cac:	e002      	b.n	8001cb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8001cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cb8:	e000      	b.n	8001cbc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
  }
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3730      	adds	r7, #48	@ 0x30
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0ba      	sub	sp, #232	@ 0xe8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10f      	bne.n	8001d2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_UART_IRQHandler+0x66>
 8001d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fd7c 	bl	8002820 <UART_Receive_IT>
      return;
 8001d28:	e25b      	b.n	80021e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80de 	beq.w	8001ef0 <HAL_UART_IRQHandler+0x22c>
 8001d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80d1 	beq.w	8001ef0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_UART_IRQHandler+0xae>
 8001d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_UART_IRQHandler+0xd2>
 8001d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f043 0202 	orr.w	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_UART_IRQHandler+0xf6>
 8001da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f043 0204 	orr.w	r2, r3, #4
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d011      	beq.n	8001dea <HAL_UART_IRQHandler+0x126>
 8001dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f043 0208 	orr.w	r2, r3, #8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 81f2 	beq.w	80021d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_UART_IRQHandler+0x14e>
 8001e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fd07 	bl	8002820 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d103      	bne.n	8001e3e <HAL_UART_IRQHandler+0x17a>
 8001e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d04f      	beq.n	8001ede <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fc11 	bl	8002666 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d041      	beq.n	8001ed6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3314      	adds	r3, #20
 8001e58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e60:	e853 3f00 	ldrex	r3, [r3]
 8001e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3314      	adds	r3, #20
 8001e7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001e7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001e8e:	e841 2300 	strex	r3, r2, [r1]
 8001e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1d9      	bne.n	8001e52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d013      	beq.n	8001ece <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80020a4 <HAL_UART_IRQHandler+0x3e0>)
 8001eac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fe70 	bl	8000b98 <HAL_DMA_Abort_IT>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ecc:	e00e      	b.n	8001eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f9a5 	bl	800221e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed4:	e00a      	b.n	8001eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f9a1 	bl	800221e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001edc:	e006      	b.n	8001eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f99d 	bl	800221e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001eea:	e175      	b.n	80021d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eec:	bf00      	nop
    return;
 8001eee:	e173      	b.n	80021d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	f040 814f 	bne.w	8002198 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8148 	beq.w	8002198 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8141 	beq.w	8002198 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80b6 	beq.w	80020a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8145 	beq.w	80021dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	f080 813e 	bcs.w	80021dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	f000 8088 	beq.w	8002084 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f82:	e853 3f00 	ldrex	r3, [r3]
 8001f86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	330c      	adds	r3, #12
 8001f9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001fa0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001fac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001fb0:	e841 2300 	strex	r3, r2, [r1]
 8001fb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1d9      	bne.n	8001f74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3314      	adds	r3, #20
 8001fc6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fca:	e853 3f00 	ldrex	r3, [r3]
 8001fce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001fd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3314      	adds	r3, #20
 8001fe0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fe4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001fe8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001fec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001ff0:	e841 2300 	strex	r3, r2, [r1]
 8001ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e1      	bne.n	8001fc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3314      	adds	r3, #20
 8002002:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002004:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002006:	e853 3f00 	ldrex	r3, [r3]
 800200a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800200c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800200e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3314      	adds	r3, #20
 800201c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002020:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002022:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002024:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002026:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002028:	e841 2300 	strex	r3, r2, [r1]
 800202c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800202e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1e3      	bne.n	8001ffc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	330c      	adds	r3, #12
 8002048:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800204c:	e853 3f00 	ldrex	r3, [r3]
 8002050:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002054:	f023 0310 	bic.w	r3, r3, #16
 8002058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	330c      	adds	r3, #12
 8002062:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002066:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002068:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800206c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800206e:	e841 2300 	strex	r3, r2, [r1]
 8002072:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e3      	bne.n	8002042 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fd4e 	bl	8000b20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002092:	b29b      	uxth	r3, r3
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	b29b      	uxth	r3, r3
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe f898 	bl	80001d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020a0:	e09c      	b.n	80021dc <HAL_UART_IRQHandler+0x518>
 80020a2:	bf00      	nop
 80020a4:	0800272b 	.word	0x0800272b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 808e 	beq.w	80021e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80020c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8089 	beq.w	80021e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	330c      	adds	r3, #12
 80020d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d8:	e853 3f00 	ldrex	r3, [r3]
 80020dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80020de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	330c      	adds	r3, #12
 80020ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80020f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80020f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020fa:	e841 2300 	strex	r3, r2, [r1]
 80020fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e3      	bne.n	80020ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3314      	adds	r3, #20
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	e853 3f00 	ldrex	r3, [r3]
 8002114:	623b      	str	r3, [r7, #32]
   return(result);
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3314      	adds	r3, #20
 8002126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800212a:	633a      	str	r2, [r7, #48]	@ 0x30
 800212c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002132:	e841 2300 	strex	r3, r2, [r1]
 8002136:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1e3      	bne.n	8002106 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	330c      	adds	r3, #12
 8002152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	e853 3f00 	ldrex	r3, [r3]
 800215a:	60fb      	str	r3, [r7, #12]
   return(result);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0310 	bic.w	r3, r3, #16
 8002162:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002170:	61fa      	str	r2, [r7, #28]
 8002172:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002174:	69b9      	ldr	r1, [r7, #24]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	e841 2300 	strex	r3, r2, [r1]
 800217c:	617b      	str	r3, [r7, #20]
   return(result);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e3      	bne.n	800214c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800218a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7fe f81d 	bl	80001d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002196:	e023      	b.n	80021e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800219c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <HAL_UART_IRQHandler+0x4f4>
 80021a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 face 	bl	8002752 <UART_Transmit_IT>
    return;
 80021b6:	e014      	b.n	80021e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00e      	beq.n	80021e2 <HAL_UART_IRQHandler+0x51e>
 80021c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fb0d 	bl	80027f0 <UART_EndTransmit_IT>
    return;
 80021d6:	e004      	b.n	80021e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80021d8:	bf00      	nop
 80021da:	e002      	b.n	80021e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80021dc:	bf00      	nop
 80021de:	e000      	b.n	80021e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80021e0:	bf00      	nop
  }
}
 80021e2:	37e8      	adds	r7, #232	@ 0xe8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b090      	sub	sp, #64	@ 0x40
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d137      	bne.n	80022bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800224c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224e:	2200      	movs	r2, #0
 8002250:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3314      	adds	r3, #20
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	e853 3f00 	ldrex	r3, [r3]
 8002260:	623b      	str	r3, [r7, #32]
   return(result);
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800226a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3314      	adds	r3, #20
 8002270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002272:	633a      	str	r2, [r7, #48]	@ 0x30
 8002274:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800227a:	e841 2300 	strex	r3, r2, [r1]
 800227e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e5      	bne.n	8002252 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	330c      	adds	r3, #12
 800228c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	e853 3f00 	ldrex	r3, [r3]
 8002294:	60fb      	str	r3, [r7, #12]
   return(result);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800229c:	637b      	str	r3, [r7, #52]	@ 0x34
 800229e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	330c      	adds	r3, #12
 80022a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022a6:	61fa      	str	r2, [r7, #28]
 80022a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	e841 2300 	strex	r3, r2, [r1]
 80022b2:	617b      	str	r3, [r7, #20]
   return(result);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1e5      	bne.n	8002286 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80022ba:	e002      	b.n	80022c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80022bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80022be:	f7ff ff93 	bl	80021e8 <HAL_UART_TxCpltCallback>
}
 80022c2:	bf00      	nop
 80022c4:	3740      	adds	r7, #64	@ 0x40
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff ff8e 	bl	80021fa <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b09c      	sub	sp, #112	@ 0x70
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d172      	bne.n	80023e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002304:	2200      	movs	r2, #0
 8002306:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	330c      	adds	r3, #12
 800230e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002312:	e853 3f00 	ldrex	r3, [r3]
 8002316:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800231a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800231e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	330c      	adds	r3, #12
 8002326:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002328:	65ba      	str	r2, [r7, #88]	@ 0x58
 800232a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800232e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002330:	e841 2300 	strex	r3, r2, [r1]
 8002334:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e5      	bne.n	8002308 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3314      	adds	r3, #20
 8002342:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002346:	e853 3f00 	ldrex	r3, [r3]
 800234a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800234c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	667b      	str	r3, [r7, #100]	@ 0x64
 8002354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3314      	adds	r3, #20
 800235a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800235c:	647a      	str	r2, [r7, #68]	@ 0x44
 800235e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002364:	e841 2300 	strex	r3, r2, [r1]
 8002368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800236a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e5      	bne.n	800233c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3314      	adds	r3, #20
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	e853 3f00 	ldrex	r3, [r3]
 800237e:	623b      	str	r3, [r7, #32]
   return(result);
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002386:	663b      	str	r3, [r7, #96]	@ 0x60
 8002388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3314      	adds	r3, #20
 800238e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002390:	633a      	str	r2, [r7, #48]	@ 0x30
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002398:	e841 2300 	strex	r3, r2, [r1]
 800239c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e5      	bne.n	8002370 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d119      	bne.n	80023e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	e853 3f00 	ldrex	r3, [r3]
 80023c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0310 	bic.w	r3, r3, #16
 80023ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	330c      	adds	r3, #12
 80023d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80023d4:	61fa      	str	r2, [r7, #28]
 80023d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d8:	69b9      	ldr	r1, [r7, #24]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	e841 2300 	strex	r3, r2, [r1]
 80023e0:	617b      	str	r3, [r7, #20]
   return(result);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e5      	bne.n	80023b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ea:	2200      	movs	r2, #0
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d106      	bne.n	8002404 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80023f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80023fa:	4619      	mov	r1, r3
 80023fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80023fe:	f7fd fee7 	bl	80001d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002402:	e002      	b.n	800240a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002404:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002406:	f7fd fea1 	bl	800014c <HAL_UART_RxCpltCallback>
}
 800240a:	bf00      	nop
 800240c:	3770      	adds	r7, #112	@ 0x70
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	b29b      	uxth	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7fd fec9 	bl	80001d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800243e:	e002      	b.n	8002446 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff fee3 	bl	800220c <HAL_UART_RxHalfCpltCallback>
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf14      	ite	ne
 800246e:	2301      	movne	r3, #1
 8002470:	2300      	moveq	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b21      	cmp	r3, #33	@ 0x21
 8002480:	d108      	bne.n	8002494 <UART_DMAError+0x46>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800248e:	68b8      	ldr	r0, [r7, #8]
 8002490:	f000 f8c2 	bl	8002618 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf14      	ite	ne
 80024a2:	2301      	movne	r3, #1
 80024a4:	2300      	moveq	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b22      	cmp	r3, #34	@ 0x22
 80024b4:	d108      	bne.n	80024c8 <UART_DMAError+0x7a>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80024c2:	68b8      	ldr	r0, [r7, #8]
 80024c4:	f000 f8cf 	bl	8002666 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024cc:	f043 0210 	orr.w	r2, r3, #16
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024d4:	68b8      	ldr	r0, [r7, #8]
 80024d6:	f7ff fea2 	bl	800221e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b098      	sub	sp, #96	@ 0x60
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2222      	movs	r2, #34	@ 0x22
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002510:	4a3e      	ldr	r2, [pc, #248]	@ (800260c <UART_Start_Receive_DMA+0x128>)
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002518:	4a3d      	ldr	r2, [pc, #244]	@ (8002610 <UART_Start_Receive_DMA+0x12c>)
 800251a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	4a3c      	ldr	r2, [pc, #240]	@ (8002614 <UART_Start_Receive_DMA+0x130>)
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	2200      	movs	r2, #0
 800252a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800252c:	f107 0308 	add.w	r3, r7, #8
 8002530:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3304      	adds	r3, #4
 800253c:	4619      	mov	r1, r3
 800253e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	f7fe fa8c 	bl	8000a60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d019      	beq.n	800259a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	330c      	adds	r3, #12
 800256c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002570:	e853 3f00 	ldrex	r3, [r3]
 8002574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	330c      	adds	r3, #12
 8002584:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002586:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002588:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800258c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800258e:	e841 2300 	strex	r3, r2, [r1]
 8002592:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1e5      	bne.n	8002566 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3314      	adds	r3, #20
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	e853 3f00 	ldrex	r3, [r3]
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3314      	adds	r3, #20
 80025b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80025bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80025c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025c2:	e841 2300 	strex	r3, r2, [r1]
 80025c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1e5      	bne.n	800259a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3314      	adds	r3, #20
 80025d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	e853 3f00 	ldrex	r3, [r3]
 80025dc:	617b      	str	r3, [r7, #20]
   return(result);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3314      	adds	r3, #20
 80025ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80025ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80025f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f2:	6a39      	ldr	r1, [r7, #32]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f6:	e841 2300 	strex	r3, r2, [r1]
 80025fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e5      	bne.n	80025ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3760      	adds	r7, #96	@ 0x60
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	080022e7 	.word	0x080022e7
 8002610:	08002413 	.word	0x08002413
 8002614:	0800244f 	.word	0x0800244f

08002618 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	330c      	adds	r3, #12
 8002626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	e853 3f00 	ldrex	r3, [r3]
 800262e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	61ba      	str	r2, [r7, #24]
 8002642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002644:	6979      	ldr	r1, [r7, #20]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	613b      	str	r3, [r7, #16]
   return(result);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e5      	bne.n	8002620 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800265c:	bf00      	nop
 800265e:	3724      	adds	r7, #36	@ 0x24
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002666:	b480      	push	{r7}
 8002668:	b095      	sub	sp, #84	@ 0x54
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002678:	e853 3f00 	ldrex	r3, [r3]
 800267c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800267e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800268e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002694:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800269c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e5      	bne.n	800266e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3314      	adds	r3, #20
 80026a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3314      	adds	r3, #20
 80026c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ca:	e841 2300 	strex	r3, r2, [r1]
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e5      	bne.n	80026a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d119      	bne.n	8002712 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	330c      	adds	r3, #12
 80026e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	e853 3f00 	ldrex	r3, [r3]
 80026ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f023 0310 	bic.w	r3, r3, #16
 80026f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026fe:	61ba      	str	r2, [r7, #24]
 8002700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	6979      	ldr	r1, [r7, #20]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	e841 2300 	strex	r3, r2, [r1]
 800270a:	613b      	str	r3, [r7, #16]
   return(result);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e5      	bne.n	80026de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002720:	bf00      	nop
 8002722:	3754      	adds	r7, #84	@ 0x54
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff fd6a 	bl	800221e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b21      	cmp	r3, #33	@ 0x21
 8002764:	d13e      	bne.n	80027e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800276e:	d114      	bne.n	800279a <UART_Transmit_IT+0x48>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d110      	bne.n	800279a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800278c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	1c9a      	adds	r2, r3, #2
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	621a      	str	r2, [r3, #32]
 8002798:	e008      	b.n	80027ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	1c59      	adds	r1, r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6211      	str	r1, [r2, #32]
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4619      	mov	r1, r3
 80027ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10f      	bne.n	80027e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002806:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fce9 	bl	80021e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	@ 0x30
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b22      	cmp	r3, #34	@ 0x22
 8002832:	f040 80ae 	bne.w	8002992 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800283e:	d117      	bne.n	8002870 <UART_Receive_IT+0x50>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d113      	bne.n	8002870 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285e:	b29a      	uxth	r2, r3
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002868:	1c9a      	adds	r2, r3, #2
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	629a      	str	r2, [r3, #40]	@ 0x28
 800286e:	e026      	b.n	80028be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002882:	d007      	beq.n	8002894 <UART_Receive_IT+0x74>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <UART_Receive_IT+0x82>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d106      	bne.n	80028a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e008      	b.n	80028b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4619      	mov	r1, r3
 80028cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d15d      	bne.n	800298e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0220 	bic.w	r2, r2, #32
 80028e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	2b01      	cmp	r3, #1
 8002916:	d135      	bne.n	8002984 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	613b      	str	r3, [r7, #16]
   return(result);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f023 0310 	bic.w	r3, r3, #16
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293e:	623a      	str	r2, [r7, #32]
 8002940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002942:	69f9      	ldr	r1, [r7, #28]
 8002944:	6a3a      	ldr	r2, [r7, #32]
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	61bb      	str	r3, [r7, #24]
   return(result);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e5      	bne.n	800291e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b10      	cmp	r3, #16
 800295e:	d10a      	bne.n	8002976 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800297a:	4619      	mov	r1, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7fd fc27 	bl	80001d0 <HAL_UARTEx_RxEventCallback>
 8002982:	e002      	b.n	800298a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7fd fbe1 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e002      	b.n	8002994 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	3730      	adds	r7, #48	@ 0x30
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80029d6:	f023 030c 	bic.w	r3, r3, #12
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2c      	ldr	r2, [pc, #176]	@ (8002ab0 <UART_SetConfig+0x114>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d103      	bne.n	8002a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a04:	f7fe ffee 	bl	80019e4 <HAL_RCC_GetPCLK2Freq>
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	e002      	b.n	8002a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f7fe ffd6 	bl	80019bc <HAL_RCC_GetPCLK1Freq>
 8002a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009a      	lsls	r2, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	4a22      	ldr	r2, [pc, #136]	@ (8002ab4 <UART_SetConfig+0x118>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	0119      	lsls	r1, r3, #4
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	009a      	lsls	r2, r3, #2
 8002a3c:	441a      	add	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <UART_SetConfig+0x118>)
 8002a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2064      	movs	r0, #100	@ 0x64
 8002a52:	fb00 f303 	mul.w	r3, r0, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	3332      	adds	r3, #50	@ 0x32
 8002a5c:	4a15      	ldr	r2, [pc, #84]	@ (8002ab4 <UART_SetConfig+0x118>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a68:	4419      	add	r1, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009a      	lsls	r2, r3, #2
 8002a74:	441a      	add	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <UART_SetConfig+0x118>)
 8002a82:	fba3 0302 	umull	r0, r3, r3, r2
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2064      	movs	r0, #100	@ 0x64
 8002a8a:	fb00 f303 	mul.w	r3, r0, r3
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	3332      	adds	r3, #50	@ 0x32
 8002a94:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <UART_SetConfig+0x118>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	440a      	add	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	51eb851f 	.word	0x51eb851f

08002ab8 <memset>:
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4402      	add	r2, r0
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <memset+0xa>
 8002ac0:	4770      	bx	lr
 8002ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac6:	e7f9      	b.n	8002abc <memset+0x4>

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	2600      	movs	r6, #0
 8002acc:	4d0c      	ldr	r5, [pc, #48]	@ (8002b00 <__libc_init_array+0x38>)
 8002ace:	4c0d      	ldr	r4, [pc, #52]	@ (8002b04 <__libc_init_array+0x3c>)
 8002ad0:	1b64      	subs	r4, r4, r5
 8002ad2:	10a4      	asrs	r4, r4, #2
 8002ad4:	42a6      	cmp	r6, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	f000 f81a 	bl	8002b10 <_init>
 8002adc:	2600      	movs	r6, #0
 8002ade:	4d0a      	ldr	r5, [pc, #40]	@ (8002b08 <__libc_init_array+0x40>)
 8002ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8002b0c <__libc_init_array+0x44>)
 8002ae2:	1b64      	subs	r4, r4, r5
 8002ae4:	10a4      	asrs	r4, r4, #2
 8002ae6:	42a6      	cmp	r6, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af0:	4798      	blx	r3
 8002af2:	3601      	adds	r6, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afa:	4798      	blx	r3
 8002afc:	3601      	adds	r6, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	08002b54 	.word	0x08002b54
 8002b04:	08002b54 	.word	0x08002b54
 8002b08:	08002b54 	.word	0x08002b54
 8002b0c:	08002b58 	.word	0x08002b58

08002b10 <_init>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr

08002b1c <_fini>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr
